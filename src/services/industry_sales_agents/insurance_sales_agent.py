"""
Insurance Sales Agent
Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh B·∫£o hi·ªÉm
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language
from src.providers.ai_provider_manager import AIProviderManager

class InsuranceSalesAgent:
    """
    Specialized insurance sales agent
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh b·∫£o hi·ªÉm
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process insurance consultation inquiry
        X·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n b·∫£o hi·ªÉm
        """
        try:
            print(f"üõ°Ô∏è [INSURANCE_SALES] Processing insurance inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create specialized insurance prompt / T·∫°o prompt chuy√™n bi·ªát b·∫£o hi·ªÉm
            prompt = self._create_insurance_consultation_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "insurance_sales_agent"
            )
            
            # Generate consultation code if customer shows interest / T·∫°o m√£ t∆∞ v·∫•n n·∫øu kh√°ch quan t√¢m
            consultation_code = None
            if self._detect_purchase_intent(message, language):
                consultation_code = self._generate_consultation_code(company_id)
            
            return {
                "response": response,
                "industry": "insurance",
                "agent_type": "insurance_sales",
                "company_id": company_id,
                "language": language.value,
                "consultation_code": consultation_code,
                "confidence": 0.95
            }
            
        except Exception as e:
            print(f"‚ùå [INSURANCE_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": "insurance",
                "agent_type": "insurance_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_insurance_consultation_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized insurance consultation prompt
        T·∫°o prompt t∆∞ v·∫•n b·∫£o hi·ªÉm chuy√™n bi·ªát
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n b·∫£o hi·ªÉm chuy√™n nghi·ªáp c·ªßa c√¥ng ty (ID: {company_id}).

CHUY√äN M√îN B·∫¢O HI·ªÇM:
- T∆∞ v·∫•n c√°c lo·∫°i b·∫£o hi·ªÉm: nh√¢n th·ªç, s·ª©c kh·ªèe, xe c·ªô, t√†i s·∫£n, du l·ªãch
- Ph√¢n t√≠ch r·ªßi ro v√† t√≠nh to√°n ph√≠ b·∫£o hi·ªÉm ph√π h·ª£p
- H∆∞·ªõng d·∫´n quy tr√¨nh ƒëƒÉng k√Ω v√† th·ªß t·ª•c b·ªìi th∆∞·ªùng
- T∆∞ v·∫•n k·∫ø ho·∫°ch b·∫£o v·ªá t√†i ch√≠nh d√†i h·∫°n
- H·ªó tr·ª£ gia h·∫°n v√† ƒëi·ªÅu ch·ªânh h·ª£p ƒë·ªìng b·∫£o hi·ªÉm

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n s·∫£n ph·∫©m b·∫£o hi·ªÉm c·ªßa c√¥ng ty n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn c√¥ng ty b·∫£o hi·ªÉm kh√°c
3. Lu√¥n ph√¢n t√≠ch nhu c·∫ßu b·∫£o v·ªá c·ª• th·ªÉ c·ªßa kh√°ch h√†ng
4. Gi·∫£i th√≠ch r√µ r√†ng v·ªÅ quy·ªÅn l·ª£i v√† ƒëi·ªÅu ki·ªán b·∫£o hi·ªÉm
5. T·∫°o m√£ t∆∞ v·∫•n khi kh√°ch h√†ng quan t√¢m ƒë·∫øn s·∫£n ph·∫©m c·ª• th·ªÉ

TH√îNG TIN C√îNG TY:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, d·ªÖ hi·ªÉu
- Ph√¢n t√≠ch nhu c·∫ßu b·∫£o v·ªá c·ªßa kh√°ch h√†ng (gia ƒë√¨nh, t√†i s·∫£n, s·ª©c kh·ªèe)
- Gi·ªõi thi·ªáu g√≥i b·∫£o hi·ªÉm ph√π h·ª£p v·ªõi t√¨nh h√¨nh t√†i ch√≠nh
- Gi·∫£i th√≠ch r√µ quy·ªÅn l·ª£i, ph√≠ b·∫£o hi·ªÉm v√† quy tr√¨nh b·ªìi th∆∞·ªùng
- N·∫øu kh√°ch quan t√¢m: t·∫°o m√£ t∆∞ v·∫•n (format: INS-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: h·∫πn l·ªãch t∆∞ v·∫•n chi ti·∫øt ho·∫∑c ƒëƒÉng k√Ω
- Nh·∫•n m·∫°nh l·ª£i √≠ch b·∫£o v·ªá v√† an t√¢m t√†i ch√≠nh

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional insurance consultant for the company (ID: {company_id}).

INSURANCE EXPERTISE:
- Insurance consultation: life, health, auto, property, travel insurance
- Risk analysis and premium calculation
- Registration process and claims procedure guidance
- Long-term financial protection planning
- Contract renewal and adjustment support

IMPORTANT RULES:
1. ONLY advise on insurance products of this company (ID: {company_id})
2. DO NOT mention other insurance companies
3. Always analyze specific protection needs of customers
4. Clearly explain benefits and insurance conditions
5. Generate consultation code when customers show interest in specific products

COMPANY INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and clearly
- Analyze customer's protection needs (family, assets, health)
- Introduce suitable insurance packages for their financial situation
- Explain benefits, premiums, and claims procedures clearly
- If customer interested: create consultation code (format: INS-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: schedule detailed consultation or registration
- Emphasize protection benefits and financial peace of mind

RESPONSE:
"""
    
    def _detect_purchase_intent(self, message: str, language: Language) -> bool:
        """Detect if customer shows purchase intent / Ph√°t hi·ªán √Ω ƒë·ªãnh mua c·ªßa kh√°ch h√†ng"""
        if language == Language.VIETNAMESE:
            intent_keywords = [
                "mu·ªën mua", "ƒëƒÉng k√Ω", "tham gia", "quan t√¢m", "t∆∞ v·∫•n chi ti·∫øt",
                "bao nhi√™u ti·ªÅn", "ph√≠ b·∫£o hi·ªÉm", "quy tr√¨nh", "th·ªß t·ª•c",
                "l√†m sao ƒë·ªÉ", "c·∫ßn b·∫£o hi·ªÉm", "b·∫£o v·ªá", "an to√†n"
            ]
        else:
            intent_keywords = [
                "want to buy", "interested in", "how much", "premium cost",
                "sign up", "register", "purchase", "need insurance",
                "protect", "coverage", "policy", "quote"
            ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in intent_keywords)
    
    def _generate_consultation_code(self, company_id: str) -> str:
        """Generate insurance consultation code / T·∫°o m√£ t∆∞ v·∫•n b·∫£o hi·ªÉm"""
        timestamp = datetime.now().strftime("%Y%m%d")
        import random
        random_num = random.randint(1000, 9999)
        return f"INS-{company_id[:4].upper()}-{timestamp}-{random_num}"
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n b·∫£o hi·ªÉm c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªô ph·∫≠n t∆∞ v·∫•n b·∫£o hi·ªÉm
- Gh√© thƒÉm vƒÉn ph√≤ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp
- G·ª≠i email v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ nhu c·∫ßu b·∫£o hi·ªÉm
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin c·ª• th·ªÉ h∆°n v·ªÅ lo·∫°i b·∫£o hi·ªÉm

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c s·∫£n ph·∫©m b·∫£o hi·ªÉm kh√°c!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your insurance consultation request.
For the best support, you can:
- Contact the insurance consultation department directly
- Visit the office for direct consultation
- Send an email with detailed insurance needs
- Try asking again with more specific insurance type information

I'm ready to help you with other insurance products!
"""
