"""
Education Sales Agent
Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh Gi√°o d·ª•c
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language
from src.providers.ai_provider_manager import AIProviderManager

class EducationSalesAgent:
    """
    Specialized education sales agent
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh gi√°o d·ª•c
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process education service consultation inquiry
        X·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n d·ªãch v·ª• gi√°o d·ª•c
        """
        try:
            print(f"üéì [EDUCATION_SALES] Processing education inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create specialized education prompt / T·∫°o prompt chuy√™n bi·ªát gi√°o d·ª•c
            prompt = self._create_education_consultation_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "education_sales_agent"
            )
            
            # Generate enrollment code if customer shows interest / T·∫°o m√£ ƒëƒÉng k√Ω n·∫øu kh√°ch quan t√¢m
            enrollment_code = None
            if self._detect_enrollment_intent(message, language):
                enrollment_code = self._generate_enrollment_code(company_id)
            
            return {
                "response": response,
                "industry": "education",
                "agent_type": "education_sales",
                "company_id": company_id,
                "language": language.value,
                "enrollment_code": enrollment_code,
                "confidence": 0.95
            }
            
        except Exception as e:
            print(f"‚ùå [EDUCATION_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": "education",
                "agent_type": "education_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_education_consultation_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized education consultation prompt
        T·∫°o prompt t∆∞ v·∫•n gi√°o d·ª•c chuy√™n bi·ªát
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† t∆∞ v·∫•n vi√™n gi√°o d·ª•c chuy√™n nghi·ªáp c·ªßa c∆° s·ªü gi√°o d·ª•c (ID: {company_id}).

CHUY√äN M√îN GI√ÅO D·ª§C:
- T∆∞ v·∫•n c√°c kh√≥a h·ªçc v√† ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ph√π h·ª£p
- H∆∞·ªõng d·∫´n l·ªô tr√¨nh h·ªçc t·∫≠p v√† ph√°t tri·ªÉn k·ªπ nƒÉng
- T∆∞ v·∫•n ƒëƒÉng k√Ω h·ªçc, th·ªß t·ª•c v√† h·ªçc ph√≠
- H·ªó tr·ª£ h·ªçc vi√™n trong qu√° tr√¨nh h·ªçc t·∫≠p
- T∆∞ v·∫•n ch·ª©ng ch·ªâ, b·∫±ng c·∫•p v√† c∆° h·ªôi ngh·ªÅ nghi·ªáp
- ChƒÉm s√≥c h·ªçc vi√™n v√† t∆∞ v·∫•n h·ªçc b·ªïng

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n c√°c kh√≥a h·ªçc c·ªßa c∆° s·ªü n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn tr∆∞·ªùng h·ªçc ho·∫∑c trung t√¢m ƒë√†o t·∫°o kh√°c
3. Lu√¥n ph√¢n t√≠ch nhu c·∫ßu h·ªçc t·∫≠p v√† m·ª•c ti√™u ngh·ªÅ nghi·ªáp
4. ƒê∆∞a ra l·ªô tr√¨nh h·ªçc t·∫≠p ph√π h·ª£p v·ªõi t·ª´ng c√° nh√¢n
5. T·∫°o m√£ ƒëƒÉng k√Ω khi h·ªçc vi√™n quan t√¢m ƒë·∫øn kh√≥a h·ªçc c·ª• th·ªÉ

TH√îNG TIN C∆† S·ªû GI√ÅO D·ª§C:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, nhi·ªát t√¨nh
- Ph√¢n t√≠ch nhu c·∫ßu h·ªçc t·∫≠p v√† m·ª•c ti√™u ngh·ªÅ nghi·ªáp
- G·ª£i √Ω kh√≥a h·ªçc ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô v√† th·ªùi gian
- Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ n·ªôi dung, th·ªùi l∆∞·ª£ng v√† h·ªçc ph√≠
- N·∫øu h·ªçc vi√™n quan t√¢m: t·∫°o m√£ ƒëƒÉng k√Ω (format: EDU-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: ƒëƒÉng k√Ω, thanh to√°n, b·∫Øt ƒë·∫ßu h·ªçc
- Nh·∫•n m·∫°nh ch·∫•t l∆∞·ª£ng gi·∫£ng d·∫°y v√† c∆° h·ªôi ph√°t tri·ªÉn

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional education consultant for the educational institution (ID: {company_id}).

EDUCATION EXPERTISE:
- Course and training program consultation
- Learning pathway and skill development guidance
- Enrollment guidance, procedures, and tuition consultation
- Student support during learning process
- Certificate, degree, and career opportunity consultation
- Student care and scholarship consultation

IMPORTANT RULES:
1. ONLY advise on courses of this institution (ID: {company_id})
2. DO NOT mention other schools or training centers
3. Always analyze learning needs and career goals
4. Provide suitable learning pathways for each individual
5. Generate enrollment code when students show interest in specific courses

EDUCATIONAL INSTITUTION INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and enthusiastically
- Analyze learning needs and career objectives
- Suggest suitable courses for skill level and schedule
- Explain details about content, duration, and tuition
- If student interested: create enrollment code (format: EDU-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: enrollment, payment, start learning
- Emphasize teaching quality and development opportunities

RESPONSE:
"""
    
    def _detect_enrollment_intent(self, message: str, language: Language) -> bool:
        """Detect if customer shows enrollment intent / Ph√°t hi·ªán √Ω ƒë·ªãnh ƒëƒÉng k√Ω c·ªßa kh√°ch h√†ng"""
        if language == Language.VIETNAMESE:
            intent_keywords = [
                "ƒëƒÉng k√Ω", "h·ªçc", "kh√≥a h·ªçc", "l·ªõp", "ch∆∞∆°ng tr√¨nh",
                "h·ªçc ph√≠", "th·ªùi gian h·ªçc", "l·ªãch h·ªçc", "gi√°o vi√™n",
                "ch·ª©ng ch·ªâ", "b·∫±ng c·∫•p", "h·ªçc b·ªïng", "t∆∞ v·∫•n", "mu·ªën h·ªçc"
            ]
        else:
            intent_keywords = [
                "enroll", "register", "course", "class", "program",
                "tuition", "schedule", "teacher", "instructor",
                "certificate", "degree", "scholarship", "want to learn", "study"
            ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in intent_keywords)
    
    def _generate_enrollment_code(self, company_id: str) -> str:
        """Generate education enrollment code / T·∫°o m√£ ƒëƒÉng k√Ω gi√°o d·ª•c"""
        timestamp = datetime.now().strftime("%Y%m%d")
        import random
        random_num = random.randint(1000, 9999)
        return f"EDU-{company_id[:4].upper()}-{timestamp}-{random_num}"
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n gi√°o d·ª•c c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ph√≤ng t∆∞ v·∫•n tuy·ªÉn sinh
- Gh√© thƒÉm c∆° s·ªü ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp v√† tham quan
- G·ª≠i th√¥ng tin v·ªÅ nhu c·∫ßu h·ªçc t·∫≠p c·ª• th·ªÉ
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin chi ti·∫øt h∆°n v·ªÅ kh√≥a h·ªçc quan t√¢m

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n t√¨m ki·∫øm con ƒë∆∞·ªùng h·ªçc t·∫≠p ph√π h·ª£p!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your education consultation request.
For the best support, you can:
- Contact the admissions counseling office directly
- Visit our facility for direct consultation and tour
- Send information about your specific learning needs
- Try asking again with more detailed course interest information

I'm ready to help you find the right learning path!
"""
