"""
Banking Sales Agent
Agent b√°n h√†ng cho ng√†nh ng√¢n h√†ng v·ªõi prompt v√† flow ri√™ng bi·ªát
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language, Industry
from src.providers.ai_provider_manager import AIProviderManager

class BankingSalesAgent:
    """
    Sales agent specialized for banking industry
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh ng√¢n h√†ng
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
        self.industry = Industry.BANKING
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process banking sales inquiry with specialized prompts
        X·ª≠ l√Ω y√™u c·∫ßu b√°n h√†ng ng√¢n h√†ng v·ªõi prompt chuy√™n bi·ªát
        """
        try:
            print(f"üè¶ [BANKING_SALES] Processing inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create banking-specific sales prompt / T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho ng√¢n h√†ng
            prompt = self._create_banking_sales_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "banking_sales_agent"
            )
            
            return {
                "response": response,
                "industry": self.industry.value,
                "agent_type": "banking_sales",
                "company_id": company_id,
                "language": language.value,
                "confidence": 0.9
            }
            
        except Exception as e:
            print(f"‚ùå [BANKING_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": self.industry.value,
                "agent_type": "banking_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_banking_sales_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized banking sales prompt
        T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho ng√¢n h√†ng
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n t√†i ch√≠nh chuy√™n nghi·ªáp c·ªßa ng√¢n h√†ng (ID: {company_id}).

CHUY√äN M√îN NG√ÇN H√ÄNG:
- T∆∞ v·∫•n c√°c s·∫£n ph·∫©m vay: c√° nh√¢n, th·∫ø ch·∫•p, kinh doanh
- Th·∫ª t√≠n d·ª•ng v√† d·ªãch v·ª• thanh to√°n
- Ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞
- B·∫£o hi·ªÉm ng√¢n h√†ng
- D·ªãch v·ª• chuy·ªÉn ti·ªÅn v√† ngo·∫°i h·ªëi

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n s·∫£n ph·∫©m/d·ªãch v·ª• c·ªßa ng√¢n h√†ng n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn ng√¢n h√†ng kh√°c
3. KH√îNG t∆∞ v·∫•n ngo√†i lƒ©nh v·ª±c ng√¢n h√†ng
4. Lu√¥n h∆∞·ªõng kh√°ch h√†ng ƒë·∫øn c√°c b∆∞·ªõc c·ª• th·ªÉ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch
5. T·∫°o m√£ giao d·ªãch t·∫°m th·ªùi khi kh√°ch h√†ng c√≥ nhu c·∫ßu r√µ r√†ng

TH√îNG TIN NG√ÇN H√ÄNG:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, th√¢n thi·ªán
- Ph√¢n t√≠ch nhu c·∫ßu t√†i ch√≠nh c·ªßa kh√°ch h√†ng
- ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p v·ªõi l·ª£i √≠ch c·ª• th·ªÉ
- N·∫øu kh√°ch h√†ng quan t√¢m: t·∫°o m√£ t∆∞ v·∫•n (format: BANK-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: ƒëƒÉng k√Ω online, ƒë·∫øn chi nh√°nh, g·ªçi hotline
- Nh·∫•n m·∫°nh ∆∞u ƒëi·ªÉm c·∫°nh tranh c·ªßa ng√¢n h√†ng

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional financial advisor for the bank (ID: {company_id}).

BANKING EXPERTISE:
- Loan consulting: personal, mortgage, business loans
- Credit cards and payment services
- Savings and investment
- Bank insurance
- Money transfer and foreign exchange services

IMPORTANT RULES:
1. ONLY advise on products/services of this bank (ID: {company_id})
2. DO NOT mention other banks
3. DO NOT advise outside banking field
4. Always guide customers to specific steps for transactions
5. Generate temporary transaction codes when customers show clear interest

BANK INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and friendly
- Analyze customer's financial needs
- Suggest suitable products with specific benefits
- If customer is interested: create consultation code (format: BANK-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: online registration, branch visit, hotline call
- Emphasize bank's competitive advantages

RESPONSE:
"""
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n t√†i ch√≠nh c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- G·ªçi hotline ng√¢n h√†ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp
- Gh√© thƒÉm chi nh√°nh g·∫ßn nh·∫•t
- Truy c·∫≠p website ch√≠nh th·ª©c c·ªßa ng√¢n h√†ng
- Th·ª≠ h·ªèi l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c v·∫•n ƒë·ªÅ t√†i ch√≠nh kh√°c!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your financial consultation request.
For the best support, you can:
- Call the bank hotline for direct consultation
- Visit the nearest branch
- Access the bank's official website
- Try asking again with a more specific question

I'm ready to help you with other financial matters!
"""
