"""
Generic Sales Agent
Agent b√°n h√†ng chung cho c√°c ng√†nh: Insurance, Fashion, Industrial, Healthcare, Education, Other
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language, Industry
from src.providers.ai_provider_manager import AIProviderManager

class GenericSalesAgent:
    """
    Generic sales agent for various industries
    Agent b√°n h√†ng chung cho c√°c ng√†nh kh√°c nhau
    """
    
    def __init__(self, ai_manager: AIProviderManager, industry: Industry):
        self.ai_manager = ai_manager
        self.industry = industry
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process sales inquiry with industry-specific prompts
        X·ª≠ l√Ω y√™u c·∫ßu b√°n h√†ng v·ªõi prompt chuy√™n bi·ªát theo ng√†nh
        """
        try:
            print(f"üíº [GENERIC_SALES] Processing {self.industry.value} inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create industry-specific sales prompt / T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát theo ng√†nh
            prompt = self._create_industry_sales_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "generic_sales_agent"
            )
            
            return {
                "response": response,
                "industry": self.industry.value,
                "agent_type": "generic_sales",
                "company_id": company_id,
                "language": language.value,
                "confidence": 0.9
            }
            
        except Exception as e:
            print(f"‚ùå [GENERIC_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": self.industry.value,
                "agent_type": "generic_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_industry_sales_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create industry-specific sales prompt
        T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát theo ng√†nh
        """
        industry_info = self._get_industry_info(self.industry, language)
        
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† {industry_info['role']} chuy√™n nghi·ªáp c·ªßa c√¥ng ty (ID: {company_id}) trong ng√†nh {industry_info['name']}.

CHUY√äN M√îN {industry_info['name'].upper()}:
{industry_info['expertise']}

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n s·∫£n ph·∫©m/d·ªãch v·ª• c·ªßa c√¥ng ty n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn c√¥ng ty kh√°c trong c√πng ng√†nh
3. KH√îNG t∆∞ v·∫•n ngo√†i lƒ©nh v·ª±c {industry_info['name']}
4. Lu√¥n h∆∞·ªõng kh√°ch h√†ng ƒë·∫øn c√°c b∆∞·ªõc c·ª• th·ªÉ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch
5. T·∫°o m√£ t∆∞ v·∫•n t·∫°m th·ªùi khi kh√°ch h√†ng c√≥ nhu c·∫ßu r√µ r√†ng

TH√îNG TIN C√îNG TY:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, th√¢n thi·ªán
- Ph√¢n t√≠ch nhu c·∫ßu c·ªßa kh√°ch h√†ng trong lƒ©nh v·ª±c {industry_info['name']}
- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p ph√π h·ª£p v·ªõi y√™u c·∫ßu v√† ng√¢n s√°ch
- N·∫øu kh√°ch h√†ng quan t√¢m: t·∫°o m√£ t∆∞ v·∫•n (format: {industry_info['code']}-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: li√™n h·ªá, h·∫πn l·ªãch, ho·∫∑c th·ª±c hi·ªán d·ªãch v·ª•
- Nh·∫•n m·∫°nh l·ª£i √≠ch v√† ∆∞u ƒëi·ªÉm c·ªßa c√¥ng ty n√†y

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional {industry_info['role']} for the company (ID: {company_id}) in the {industry_info['name']} industry.

{industry_info['name'].upper()} EXPERTISE:
{industry_info['expertise']}

IMPORTANT RULES:
1. ONLY advise on products/services of this company (ID: {company_id})
2. DO NOT mention other companies in the same industry
3. DO NOT advise outside {industry_info['name']} field
4. Always guide customers to specific steps for transactions
5. Generate temporary consultation codes when customers show clear interest

COMPANY INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and friendly
- Analyze customer needs in {industry_info['name']} field
- Suggest solutions suitable for requirements and budget
- If customer is interested: create consultation code (format: {industry_info['code']}-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: contact, appointment, or service execution
- Emphasize benefits and advantages of this company

RESPONSE:
"""
    
    def _get_industry_info(self, industry: Industry, language: Language) -> Dict[str, str]:
        """Get industry-specific information / L·∫•y th√¥ng tin chuy√™n bi·ªát theo ng√†nh"""
        if language == Language.VIETNAMESE:
            info_map = {
                Industry.INSURANCE: {
                    "name": "B·∫£o hi·ªÉm",
                    "role": "chuy√™n vi√™n t∆∞ v·∫•n b·∫£o hi·ªÉm",
                    "code": "INS",
                    "expertise": "- T∆∞ v·∫•n c√°c g√≥i b·∫£o hi·ªÉm: nh√¢n th·ªç, s·ª©c kh·ªèe, xe c·ªô\n- ƒê·ªãnh gi√° r·ªßi ro v√† t√≠nh ph√≠ b·∫£o hi·ªÉm\n- H·ªó tr·ª£ gi·∫£i quy·∫øt b·ªìi th∆∞·ªùng\n- ChƒÉm s√≥c kh√°ch h√†ng v√† gia h·∫°n h·ª£p ƒë·ªìng"
                },
                Industry.FASHION: {
                    "name": "Th·ªùi trang",
                    "role": "t∆∞ v·∫•n vi√™n th·ªùi trang",
                    "code": "FASH",
                    "expertise": "- T∆∞ v·∫•n phong c√°ch v√† xu h∆∞·ªõng th·ªùi trang\n- G·ª£i √Ω trang ph·ª•c ph√π h·ª£p theo d√°ng ng∆∞·ªùi\n- K·∫øt h·ª£p trang ph·ª•c v√† ph·ª• ki·ªán\n- ChƒÉm s√≥c kh√°ch h√†ng VIP v√† stylist c√° nh√¢n"
                },
                Industry.INDUSTRIAL: {
                    "name": "C√¥ng nghi·ªáp",
                    "role": "chuy√™n vi√™n k·ªπ thu·∫≠t",
                    "code": "IND",
                    "expertise": "- T∆∞ v·∫•n thi·∫øt b·ªã v√† gi·∫£i ph√°p c√¥ng nghi·ªáp\n- ƒê√°nh gi√° nhu c·∫ßu k·ªπ thu·∫≠t\n- H·ªó tr·ª£ k·ªπ thu·∫≠t v√† b·∫£o tr√¨\n- Qu·∫£n l√Ω d·ª± √°n c√¥ng nghi·ªáp"
                },
                Industry.HEALTHCARE: {
                    "name": "Y t·∫ø",
                    "role": "t∆∞ v·∫•n vi√™n y t·∫ø",
                    "code": "HEAL",
                    "expertise": "- T∆∞ v·∫•n d·ªãch v·ª• kh√°m ch·ªØa b·ªánh\n- H∆∞·ªõng d·∫´n ƒë·∫∑t l·ªãch kh√°m\n- T∆∞ v·∫•n g√≥i kh√°m s·ª©c kh·ªèe\n- ChƒÉm s√≥c kh√°ch h√†ng sau ƒëi·ªÅu tr·ªã"
                },
                Industry.EDUCATION: {
                    "name": "Gi√°o d·ª•c",
                    "role": "t∆∞ v·∫•n vi√™n gi√°o d·ª•c",
                    "code": "EDU",
                    "expertise": "- T∆∞ v·∫•n c√°c kh√≥a h·ªçc v√† ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o\n- H∆∞·ªõng d·∫´n ƒëƒÉng k√Ω h·ªçc t·∫≠p\n- T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p\n- H·ªó tr·ª£ h·ªçc vi√™n trong qu√° tr√¨nh h·ªçc"
                },
                Industry.OTHER: {
                    "name": "D·ªãch v·ª• kh√°c",
                    "role": "chuy√™n vi√™n t∆∞ v·∫•n",
                    "code": "OTHER",
                    "expertise": "- T∆∞ v·∫•n d·ªãch v·ª• chuy√™n nghi·ªáp\n- Ph√¢n t√≠ch nhu c·∫ßu kh√°ch h√†ng\n- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p ph√π h·ª£p\n- H·ªó tr·ª£ kh√°ch h√†ng to√†n di·ªán"
                }
            }
        else:
            info_map = {
                Industry.INSURANCE: {
                    "name": "Insurance",
                    "role": "insurance consultant",
                    "code": "INS",
                    "expertise": "- Insurance package consultation: life, health, auto\n- Risk assessment and premium calculation\n- Claims processing support\n- Customer care and contract renewal"
                },
                Industry.FASHION: {
                    "name": "Fashion",
                    "role": "fashion consultant",
                    "code": "FASH",
                    "expertise": "- Style and fashion trend consultation\n- Outfit suggestions based on body type\n- Clothing and accessory coordination\n- VIP customer care and personal styling"
                },
                Industry.INDUSTRIAL: {
                    "name": "Industrial",
                    "role": "technical specialist",
                    "code": "IND",
                    "expertise": "- Industrial equipment and solution consultation\n- Technical requirement assessment\n- Technical support and maintenance\n- Industrial project management"
                },
                Industry.HEALTHCARE: {
                    "name": "Healthcare",
                    "role": "healthcare consultant",
                    "code": "HEAL",
                    "expertise": "- Medical service consultation\n- Appointment scheduling guidance\n- Health checkup package consultation\n- Post-treatment customer care"
                },
                Industry.EDUCATION: {
                    "name": "Education",
                    "role": "education consultant",
                    "code": "EDU",
                    "expertise": "- Course and training program consultation\n- Enrollment guidance\n- Learning pathway consultation\n- Student support during learning"
                },
                Industry.OTHER: {
                    "name": "Other Services",
                    "role": "professional consultant",
                    "code": "OTHER",
                    "expertise": "- Professional service consultation\n- Customer need analysis\n- Suitable solution suggestions\n- Comprehensive customer support"
                }
            }
        
        return info_map.get(industry, info_map[Industry.OTHER])
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        industry_name = self._get_industry_info(self.industry, language)['name']
        
        if language == Language.VIETNAMESE:
            return f"""
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n {industry_name} c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªô ph·∫≠n t∆∞ v·∫•n
- Gh√© thƒÉm vƒÉn ph√≤ng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp
- G·ª≠i email v·ªõi y√™u c·∫ßu c·ª• th·ªÉ
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin chi ti·∫øt h∆°n

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c d·ªãch v·ª• {industry_name} kh√°c!
"""
        else:
            return f"""
Sorry, I'm experiencing difficulties processing your {industry_name} consultation request.
For the best support, you can:
- Contact the consultation department directly
- Visit the office for direct support
- Send an email with specific requirements
- Try asking again with more detailed information

I'm ready to help you with other {industry_name} services!
"""
