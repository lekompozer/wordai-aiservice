"""
Retail Sales Agent
Agent b√°n h√†ng cho ng√†nh b√°n l·∫ª v·ªõi prompt v√† flow ri√™ng bi·ªát
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language, Industry
from src.providers.ai_provider_manager import AIProviderManager

class RetailSalesAgent:
    """
    Sales agent specialized for retail industry
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh b√°n l·∫ª
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
        self.industry = Industry.RETAIL
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process retail sales inquiry with specialized prompts
        X·ª≠ l√Ω y√™u c·∫ßu b√°n h√†ng b√°n l·∫ª v·ªõi prompt chuy√™n bi·ªát
        """
        try:
            print(f"üõçÔ∏è [RETAIL_SALES] Processing inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create retail-specific sales prompt / T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho b√°n l·∫ª
            prompt = self._create_retail_sales_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "retail_sales_agent"
            )
            
            return {
                "response": response,
                "industry": self.industry.value,
                "agent_type": "retail_sales",
                "company_id": company_id,
                "language": language.value,
                "confidence": 0.9
            }
            
        except Exception as e:
            print(f"‚ùå [RETAIL_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": self.industry.value,
                "agent_type": "retail_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_retail_sales_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized retail sales prompt
        T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho b√°n l·∫ª
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n b√°n h√†ng chuy√™n nghi·ªáp c·ªßa c·ª≠a h√†ng (ID: {company_id}).

CHUY√äN M√îN B√ÅN L·∫∫:
- T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu kh√°ch h√†ng
- Ki·ªÉm tra t·ªìn kho v√† th√¥ng tin s·∫£n ph·∫©m
- Gi·ªõi thi·ªáu khuy·∫øn m√£i v√† ∆∞u ƒë√£i
- H∆∞·ªõng d·∫´n thanh to√°n v√† giao h√†ng
- ChƒÉm s√≥c kh√°ch h√†ng sau b√°n h√†ng

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà b√°n s·∫£n ph·∫©m/d·ªãch v·ª• c·ªßa c·ª≠a h√†ng n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn c·ª≠a h√†ng/th∆∞∆°ng hi·ªáu kh√°c
3. KH√îNG t∆∞ v·∫•n ngo√†i lƒ©nh v·ª±c b√°n l·∫ª
4. Lu√¥n h∆∞·ªõng kh√°ch h√†ng ƒë·∫øn vi·ªác mua h√†ng c·ª• th·ªÉ
5. T·∫°o m√£ ƒë∆°n h√†ng t·∫°m th·ªùi khi kh√°ch h√†ng mu·ªën mua

TH√îNG TIN C·ª¨A H√ÄNG:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, nhi·ªát t√¨nh
- T√¨m hi·ªÉu nhu c·∫ßu c·ª• th·ªÉ c·ªßa kh√°ch h√†ng
- ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p v·ªõi ng√¢n s√°ch
- N·∫øu kh√°ch mu·ªën mua: t·∫°o m√£ ƒë∆°n h√†ng (format: SHOP-{company_id[:4]}-YYYYMMDD-XXXX)
- Th√¥ng tin v·ªÅ gi√° c·∫£, khuy·∫øn m√£i, ch√≠nh s√°ch ƒë·ªïi tr·∫£
- H∆∞·ªõng d·∫´n c√°ch th·ª©c mua h√†ng: online, t·∫°i c·ª≠a h√†ng, giao h√†ng
- T∆∞ v·∫•n k√≠ch th∆∞·ªõc, m√†u s·∫Øc, phi√™n b·∫£n ph√π h·ª£p

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional sales consultant for the store (ID: {company_id}).

RETAIL EXPERTISE:
- Product consultation suitable for customer needs
- Inventory check and product information
- Promotion and discount introduction
- Payment and delivery guidance
- After-sales customer care

IMPORTANT RULES:
1. ONLY sell products/services of this store (ID: {company_id})
2. DO NOT mention other stores/brands
3. DO NOT advise outside retail field
4. Always guide customers toward specific purchases
5. Generate temporary order codes when customers want to buy

STORE INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and enthusiastically
- Understand customer's specific needs
- Suggest products suitable for budget
- If customer wants to buy: create order code (format: SHOP-{company_id[:4]}-YYYYMMDD-XXXX)
- Provide pricing, promotions, return policy information
- Guide purchase methods: online, in-store, delivery
- Advise on sizes, colors, suitable versions

RESPONSE:
"""
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu mua h√†ng c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Gh√© thƒÉm c·ª≠a h√†ng ƒë·ªÉ xem s·∫£n ph·∫©m tr·ª±c ti·∫øp
- G·ªçi hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt
- Xem catalog s·∫£n ph·∫©m online
- Th·ª≠ h·ªèi l·∫°i v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c s·∫£n ph·∫©m kh√°c!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your purchase request.
For the best support, you can:
- Visit the store to see products directly
- Call the hotline for detailed consultation
- Check the online product catalog
- Try asking again about specific products

I'm ready to help you with other products!
"""
