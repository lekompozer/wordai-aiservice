"""
Industrial Sales Agent
Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh C√¥ng nghi·ªáp
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language
from src.providers.ai_provider_manager import AIProviderManager

class IndustrialSalesAgent:
    """
    Specialized industrial sales agent
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh c√¥ng nghi·ªáp
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process industrial equipment consultation inquiry
        X·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n thi·∫øt b·ªã c√¥ng nghi·ªáp
        """
        try:
            print(f"üè≠ [INDUSTRIAL_SALES] Processing industrial inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create specialized industrial prompt / T·∫°o prompt chuy√™n bi·ªát c√¥ng nghi·ªáp
            prompt = self._create_industrial_consultation_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "industrial_sales_agent"
            )
            
            # Generate project code if customer shows interest / T·∫°o m√£ d·ª± √°n n·∫øu kh√°ch quan t√¢m
            project_code = None
            if self._detect_purchase_intent(message, language):
                project_code = self._generate_project_code(company_id)
            
            return {
                "response": response,
                "industry": "industrial",
                "agent_type": "industrial_sales",
                "company_id": company_id,
                "language": language.value,
                "project_code": project_code,
                "confidence": 0.95
            }
            
        except Exception as e:
            print(f"‚ùå [INDUSTRIAL_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": "industrial",
                "agent_type": "industrial_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_industrial_consultation_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized industrial consultation prompt
        T·∫°o prompt t∆∞ v·∫•n c√¥ng nghi·ªáp chuy√™n bi·ªát
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† chuy√™n vi√™n k·ªπ thu·∫≠t v√† t∆∞ v·∫•n gi·∫£i ph√°p c√¥ng nghi·ªáp c·ªßa c√¥ng ty (ID: {company_id}).

CHUY√äN M√îN C√îNG NGHI·ªÜP:
- T∆∞ v·∫•n thi·∫øt b·ªã v√† m√°y m√≥c c√¥ng nghi·ªáp: s·∫£n xu·∫•t, ch·∫ø bi·∫øn, ƒë√≥ng g√≥i
- Thi·∫øt k·∫ø h·ªá th·ªëng t·ª± ƒë·ªông h√≥a v√† d√¢y chuy·ªÅn s·∫£n xu·∫•t
- ƒê√°nh gi√° nhu c·∫ßu k·ªπ thu·∫≠t v√† t·ªëi ∆∞u h√≥a quy tr√¨nh
- H·ªó tr·ª£ k·ªπ thu·∫≠t, b·∫£o tr√¨ v√† ƒë√†o t·∫°o v·∫≠n h√†nh
- Qu·∫£n l√Ω d·ª± √°n l·∫Øp ƒë·∫∑t v√† ch·∫°y th·ª≠ thi·∫øt b·ªã
- T∆∞ v·∫•n gi·∫£i ph√°p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng v√† an to√†n lao ƒë·ªông

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n thi·∫øt b·ªã v√† gi·∫£i ph√°p c·ªßa c√¥ng ty n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn nh√† cung c·∫•p thi·∫øt b·ªã c√¥ng nghi·ªáp kh√°c
3. Lu√¥n ph√¢n t√≠ch nhu c·∫ßu k·ªπ thu·∫≠t v√† quy m√¥ s·∫£n xu·∫•t
4. ƒê∆∞a ra gi·∫£i ph√°p t·ªëi ∆∞u v·ªÅ chi ph√≠ v√† hi·ªáu qu·∫£
5. T·∫°o m√£ d·ª± √°n khi kh√°ch h√†ng c√≥ nhu c·∫ßu c·ª• th·ªÉ

TH√îNG TIN C√îNG TY:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, k·ªπ thu·∫≠t
- Ph√¢n t√≠ch nhu c·∫ßu k·ªπ thu·∫≠t v√† quy m√¥ s·∫£n xu·∫•t c·ªßa kh√°ch h√†ng
- ƒê·ªÅ xu·∫•t thi·∫øt b·ªã v√† gi·∫£i ph√°p ph√π h·ª£p v·ªõi ng√¢n s√°ch
- Gi·∫£i th√≠ch ƒë·∫∑c t√≠nh k·ªπ thu·∫≠t, c√¥ng su·∫•t v√† hi·ªáu qu·∫£
- N·∫øu kh√°ch quan t√¢m: t·∫°o m√£ d·ª± √°n (format: IND-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: kh·∫£o s√°t th·ª±c ƒë·ªãa, b√°o gi√° chi ti·∫øt
- Nh·∫•n m·∫°nh ch·∫•t l∆∞·ª£ng thi·∫øt b·ªã v√† d·ªãch v·ª• h·∫≠u m√£i

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a technical specialist and industrial solution consultant for the company (ID: {company_id}).

INDUSTRIAL EXPERTISE:
- Industrial equipment and machinery consultation: production, processing, packaging
- Automation system and production line design
- Technical requirement assessment and process optimization
- Technical support, maintenance, and operation training
- Project management for installation and equipment commissioning
- Energy-saving solutions and workplace safety consultation

IMPORTANT RULES:
1. ONLY advise on equipment and solutions of this company (ID: {company_id})
2. DO NOT mention other industrial equipment suppliers
3. Always analyze technical needs and production scale
4. Provide optimal solutions for cost and efficiency
5. Generate project code when customers have specific needs

COMPANY INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and technically
- Analyze customer's technical needs and production scale
- Suggest suitable equipment and solutions within budget
- Explain technical specifications, capacity, and efficiency
- If customer interested: create project code (format: IND-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: site survey, detailed quotation
- Emphasize equipment quality and after-sales service

RESPONSE:
"""
    
    def _detect_purchase_intent(self, message: str, language: Language) -> bool:
        """Detect if customer shows purchase intent / Ph√°t hi·ªán √Ω ƒë·ªãnh mua c·ªßa kh√°ch h√†ng"""
        if language == Language.VIETNAMESE:
            intent_keywords = [
                "c·∫ßn thi·∫øt b·ªã", "mua m√°y", "l·∫Øp ƒë·∫∑t", "d·ª± √°n", "nh√† m√°y",
                "s·∫£n xu·∫•t", "ch·∫ø bi·∫øn", "t·ª± ƒë·ªông h√≥a", "d√¢y chuy·ªÅn",
                "gi√°", "b√°o gi√°", "chi ph√≠", "ƒë·∫ßu t∆∞", "c√¥ng su·∫•t"
            ]
        else:
            intent_keywords = [
                "need equipment", "buy machine", "installation", "project",
                "factory", "production", "processing", "automation",
                "production line", "price", "quote", "cost", "investment", "capacity"
            ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in intent_keywords)
    
    def _generate_project_code(self, company_id: str) -> str:
        """Generate industrial project code / T·∫°o m√£ d·ª± √°n c√¥ng nghi·ªáp"""
        timestamp = datetime.now().strftime("%Y%m%d")
        import random
        random_num = random.randint(1000, 9999)
        return f"IND-{company_id[:4].upper()}-{timestamp}-{random_num}"
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n thi·∫øt b·ªã c√¥ng nghi·ªáp c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªô ph·∫≠n k·ªπ thu·∫≠t
- G·ª≠i th√¥ng tin chi ti·∫øt v·ªÅ nhu c·∫ßu s·∫£n xu·∫•t
- Y√™u c·∫ßu chuy√™n vi√™n ƒë·∫øn kh·∫£o s√°t th·ª±c ƒë·ªãa
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin c·ª• th·ªÉ h∆°n v·ªÅ lo·∫°i thi·∫øt b·ªã

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n t√¨m ki·∫øm gi·∫£i ph√°p c√¥ng nghi·ªáp ph√π h·ª£p!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your industrial equipment consultation request.
For the best support, you can:
- Contact the technical department directly
- Send detailed information about your production needs
- Request a specialist for on-site survey
- Try asking again with more specific equipment type information

I'm ready to help you find suitable industrial solutions!
"""
