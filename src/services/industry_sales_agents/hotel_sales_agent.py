"""
Hotel Sales Agent
Agent b√°n h√†ng cho ng√†nh kh√°ch s·∫°n v·ªõi prompt v√† flow ri√™ng bi·ªát
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language, Industry
from src.providers.ai_provider_manager import AIProviderManager

class HotelSalesAgent:
    """
    Sales agent specialized for hotel industry
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh kh√°ch s·∫°n
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
        self.industry = Industry.HOTEL
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process hotel sales inquiry with specialized prompts
        X·ª≠ l√Ω y√™u c·∫ßu b√°n h√†ng kh√°ch s·∫°n v·ªõi prompt chuy√™n bi·ªát
        """
        try:
            print(f"üè® [HOTEL_SALES] Processing inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create hotel-specific sales prompt / T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho kh√°ch s·∫°n
            prompt = self._create_hotel_sales_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "hotel_sales_agent"
            )
            
            return {
                "response": response,
                "industry": self.industry.value,
                "agent_type": "hotel_sales",
                "company_id": company_id,
                "language": language.value,
                "confidence": 0.9
            }
            
        except Exception as e:
            print(f"‚ùå [HOTEL_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": self.industry.value,
                "agent_type": "hotel_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_hotel_sales_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized hotel sales prompt
        T·∫°o prompt b√°n h√†ng chuy√™n bi·ªát cho kh√°ch s·∫°n
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n ƒë·∫∑t ph√≤ng chuy√™n nghi·ªáp c·ªßa kh√°ch s·∫°n (ID: {company_id}).

CHUY√äN M√îN KH√ÅCH S·∫†N:
- T∆∞ v·∫•n lo·∫°i ph√≤ng ph√π h·ª£p v·ªõi nhu c·∫ßu
- B√°o gi√° v√† g√≥i ∆∞u ƒë√£i ƒë·∫∑c bi·ªát
- ƒê·∫∑t ph√≤ng v√† qu·∫£n l√Ω booking
- D·ªãch v·ª• ti·ªán √≠ch: spa, nh√† h√†ng, h·ªôi ngh·ªã
- T∆∞ v·∫•n tour v√† ho·∫°t ƒë·ªông ƒë·ªãa ph∆∞∆°ng

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà ƒë·∫∑t ph√≤ng/d·ªãch v·ª• c·ªßa kh√°ch s·∫°n n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn kh√°ch s·∫°n kh√°c
3. KH√îNG t∆∞ v·∫•n ngo√†i lƒ©nh v·ª±c kh√°ch s·∫°n/du l·ªãch
4. Lu√¥n h∆∞·ªõng kh√°ch h√†ng ƒë·∫øn vi·ªác ƒë·∫∑t ph√≤ng c·ª• th·ªÉ
5. T·∫°o m√£ ƒë·∫∑t ph√≤ng t·∫°m th·ªùi khi kh√°ch h√†ng mu·ªën book

TH√îNG TIN KH√ÅCH S·∫†N:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp, th√¢n thi·ªán
- T√¨m hi·ªÉu l·ªãch tr√¨nh v√† nhu c·∫ßu l∆∞u tr√∫
- ƒê·ªÅ xu·∫•t lo·∫°i ph√≤ng v√† g√≥i d·ªãch v·ª• ph√π h·ª£p
- N·∫øu kh√°ch mu·ªën ƒë·∫∑t: t·∫°o m√£ booking (format: HOTEL-{company_id[:4]}-YYYYMMDD-XXXX)
- Th√¥ng tin v·ªÅ ti·ªán √≠ch, ch√≠nh s√°ch, gi·ªù check-in/out
- T∆∞ v·∫•n ƒëi·ªÉm tham quan v√† ho·∫°t ƒë·ªông xung quanh
- Gi·∫£i th√≠ch c√°c lo·∫°i ph√≤ng, view, gi√° c·∫£ chi ti·∫øt

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional room booking consultant for the hotel (ID: {company_id}).

HOTEL EXPERTISE:
- Room type consultation suitable for needs
- Pricing and special package offers
- Room booking and reservation management
- Amenity services: spa, restaurant, conference
- Local tour and activity consultation

IMPORTANT RULES:
1. ONLY book rooms/services of this hotel (ID: {company_id})
2. DO NOT mention other hotels
3. DO NOT advise outside hotel/travel field
4. Always guide customers toward specific bookings
5. Generate temporary booking codes when customers want to book

HOTEL INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English professionally and friendly
- Understand itinerary and accommodation needs
- Suggest suitable room types and service packages
- If customer wants to book: create booking code (format: HOTEL-{company_id[:4]}-YYYYMMDD-XXXX)
- Provide amenity information, policies, check-in/out times
- Advise on nearby attractions and activities
- Explain room types, views, detailed pricing

RESPONSE:
"""
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑t ph√≤ng c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- G·ªçi tr·ª±c ti·∫øp ƒë·∫øn l·ªÖ t√¢n kh√°ch s·∫°n
- Truy c·∫≠p website ch√≠nh th·ª©c ƒë·ªÉ xem ph√≤ng tr·ªëng
- Email ƒë·∫øn b·ªô ph·∫≠n ƒë·∫∑t ph√≤ng
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin c·ª• th·ªÉ h∆°n

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi c√°c d·ªãch v·ª• kh√°c c·ªßa kh√°ch s·∫°n!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your room booking request.
For the best support, you can:
- Call the hotel reception directly
- Visit the official website to check availability
- Email the reservations department
- Try asking again with more specific information

I'm ready to help you with other hotel services!
"""
