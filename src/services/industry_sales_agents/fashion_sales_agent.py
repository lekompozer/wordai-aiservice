"""
Fashion Sales Agent
Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh Th·ªùi trang
"""

import json
from typing import Dict, Any, Optional, List
from datetime import datetime

from src.models.unified_models import Language
from src.providers.ai_provider_manager import AIProviderManager

class FashionSalesAgent:
    """
    Specialized fashion sales agent
    Agent b√°n h√†ng chuy√™n bi·ªát cho ng√†nh th·ªùi trang
    """
    
    def __init__(self, ai_manager: AIProviderManager):
        self.ai_manager = ai_manager
    
    async def process_sales_inquiry(
        self,
        message: str,
        company_id: str,
        session_id: str,
        language: Language,
        company_context: str,
        chat_history: List[Dict[str, Any]] = None,
        user_id: str = None
    ) -> Dict[str, Any]:
        """
        Process fashion consultation inquiry
        X·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n th·ªùi trang
        """
        try:
            print(f"üëó [FASHION_SALES] Processing fashion inquiry for company {company_id}")
            print(f"   Message: {message[:100]}...")
            
            # Create specialized fashion prompt / T·∫°o prompt chuy√™n bi·ªát th·ªùi trang
            prompt = self._create_fashion_consultation_prompt(
                message=message,
                company_context=company_context,
                language=language,
                company_id=company_id,
                chat_history=chat_history or []
            )
            
            # Get AI response / L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "fashion_sales_agent"
            )
            
            # Generate styling code if customer shows interest / T·∫°o m√£ styling n·∫øu kh√°ch quan t√¢m
            styling_code = None
            if self._detect_purchase_intent(message, language):
                styling_code = self._generate_styling_code(company_id)
            
            return {
                "response": response,
                "industry": "fashion",
                "agent_type": "fashion_sales",
                "company_id": company_id,
                "language": language.value,
                "styling_code": styling_code,
                "confidence": 0.95
            }
            
        except Exception as e:
            print(f"‚ùå [FASHION_SALES] Error: {e}")
            return {
                "response": self._get_fallback_response(language),
                "industry": "fashion",
                "agent_type": "fashion_sales",
                "error": str(e),
                "confidence": 0.3
            }
    
    def _create_fashion_consultation_prompt(
        self,
        message: str,
        company_context: str,
        language: Language,
        company_id: str,
        chat_history: List[Dict[str, Any]]
    ) -> str:
        """
        Create specialized fashion consultation prompt
        T·∫°o prompt t∆∞ v·∫•n th·ªùi trang chuy√™n bi·ªát
        """
        if language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† stylist v√† t∆∞ v·∫•n vi√™n th·ªùi trang chuy√™n nghi·ªáp c·ªßa c√¥ng ty (ID: {company_id}).

CHUY√äN M√îN TH·ªúI TRANG:
- T∆∞ v·∫•n phong c√°ch c√° nh√¢n v√† xu h∆∞·ªõng th·ªùi trang m·ªõi nh·∫•t
- Ph·ªëi ƒë·ªì ph√π h·ª£p v·ªõi d√°ng ng∆∞·ªùi, t√≠nh c√°ch v√† ho√†n c·∫£nh
- T∆∞ v·∫•n trang ph·ª•c theo s·ª± ki·ªán: c√¥ng s·ªü, d·∫° ti·ªác, casual, th·ªÉ thao
- K·∫øt h·ª£p trang ph·ª•c v√† ph·ª• ki·ªán m·ªôt c√°ch tinh t·∫ø
- ChƒÉm s√≥c kh√°ch h√†ng VIP v√† d·ªãch v·ª• stylist c√° nh√¢n
- T∆∞ v·∫•n m√†u s·∫Øc v√† ch·∫•t li·ªáu ph√π h·ª£p v·ªõi t·ª´ng m√πa

QUY T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà t∆∞ v·∫•n v√† b√°n s·∫£n ph·∫©m th·ªùi trang c·ªßa c√¥ng ty n√†y (ID: {company_id})
2. KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn th∆∞∆°ng hi·ªáu th·ªùi trang kh√°c
3. Lu√¥n ph√¢n t√≠ch phong c√°ch v√† nhu c·∫ßu c√° nh√¢n c·ªßa kh√°ch h√†ng
4. ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v·ªÅ trang ph·ª•c v√† c√°ch ph·ªëi ƒë·ªì
5. T·∫°o m√£ styling khi kh√°ch h√†ng quan t√¢m ƒë·∫øn d·ªãch v·ª• t∆∞ v·∫•n

TH√îNG TIN C√îNG TY:
{company_context}

L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:
{self._format_chat_history(chat_history, language)}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {message}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát th√¢n thi·ªán, chuy√™n nghi·ªáp
- Ph√¢n t√≠ch phong c√°ch v√† nhu c·∫ßu th·ªùi trang c·ªßa kh√°ch h√†ng
- G·ª£i √Ω trang ph·ª•c c·ª• th·ªÉ ph√π h·ª£p v·ªõi d√°ng ng∆∞·ªùi v√† s·ª± ki·ªán
- T∆∞ v·∫•n c√°ch ph·ªëi m√†u, ch·∫•t li·ªáu v√† ph·ª• ki·ªán
- N·∫øu kh√°ch quan t√¢m: t·∫°o m√£ styling (format: FASH-{company_id[:4]}-YYYYMMDD-XXXX)
- H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo: th·ª≠ ƒë·ªì, t∆∞ v·∫•n tr·ª±c ti·∫øp ho·∫∑c ƒë·∫∑t h√†ng
- Nh·∫•n m·∫°nh phong c√°ch ƒë·ªôc ƒë√°o v√† s·ª± t·ª± tin c·ªßa kh√°ch h√†ng

PH·∫¢N H·ªíI:
"""
        else:
            return f"""
You are a professional stylist and fashion consultant for the company (ID: {company_id}).

FASHION EXPERTISE:
- Personal style consultation and latest fashion trends
- Outfit coordination suitable for body type, personality, and occasion
- Clothing advice for various events: office, evening, casual, sports
- Elegant combination of clothing and accessories
- VIP customer care and personal stylist services
- Color and fabric consultation suitable for each season

IMPORTANT RULES:
1. ONLY advise and sell fashion products of this company (ID: {company_id})
2. DO NOT mention other fashion brands
3. Always analyze customer's personal style and needs
4. Provide specific outfit suggestions and styling tips
5. Generate styling code when customers show interest in consultation services

COMPANY INFORMATION:
{company_context}

RECENT CHAT HISTORY:
{self._format_chat_history(chat_history, language)}

CUSTOMER QUESTION: {message}

Response guidelines:
- Respond in English friendly and professionally
- Analyze customer's fashion style and needs
- Suggest specific outfits suitable for body type and occasions
- Advise on color coordination, fabrics, and accessories
- If customer interested: create styling code (format: FASH-{company_id[:4]}-YYYYMMDD-XXXX)
- Guide next steps: try-on, direct consultation, or ordering
- Emphasize unique style and customer confidence

RESPONSE:
"""
    
    def _detect_purchase_intent(self, message: str, language: Language) -> bool:
        """Detect if customer shows purchase intent / Ph√°t hi·ªán √Ω ƒë·ªãnh mua c·ªßa kh√°ch h√†ng"""
        if language == Language.VIETNAMESE:
            intent_keywords = [
                "mu·ªën mua", "t∆∞ v·∫•n", "th·ª≠ ƒë·ªì", "c√≥ kh√¥ng", "gi√°", "size",
                "ph·ªëi ƒë·ªì", "stylist", "trang ph·ª•c", "v√°y", "√°o", "qu·∫ßn",
                "ph·ª• ki·ªán", "t√∫i x√°ch", "gi√†y", "ƒë·ªì", "m·∫∑c g√¨"
            ]
        else:
            intent_keywords = [
                "want to buy", "need", "looking for", "price", "size",
                "outfit", "dress", "shirt", "pants", "accessories",
                "bag", "shoes", "styling", "fashion", "wear", "clothing"
            ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in intent_keywords)
    
    def _generate_styling_code(self, company_id: str) -> str:
        """Generate fashion styling code / T·∫°o m√£ styling th·ªùi trang"""
        timestamp = datetime.now().strftime("%Y%m%d")
        import random
        random_num = random.randint(1000, 9999)
        return f"FASH-{company_id[:4].upper()}-{timestamp}-{random_num}"
    
    def _format_chat_history(self, chat_history: List[Dict[str, Any]], language: Language) -> str:
        """Format chat history for prompt / ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ chat cho prompt"""
        if not chat_history:
            return "Kh√¥ng c√≥ l·ªãch s·ª≠ chat" if language == Language.VIETNAMESE else "No chat history"
        
        formatted = []
        for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
            role = msg.get('role', 'user')
            content = msg.get('content', '')[:100]
            formatted.append(f"{i}. {role}: {content}")
        
        return "\n".join(formatted)
    
    def _get_fallback_response(self, language: Language) -> str:
        """Get fallback response for errors / L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi l·ªói"""
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë trong vi·ªác x·ª≠ l√Ω y√™u c·∫ßu t∆∞ v·∫•n th·ªùi trang c·ªßa b·∫°n.
ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi stylist c·ªßa ch√∫ng t√¥i
- Gh√© thƒÉm showroom ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† th·ª≠ ƒë·ªì tr·ª±c ti·∫øp
- G·ª≠i ·∫£nh v√† th√¥ng tin v·ªÅ s·ªü th√≠ch phong c√°ch
- Th·ª≠ h·ªèi l·∫°i v·ªõi th√¥ng tin c·ª• th·ªÉ h∆°n v·ªÅ lo·∫°i trang ph·ª•c

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n t√¨m ki·∫øm phong c√°ch ho√†n h·∫£o!
"""
        else:
            return """
Sorry, I'm experiencing difficulties processing your fashion consultation request.
For the best support, you can:
- Contact our stylist directly
- Visit our showroom for direct consultation and try-on
- Send photos and information about your style preferences
- Try asking again with more specific clothing type information

I'm ready to help you find the perfect style!
"""
