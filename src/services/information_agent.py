"""
Information Agent with RAG capabilities
Agent th√¥ng tin v·ªõi kh·∫£ nƒÉng RAG ƒë·ªÉ tr·∫£ l·ªùi v·ªÅ th√¥ng tin c√¥ng ty/s·∫£n ph·∫©m/d·ªãch v·ª•
"""

import json
import asyncio
from typing import Dict, Any, Optional, List, AsyncGenerator
from datetime import datetime

from src.models.unified_models import Language, Industry
from src.providers.ai_provider_manager import AIProviderManager
from src.services.qdrant_company_service import QdrantCompanyDataService


class InformationAgent:
    """
    Information agent for company-specific Q&A using RAG
    Agent th√¥ng tin cho h·ªèi ƒë√°p theo c√¥ng ty s·ª≠ d·ª•ng RAG
    """

    def __init__(self):
        # Initialize AI provider / Kh·ªüi t·∫°o AI provider
        from src.core.config import APP_CONFIG

        self.ai_manager = AIProviderManager(
            deepseek_api_key=APP_CONFIG.get("deepseek_api_key"),
            chatgpt_api_key=APP_CONFIG.get("chatgpt_api_key"),
        )

        # Initialize Qdrant service for RAG / Kh·ªüi t·∫°o Qdrant service cho RAG
        self.qdrant_service = QdrantCompanyDataService(
            qdrant_url=APP_CONFIG.get("qdrant_cloud_url"),
            qdrant_api_key=APP_CONFIG.get("qdrant_api_key"),
        )

    async def process_message(self, request) -> Dict[str, Any]:
        """
        Process information request with chat history context from UnifiedChatRequest
        X·ª≠ l√Ω y√™u c·∫ßu th√¥ng tin v·ªõi ng·ªØ c·∫£nh l·ªãch s·ª≠ chat t·ª´ UnifiedChatRequest
        """
        try:
            # Get chat history for context
            chat_history = await self._get_user_chat_history(
                user_id=request.user_info.user_id,
                session_id=request.session_id,
                limit=10,
            )

            # Call the existing process_query method
            return await self.process_query(
                query=request.message,
                company_id=request.company_id,
                session_id=request.session_id,
                language=request.language,
                industry=request.industry,
                user_id=request.user_info.user_id,
            )

        except Exception as e:
            print(f"‚ùå InformationAgent processing error: {e}")
            raise

    async def process_query(
        self,
        query: str,
        company_id: str,
        session_id: str,
        language: Language = Language.VIETNAMESE,
        industry: Industry = Industry.BANKING,
        user_id: str = None,
    ) -> Dict[str, Any]:
        """
        Process information query using RAG from Qdrant with company isolation and language translation
        X·ª≠ l√Ω truy v·∫•n th√¥ng tin s·ª≠ d·ª•ng RAG t·ª´ Qdrant v·ªõi c√°ch ly c√¥ng ty v√† d·ªãch ng√¥n ng·ªØ
        """
        try:
            print(
                f"üîç [INFO_AGENT] Processing query for company {company_id}, industry {industry.value}"
            )
            print(f"   Query: {query[:100]}...")
            print(f"   User language: {language.value}")

            # Step 1: Get user chat history / B∆∞·ªõc 1: L·∫•y l·ªãch s·ª≠ chat c·ªßa user
            chat_history = await self._get_user_chat_history(user_id, session_id)

            # Continue with existing logic...
            # ...existing code...

            # Step 2: Detect document languages in company collection / B∆∞·ªõc 2: Ph√°t hi·ªán ng√¥n ng·ªØ t√†i li·ªáu trong collection c√¥ng ty
            document_languages = await self._detect_company_document_languages(
                company_id, industry
            )
            print(f"   Document languages in collection: {document_languages}")

            # Step 3: Translate query if needed / B∆∞·ªõc 3: D·ªãch c√¢u h·ªèi n·∫øu c·∫ßn
            translated_queries = await self._translate_query_for_documents(
                query, language, document_languages
            )

            # Step 4: Search in Qdrant with all language variants / B∆∞·ªõc 4: T√¨m ki·∫øm trong Qdrant v·ªõi t·∫•t c·∫£ bi·∫øn th·ªÉ ng√¥n ng·ªØ
            all_rag_results = []
            for lang, translated_query in translated_queries.items():
                print(f"   Searching with {lang} query: {translated_query[:50]}...")

                rag_results = await self.qdrant_service.search_company_data(
                    company_id=company_id,
                    query=translated_query,
                    industry=industry,
                    language=(
                        Language(lang) if lang in ["vi", "en"] else Language.AUTO_DETECT
                    ),
                    limit=3,
                    score_threshold=0.6,
                )

                if rag_results:
                    # Add source language info / Th√™m th√¥ng tin ng√¥n ng·ªØ ngu·ªìn
                    for result in rag_results:
                        result["search_language"] = lang
                    all_rag_results.extend(rag_results)

            # Step 5: Remove duplicates and sort by score / B∆∞·ªõc 5: Lo·∫°i b·ªè tr√πng l·∫∑p v√† s·∫Øp x·∫øp theo ƒëi·ªÉm
            unique_results = self._deduplicate_results(all_rag_results)
            unique_results.sort(key=lambda x: x.get("score", 0), reverse=True)

            # Take top results / L·∫•y k·∫øt qu·∫£ top
            final_results = unique_results[:5]

            if final_results:
                # Use RAG results from Qdrant / S·ª≠ d·ª•ng k·∫øt qu·∫£ RAG t·ª´ Qdrant
                print(
                    f"‚úÖ [INFO_AGENT] Found {len(final_results)} relevant documents from Qdrant"
                )
                context = self._build_comprehensive_context(
                    final_results, chat_history, language
                )
                sources = [
                    {
                        "type": "qdrant_rag",
                        "source": f"company_{company_id}",
                        "chunks": len(final_results),
                    }
                ]
                confidence = 0.9
            else:
                # No company-specific data found - let DeepSeek handle with industry knowledge
                # Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ri√™ng c√¥ng ty - ƒë·ªÉ DeepSeek x·ª≠ l√Ω v·ªõi ki·∫øn th·ª©c ng√†nh
                print(
                    f"‚ö†Ô∏è [INFO_AGENT] No company-specific data found, will rely on AI industry knowledge"
                )
                context = self._build_industry_context_only(
                    chat_history, language, industry, company_id
                )
                sources = [
                    {
                        "type": "ai_industry_knowledge",
                        "source": f"industry_{industry.value}",
                    }
                ]
                confidence = 0.6

            # Step 6: Create multilingual prompt with company isolation / B∆∞·ªõc 6: T·∫°o prompt ƒëa ng√¥n ng·ªØ v·ªõi c√°ch ly c√¥ng ty
            prompt = self._create_multilingual_company_prompt(
                original_query=query,
                context=context,
                user_language=language,
                industry=industry,
                company_id=company_id,
                chat_history=chat_history,
            )

            # Step 7: Get AI response / B∆∞·ªõc 7: L·∫•y ph·∫£n h·ªìi AI
            response = await self.ai_manager.get_response(
                question=prompt,
                session_id=session_id,
                user_id=user_id or "information_agent",
            )

            return {
                "response": response,
                "sources": sources,
                "confidence": confidence,
                "language": language.value,
                "company_id": company_id,
                "industry": industry.value,
                "translated_queries": translated_queries,
                "document_languages": document_languages,
            }

        except Exception as e:
            print(f"‚ùå [INFO_AGENT] Error processing query: {e}")
            return {
                "response": self._get_fallback_response(language),
                "sources": [],
                "confidence": 0.3,
                "language": language.value,
                "error": str(e),
            }

    async def stream_response(
        self,
        query: str,
        company_id: str,
        session_id: str,
        language: Language = Language.VIETNAMESE,
        industry: Industry = Industry.BANKING,
    ) -> AsyncGenerator[str, None]:
        """
        Stream information response for real-time experience
        Stream ph·∫£n h·ªìi th√¥ng tin cho tr·∫£i nghi·ªám th·ªùi gian th·ª±c
        """
        try:
            # Process same as non-streaming but yield chunks / X·ª≠ l√Ω gi·ªëng nh∆∞ kh√¥ng streaming nh∆∞ng yield t·ª´ng chunk
            result = await self.process_query(
                query, company_id, session_id, language, industry
            )
            response = result.get("response", self._get_fallback_response(language))

            # Yield response in chunks / Yield ph·∫£n h·ªìi theo t·ª´ng chunk
            chunk_size = 50
            for i in range(0, len(response), chunk_size):
                yield response[i : i + chunk_size]
                await asyncio.sleep(0.1)  # Small delay for streaming effect

        except Exception as e:
            error_message = self._get_fallback_response(language)
            yield error_message

    def _get_system_message(self, language: Language) -> str:
        """
        Get system message for AI
        L·∫•y system message cho AI
        """
        if language == Language.VIETNAMESE:
            return """
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n nghi·ªáp c·ªßa c√¥ng ty. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
1. Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ th√¥ng tin c√¥ng ty, s·∫£n ph·∫©m, d·ªãch v·ª•
2. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
3. Cung c·∫•p th√¥ng tin ch√≠nh x√°c d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn
4. Th√¢n thi·ªán, l·ªãch s·ª± v√† chuy√™n nghi·ªáp
5. N·∫øu kh√¥ng bi·∫øt th√¥ng tin, h√£y th√†nh th·∫≠t n√≥i kh√¥ng bi·∫øt v√† g·ª£i √Ω c√°ch t√¨m hi·ªÉu th√™m
"""
        else:
            return """
You are a professional AI assistant for the company. Your role is to:
1. Answer questions about company information, products, and services
2. Always respond in English
3. Provide accurate information based on available data
4. Be friendly, polite, and professional
5. If you don't know something, honestly say so and suggest how to find more information
"""

    def _get_fallback_response(self, language: Language) -> str:
        """
        Get fallback response when error occurs
        L·∫•y ph·∫£n h·ªìi d·ª± ph√≤ng khi c√≥ l·ªói
        """
        if language == Language.VIETNAMESE:
            return """
Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t trong vi·ªác t√¨m ki·∫øm th√¥ng tin.
B·∫°n c√≥ th·ªÉ:
- Th·ª≠ h·ªèi l·∫°i v·ªõi c√¢u h·ªèi c·ª• th·ªÉ h∆°n
- Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£
- Gh√© thƒÉm website ch√≠nh th·ª©c c·ªßa ch√∫ng t√¥i

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªõi nh·ªØng th√¥ng tin kh√°c!
"""
        else:
            return """
Sorry, I'm experiencing technical difficulties finding that information.
You can:
- Try asking again with a more specific question
- Contact our support team directly
- Visit our official website

I'm ready to help you with other information!
"""

    async def search_company_documents(
        self, company_id: str, query: str, limit: int = 5
    ) -> List[Dict[str, Any]]:
        """
        Search company documents in Qdrant (to be implemented in Phase 4)
        T√¨m ki·∫øm t√†i li·ªáu c√¥ng ty trong Qdrant (s·∫Ω tri·ªÉn khai trong Phase 4)
        """
        # Placeholder for Phase 4 implementation / Placeholder cho tri·ªÉn khai Phase 4
        return [
            {
                "content": f"Sample document content related to: {query}",
                "metadata": {
                    "source": "company_document.pdf",
                    "company_id": company_id,
                    "type": "info",
                },
                "score": 0.85,
            }
        ]

    async def _get_user_chat_history(
        self, user_id: str, session_id: str, limit: int = 10
    ) -> List[Dict[str, Any]]:
        """
        Get user chat history for context from the UnifiedChatService
        L·∫•y l·ªãch s·ª≠ chat c·ªßa user ƒë·ªÉ l√†m ng·ªØ c·∫£nh t·ª´ UnifiedChatService
        """
        try:
            if not user_id and not session_id:
                return []

            # Import unified_chat_service here to avoid circular dependency
            from src.services.unified_chat_service import unified_chat_service

            # Use session_id as primary identifier for chat history
            identifier = session_id or user_id

            # Get conversation history from unified chat service
            history_objects = unified_chat_service._get_conversation_history(identifier)

            # Convert to simple dict list for context
            history_list = []
            for msg in history_objects:
                history_list.append(
                    {
                        "role": msg.role,
                        "content": msg.content,
                        "timestamp": (
                            msg.timestamp.isoformat()
                            if hasattr(msg, "timestamp")
                            else None
                        ),
                        "intent": (
                            msg.intent.value
                            if hasattr(msg, "intent") and msg.intent
                            else None
                        ),
                        "language": (
                            msg.language.value
                            if hasattr(msg, "language") and msg.language
                            else None
                        ),
                    }
                )

            # Return latest messages for context (limit by parameter)
            result = history_list[-limit:] if history_list else []

            if result:
                print(
                    f"üìú [INFO_AGENT] Retrieved {len(result)} chat history entries for context"
                )
            else:
                print(f"üìú [INFO_AGENT] No chat history found for user {user_id}")

            return result

        except Exception as e:
            print(f"‚ùå Error getting chat history for user {user_id}: {e}")
            return []

    async def _detect_company_document_languages(
        self, company_id: str, industry: Industry
    ) -> List[str]:
        """
        Detect what languages are available in company documents
        Ph√°t hi·ªán ng√¥n ng·ªØ c√≥ s·∫µn trong t√†i li·ªáu c√¥ng ty
        """
        try:
            # Query Qdrant to get unique languages in company collection
            # Truy v·∫•n Qdrant ƒë·ªÉ l·∫•y ng√¥n ng·ªØ duy nh·∫•t trong collection c√¥ng ty

            # For now, return common languages - in production would query Qdrant metadata
            # Hi·ªán t·∫°i tr·∫£ v·ªÅ ng√¥n ng·ªØ ph·ªï bi·∫øn - trong production s·∫Ω truy v·∫•n metadata Qdrant
            return ["vi", "en"]  # Vietnamese and English by default

        except Exception as e:
            print(f"‚ùå Error detecting document languages: {e}")
            return ["vi", "en"]

    async def _translate_query_for_documents(
        self, query: str, user_language: Language, document_languages: List[str]
    ) -> Dict[str, str]:
        """
        Translate user query to match document languages
        D·ªãch c√¢u h·ªèi c·ªßa user ƒë·ªÉ ph√π h·ª£p v·ªõi ng√¥n ng·ªØ t√†i li·ªáu
        """
        try:
            translated_queries = {}
            user_lang_code = user_language.value

            # Always include original query / Lu√¥n bao g·ªìm c√¢u h·ªèi g·ªëc
            translated_queries[user_lang_code] = query

            # Translate to other document languages if needed / D·ªãch sang ng√¥n ng·ªØ t√†i li·ªáu kh√°c n·∫øu c·∫ßn
            for doc_lang in document_languages:
                if doc_lang != user_lang_code:
                    print(
                        f"   Translating query from {user_lang_code} to {doc_lang}..."
                    )
                    translated_query = await self._translate_text(
                        query, user_lang_code, doc_lang
                    )
                    if translated_query and translated_query != query:
                        translated_queries[doc_lang] = translated_query

            return translated_queries

        except Exception as e:
            print(f"‚ùå Error translating query: {e}")
            return {user_language.value: query}

    async def _translate_text(self, text: str, from_lang: str, to_lang: str) -> str:
        """
        Translate text using DeepSeek
        D·ªãch vƒÉn b·∫£n s·ª≠ d·ª•ng DeepSeek
        """
        try:
            if from_lang == to_lang:
                return text

            # Language mapping / √Ånh x·∫° ng√¥n ng·ªØ
            lang_names = {
                "vi": "Vietnamese",
                "en": "English",
                "zh": "Chinese",
                "ja": "Japanese",
                "ko": "Korean",
                "th": "Thai",
                "id": "Indonesian",
            }

            from_name = lang_names.get(from_lang, from_lang)
            to_name = lang_names.get(to_lang, to_lang)

            prompt = f"""
Translate the following text from {from_name} to {to_name}.
Only return the translation, no explanations.

Text to translate: {text}

Translation:
"""

            translation = await self.ai_manager.get_response(
                question=prompt, session_id="translation", user_id="translator"
            )

            return translation.strip() if translation else text

        except Exception as e:
            print(f"‚ùå Translation error: {e}")
            return text

    def _deduplicate_results(
        self, results: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """
        Remove duplicate results based on content similarity
        Lo·∫°i b·ªè k·∫øt qu·∫£ tr√πng l·∫∑p d·ª±a tr√™n ƒë·ªô t∆∞∆°ng ƒë·ªìng n·ªôi dung
        """
        if not results:
            return []

        unique_results = []
        seen_content = set()

        for result in results:
            content = result.get("content", "").strip()
            content_hash = hash(content[:200])  # Use first 200 chars for deduplication

            if content_hash not in seen_content:
                seen_content.add(content_hash)
                unique_results.append(result)

        return unique_results

    def _build_industry_context_only(
        self,
        chat_history: List[Dict[str, Any]],
        language: Language,
        industry: Industry,
        company_id: str,
    ) -> str:
        """
        Build context for AI industry knowledge when no company data is available
        X√¢y d·ª±ng ng·ªØ c·∫£nh cho ki·∫øn th·ª©c ng√†nh c·ªßa AI khi kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng ty
        """
        context_parts = []

        # Add chat history context / Th√™m ng·ªØ c·∫£nh l·ªãch s·ª≠ chat
        if chat_history:
            if language == Language.VIETNAMESE:
                context_parts.append("L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:")
            else:
                context_parts.append("RECENT CHAT HISTORY:")

            for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
                role = msg.get("role", "user")
                content = msg.get(
                    "content", ""
                )  # Show full content instead of truncating
                context_parts.append(f"{i}. {role}: {content}")
            context_parts.append("")

        # Add instruction for AI to use industry knowledge / Th√™m h∆∞·ªõng d·∫´n cho AI s·ª≠ d·ª•ng ki·∫øn th·ª©c ng√†nh
        if language == Language.VIETNAMESE:
            context_parts.append(
                f"TH√îNG TIN C√îNG TY: Kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ v·ªÅ c√¥ng ty ID: {company_id}"
            )
            context_parts.append(f"NG√ÄNH: {industry.value}")
            context_parts.append("H√£y s·ª≠ d·ª•ng ki·∫øn th·ª©c chung v·ªÅ ng√†nh n√†y ƒë·ªÉ tr·∫£ l·ªùi.")
        else:
            context_parts.append(
                f"COMPANY INFORMATION: No specific information available for company ID: {company_id}"
            )
            context_parts.append(f"INDUSTRY: {industry.value}")
            context_parts.append("Please use general industry knowledge to respond.")

        return "\n".join(context_parts)

    def _build_comprehensive_context(
        self,
        rag_results: List[Dict[str, Any]],
        chat_history: List[Dict[str, Any]],
        language: Language,
    ) -> str:
        """
        Build comprehensive context from RAG results and chat history
        X√¢y d·ª±ng ng·ªØ c·∫£nh to√†n di·ªán t·ª´ k·∫øt qu·∫£ RAG v√† l·ªãch s·ª≠ chat
        """
        context_parts = []

        # Add chat history context / Th√™m ng·ªØ c·∫£nh l·ªãch s·ª≠ chat
        if chat_history:
            if language == Language.VIETNAMESE:
                context_parts.append("L·ªäCH S·ª¨ CHAT G·∫¶N ƒê√ÇY:")
            else:
                context_parts.append("RECENT CHAT HISTORY:")

            for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
                role = msg.get("role", "user")
                content = msg.get(
                    "content", ""
                )  # Show full content instead of truncating
                context_parts.append(f"{i}. {role}: {content}")
            context_parts.append("")

        # Add document results / Th√™m k·∫øt qu·∫£ t√†i li·ªáu
        if rag_results:
            if language == Language.VIETNAMESE:
                context_parts.append("TH√îNG TIN T·ª™ T√ÄI LI·ªÜU C√îNG TY:")
            else:
                context_parts.append("COMPANY DOCUMENT INFORMATION:")

            for i, result in enumerate(rag_results, 1):
                content = result.get("content", "")
                content_type = result.get("content_type", "")
                score = result.get("score", 0)
                doc_lang = result.get("language", "unknown")
                search_lang = result.get("search_language", "original")

                context_parts.append(
                    f"Document {i} ({content_type}, score: {score:.2f}, language: {doc_lang}, searched in: {search_lang}):"
                )
                context_parts.append(content)
                context_parts.append("")

        return "\n".join(context_parts)

    def _create_multilingual_company_prompt(
        self,
        original_query: str,
        context: str,
        user_language: Language,
        industry: Industry,
        company_id: str,
        chat_history: List[Dict[str, Any]],
    ) -> str:
        """
        Create comprehensive multilingual prompt with company isolation
        T·∫°o prompt ƒëa ng√¥n ng·ªØ to√†n di·ªán v·ªõi c√°ch ly c√¥ng ty
        """
        # Format chat history for context
        chat_context = ""
        if chat_history:
            chat_context = "\n\nL·ªäCH S·ª¨ CU·ªòC H·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n"
            for i, msg in enumerate(
                chat_history[-5:], 1
            ):  # Last 5 messages (tƒÉng t·ª´ 3 l√™n 5)
                role = "Kh√°ch h√†ng" if msg.get("role") == "user" else "AI Assistant"
                content = msg.get("content", "")
                # Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß n·ªôi dung (kh√¥ng truncate)
                chat_context += f"{i}. {role}: {content}\n"

        if user_language == Language.VIETNAMESE:
            return f"""
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n nghi·ªáp c·ªßa c√¥ng ty (ID: {company_id}) trong ng√†nh {industry.value}.

QUY T·∫ÆC QUAN TR·ªåNG - COMPANY & INDUSTRY ISOLATION:
1. ∆ØU TI√äN: Tr·∫£ l·ªùi th√¥ng tin v·ªÅ c√¥ng ty n√†y (ID: {company_id}) n·∫øu c√≥ trong context
2. N·∫æU KH√îNG C√ì th√¥ng tin c√¥ng ty: Ch·ªâ tr·∫£ l·ªùi th√¥ng tin CHUNG v·ªÅ ng√†nh {industry.value}
3. TUY·ªÜT ƒê·ªêI KH√îNG: Cung c·∫•p th√¥ng tin v·ªÅ c√¥ng ty kh√°c ho·∫∑c ng√†nh kh√°c
4. TUY·ªÜT ƒê·ªêI KH√îNG: Cung c·∫•p th√¥ng tin ngo√†i ng√†nh {industry.value}
5. N·∫øu kh√°ch h·ªèi v·ªÅ c√¥ng ty/ng√†nh kh√°c: L·ªãch s·ª± t·ª´ ch·ªëi v√† h∆∞·ªõng d·∫´n t√¨m ngu·ªìn ch√≠nh x√°c
6. S·ª≠ d·ª•ng l·ªãch s·ª≠ chat ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh cu·ªôc h·ªôi tho·∫°i{chat_context}

NG·ªÆ C·∫¢NH V√Ä TH√îNG TIN:
{context}

C√ÇU H·ªéI KH√ÅCH H√ÄNG: {original_query}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
- LU√îN tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- N·∫æU C√ì th√¥ng tin c√¥ng ty trong context: D·ª±a v√†o ƒë√≥ ƒë·ªÉ tr·∫£ l·ªùi
- N·∫æU KH√îNG C√ì th√¥ng tin c√¥ng ty: S·ª≠ d·ª•ng ki·∫øn th·ª©c chung v·ªÅ ng√†nh {industry.value}
- Th√¢n thi·ªán, chuy√™n nghi·ªáp v√† ch√≠nh x√°c
- N·∫øu kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ v·ªÅ c√¥ng ty: "T√¥i kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ v·ªÅ c√¥ng ty n√†y, nh∆∞ng v·ªÅ ng√†nh {industry.value} th√¨..."
- CH·ªà tr·∫£ l·ªùi trong ph·∫°m vi ng√†nh {industry.value}

PH·∫¢N H·ªíI:
"""
        else:
            # Format chat history for English
            chat_context_en = ""
            if chat_history:
                chat_context_en = "\n\nRECENT CONVERSATION HISTORY:\n"
                for i, msg in enumerate(chat_history[-3:], 1):  # Last 3 messages
                    role = "Customer" if msg.get("role") == "user" else "AI Assistant"
                    content = msg.get("content", "")
                    chat_context_en += f"{i}. {role}: {content}\n"

            return f"""
You are a professional AI assistant for company (ID: {company_id}) in the {industry.value} industry.

IMPORTANT RULES - COMPANY & INDUSTRY ISOLATION:
1. PRIORITY: Provide information about this company (ID: {company_id}) if available in context
2. IF NO COMPANY INFO: Only provide GENERAL information about {industry.value} industry
3. ABSOLUTELY DO NOT: Provide information about other companies or other industries
4. ABSOLUTELY DO NOT: Provide information outside {industry.value} industry
5. If asked about other companies/industries: Politely decline and guide to accurate sources
6. Use chat history to understand conversation context{chat_context_en}

CONTEXT AND INFORMATION:
{context}

CUSTOMER QUESTION: {original_query}

Response guidelines:
- ALWAYS respond in English
- IF company info available in context: Base answer on that
- IF NO company info: Use general knowledge about {industry.value} industry
- Be friendly, professional, and accurate
- If no specific company information: "I don't have specific information about this company, but regarding the {industry.value} industry..."
- ONLY respond within {industry.value} industry scope

RESPONSE:
"""
