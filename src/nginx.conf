# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name ai.aimoney.io.vn;

    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # Redirect all other HTTP to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    http2 on;
    server_name ai.aimoney.io.vn;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/ai.aimoney.io.vn/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai.aimoney.io.vn/privkey.pem;

    # SSL Security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

    # Add standard CORS headers for all routes except chat-stream
    # Development and Production CORS origins
    set $cors_origin "";
    if ($http_origin ~* "^(http://localhost:8001|http://localhost:3002|http://localhost:3000|https://api\.agent8x\.io\.vn|https://agent8x\.io\.vn|https://admin\.agent8x\.io\.vn|https://aivungtau\.com|https://www\.aivungtau\.com|https://api\.aivungtau\.com)$") {
        set $cors_origin $http_origin;
    }

    # Special handling for /api/chat/providers route
    location /api/chat/providers {
        # Static CORS headers specifically for providers endpoint
        # REMOVED 'always' to prevent duplication with FastAPI
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Handle OPTIONS preflight - 'always' is kept here because Nginx returns 204 directly
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        proxy_set_header X-Internal-Key $http_x_internal_key;

        # Standard timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # STREAMING route for regular chat API
    location /api/chat/stream {
        # Static CORS headers for this streaming route
        # REMOVED 'always' to prevent duplication with FastAPI
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Handle OPTIONS preflight - 'always' is kept here because Nginx returns 204 directly
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        proxy_set_header X-Internal-Key $http_x_internal_key;

        # Streaming optimizations
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Connection '';

        # Streaming timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Default CORS headers for non-streaming routes (exclude specific routes)
    location ~* ^/api/(?!unified/chat-stream|chat/stream|chat/providers) {
        # Static CORS headers for all routes except chat-stream
        # REMOVED 'always' to prevent duplication with FastAPI
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Handle OPTIONS preflight - 'always' is kept here because Nginx returns 204 directly
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
        proxy_set_header X-Internal-Key $http_x_internal_key;

        # Timeout settings
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Handle OPTIONS preflight requests - moved to location blocks

    # DYNAMIC CORS ONLY for chat-stream route (plugin domains)
    location /api/unified/chat-stream {
        # NO static CORS headers - handled by FastAPI middleware for dynamic CORS
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # CRITICAL: Pass Origin header for dynamic CORS processing
        proxy_set_header Origin $http_origin;

        # Pass X-Plugin-Id header if present
        proxy_set_header X-Plugin-Id $http_x_plugin_id;

        # Streaming timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering off;
    }

    # Other unified API routes that may need dynamic CORS
    location /api/unified/ {
        # Let FastAPI handle CORS for these routes
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass Origin for dynamic CORS
        proxy_set_header Origin $http_origin;
        proxy_set_header X-Plugin-Id $http_x_plugin_id;

        # Standard timeouts
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Internal API endpoints (authenticated access)
    location /api/internal/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass authentication headers
        proxy_set_header X-Internal-Key $http_x_internal_key;

        # Security: Authentication handled by FastAPI middleware
        # No IP restrictions - use X-Internal-Key authentication instead
        # This allows Backend service to call internal APIs from any IP
        # as long as it provides the correct X-Internal-Key header
    }

    # Documentation and health check routes
    location ~ ^/(docs|redoc|health|openapi\.json) {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main proxy location (fallback for all other routes)
    location / {
        # Static CORS for remaining routes
        # REMOVED 'always' to prevent duplication with FastAPI
        add_header 'Access-Control-Allow-Origin' $cors_origin;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id';
        add_header 'Access-Control-Allow-Credentials' 'true';

        # Handle OPTIONS preflight - 'always' is kept here because Nginx returns 204 directly
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Internal-Key,X-Webhook-Source,X-Webhook-Secret,X-Plugin-Id,X-Company-Id' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Pass Origin header for any route that might need CORS
        proxy_set_header Origin $http_origin;

        # Timeout settings for long AI requests
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # For streaming responses
        proxy_buffering off;
    }

    # Logs
    access_log /var/log/nginx/ai.aimoney.io.vn.access.log;
    error_log /var/log/nginx/ai.aimoney.io.vn.error.log;
}
