"""
Company Database Service for MongoDB persistence
D·ªãch v·ª• database c√¥ng ty cho l∆∞u tr·ªØ b·ªÅn v·ªØng MongoDB
"""

import os
import pymongo
from datetime import datetime
from typing import Any, Dict, List, Optional
from bson import ObjectId

from src.models.unified_models import CompanyConfig, Industry, Language
from src.utils.logger import setup_logger

logger = setup_logger()


class CompanyDBService:
    def __init__(self):
        """
        Initialize MongoDB connection for company data
        Kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB cho d·ªØ li·ªáu c√¥ng ty
        """
        # Check environment and use appropriate MongoDB URI
        environment = os.getenv("ENVIRONMENT", "development")

        if environment == "development":
            # Development: Use local MongoDB without authentication
            mongo_uri = os.getenv("MONGODB_URI", "mongodb://localhost:27017/")
            db_name = os.getenv("MONGODB_NAME", "ai_service_dev_db")
            logger.info(f"üè† [DEV] Using local MongoDB: {mongo_uri}")
        else:
            # Production: Use authenticated MongoDB
            mongo_uri = os.getenv("MONGODB_URI_AUTH")
            if not mongo_uri:
                # Build authenticated URI from components
                mongo_user = os.getenv("MONGODB_APP_USERNAME")
                mongo_pass = os.getenv("MONGODB_APP_PASSWORD")
                mongo_host = (
                    os.getenv("MONGODB_URI", "mongodb://localhost:27017/")
                    .replace("mongodb://", "")
                    .rstrip("/")
                )
                db_name = os.getenv("MONGODB_NAME", "ai_service_db")

                if mongo_user and mongo_pass:
                    mongo_uri = f"mongodb://{mongo_user}:{mongo_pass}@{mongo_host}/{db_name}?authSource=admin"
                else:
                    mongo_uri = os.getenv("MONGODB_URI", "mongodb://localhost:27017/")

            db_name = os.getenv("MONGODB_NAME", "ai_service_db")

        try:
            self.client = pymongo.MongoClient(mongo_uri, serverSelectionTimeoutMS=10000)
            self.db = self.client[db_name]
            self.companies = self.db["companies"]

            # Test connection first
            self.client.admin.command("ping")
            logger.info(f"‚úÖ MongoDB connection successful using authenticated URI")

            # Create indexes for efficient queries
            self.companies.create_index("company_id", unique=True)
            self.companies.create_index("industry")
            self.companies.create_index("company_name")
            self.companies.create_index("created_at")

            logger.info(f"‚úÖ Connected to MongoDB for companies: {db_name}")

        except Exception as e:
            logger.error(f"‚ùå Failed to connect to MongoDB: {e}")
            raise e

    def save_company(self, company_config: CompanyConfig) -> bool:
        """
        Save or update company configuration in MongoDB
        L∆∞u ho·∫∑c c·∫≠p nh·∫≠t c·∫•u h√¨nh c√¥ng ty trong MongoDB
        """
        try:
            # Convert CompanyConfig to dict for MongoDB
            company_data = {
                "company_id": company_config.company_id,
                "company_name": company_config.company_name,
                "industry": company_config.industry.value,
                "languages": [lang.value for lang in company_config.languages],
                "qdrant_collection": company_config.qdrant_collection,
                "data_sources": company_config.data_sources,
                "ai_config": company_config.ai_config,
                "industry_config": company_config.industry_config,
                "business_hours": company_config.business_hours,
                "contact_info": company_config.contact_info,
                "created_at": company_config.created_at,
                "updated_at": datetime.now(),
            }

            # Use upsert to save or update
            result = self.companies.update_one(
                {"company_id": company_config.company_id},
                {"$set": company_data},
                upsert=True,
            )

            if result.upserted_id or result.modified_count > 0:
                logger.info(f"‚úÖ Saved company to MongoDB: {company_config.company_id}")
                return True
            else:
                logger.warning(
                    f"‚ö†Ô∏è No changes made to company: {company_config.company_id}"
                )
                return True

        except Exception as e:
            logger.error(f"‚ùå Failed to save company {company_config.company_id}: {e}")
            return False

    def get_company(self, company_id: str) -> Optional[CompanyConfig]:
        """
        Get company configuration from MongoDB
        L·∫•y c·∫•u h√¨nh c√¥ng ty t·ª´ MongoDB
        """
        try:
            company_data = self.companies.find_one({"company_id": company_id})

            if not company_data:
                logger.warning(f"‚ö†Ô∏è Company not found in MongoDB: {company_id}")
                return None

            # Convert MongoDB document back to CompanyConfig
            company_config = CompanyConfig(
                company_id=company_data["company_id"],
                company_name=company_data["company_name"],
                industry=Industry(company_data["industry"]),
                languages=[
                    Language(lang) for lang in company_data.get("languages", ["vi"])
                ],
                qdrant_collection=company_data["qdrant_collection"],
                data_sources=company_data.get("data_sources", {}),
                ai_config=company_data.get("ai_config", {}),
                industry_config=company_data.get("industry_config", {}),
                business_hours=company_data.get("business_hours"),
                contact_info=company_data.get("contact_info"),
                created_at=company_data.get("created_at", datetime.now()),
                updated_at=company_data.get("updated_at", datetime.now()),
            )

            logger.info(f"‚úÖ Retrieved company from MongoDB: {company_id}")
            return company_config

        except Exception as e:
            logger.error(f"‚ùå Failed to get company {company_id}: {e}")
            return None

    def list_companies(self, limit: int = 100, offset: int = 0) -> List[Dict]:
        """
        List all companies with basic info
        Li·ªát k√™ t·∫•t c·∫£ c√¥ng ty v·ªõi th√¥ng tin c∆° b·∫£n
        """
        try:
            companies = (
                self.companies.find(
                    {},
                    {
                        "company_id": 1,
                        "company_name": 1,
                        "industry": 1,
                        "created_at": 1,
                        "updated_at": 1,
                        "_id": 0,
                    },
                )
                .skip(offset)
                .limit(limit)
                .sort("created_at", -1)
            )

            companies_list = list(companies)
            logger.info(f"‚úÖ Retrieved {len(companies_list)} companies from MongoDB")
            return companies_list

        except Exception as e:
            logger.error(f"‚ùå Failed to list companies: {e}")
            return []

    def search_companies(
        self, company_name: str = None, industry: str = None, limit: int = 50
    ) -> List[Dict]:
        """
        Search companies by name or industry
        T√¨m ki·∫øm c√¥ng ty theo t√™n ho·∫∑c ng√†nh
        """
        try:
            query = {}

            if company_name:
                query["company_name"] = {"$regex": company_name, "$options": "i"}

            if industry:
                query["industry"] = industry

            companies = (
                self.companies.find(
                    query,
                    {
                        "company_id": 1,
                        "company_name": 1,
                        "industry": 1,
                        "contact_info": 1,
                        "created_at": 1,
                        "_id": 0,
                    },
                )
                .limit(limit)
                .sort("company_name", 1)
            )

            companies_list = list(companies)
            logger.info(f"‚úÖ Found {len(companies_list)} companies matching search")
            return companies_list

        except Exception as e:
            logger.error(f"‚ùå Failed to search companies: {e}")
            return []

    def delete_company(self, company_id: str) -> bool:
        """
        Delete company from MongoDB
        X√≥a c√¥ng ty kh·ªèi MongoDB
        """
        try:
            result = self.companies.delete_one({"company_id": company_id})

            if result.deleted_count > 0:
                logger.info(f"‚úÖ Deleted company from MongoDB: {company_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Company not found for deletion: {company_id}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Failed to delete company {company_id}: {e}")
            return False

    def get_companies_by_industry(self, industry: str) -> List[Dict]:
        """
        Get all companies in a specific industry
        L·∫•y t·∫•t c·∫£ c√¥ng ty trong m·ªôt ng√†nh c·ª• th·ªÉ
        """
        try:
            companies = self.companies.find(
                {"industry": industry},
                {
                    "company_id": 1,
                    "company_name": 1,
                    "industry": 1,
                    "qdrant_collection": 1,
                    "created_at": 1,
                    "_id": 0,
                },
            ).sort("company_name", 1)

            companies_list = list(companies)
            logger.info(
                f"‚úÖ Found {len(companies_list)} companies in {industry} industry"
            )
            return companies_list

        except Exception as e:
            logger.error(f"‚ùå Failed to get companies by industry {industry}: {e}")
            return []

    def get_company_count(self) -> int:
        """
        Get total number of registered companies
        L·∫•y t·ªïng s·ªë c√¥ng ty ƒë√£ ƒëƒÉng k√Ω
        """
        try:
            count = self.companies.count_documents({})
            logger.info(f"‚úÖ Total companies in MongoDB: {count}")
            return count

        except Exception as e:
            logger.error(f"‚ùå Failed to get company count: {e}")
            return 0

    def update_company_metadata(self, company_id: str, metadata: Dict) -> bool:
        """
        Update specific metadata fields for a company
        C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng metadata c·ª• th·ªÉ cho c√¥ng ty
        """
        try:
            update_data = {"updated_at": datetime.now()}
            update_data.update(metadata)

            result = self.companies.update_one(
                {"company_id": company_id}, {"$set": update_data}
            )

            if result.modified_count > 0:
                logger.info(f"‚úÖ Updated company metadata: {company_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è No changes made to company metadata: {company_id}")
                return True

        except Exception as e:
            logger.error(f"‚ùå Failed to update company metadata {company_id}: {e}")
            return False

    async def update_company_basic_info(
        self, company_id: str, info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        Update company basic info and return the updated document
        C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n c√¥ng ty v√† tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
        """
        try:
            update_data = {"updated_at": datetime.now()}
            update_data.update(info)

            # Update the document and return the updated version
            result = self.companies.find_one_and_update(
                {"company_id": company_id},
                {"$set": update_data},
                return_document=pymongo.ReturnDocument.AFTER,
            )

            if result:
                # Convert ObjectId to string for JSON serialization
                if "_id" in result:
                    result["_id"] = str(result["_id"])

                logger.info(f"‚úÖ Updated company basic info: {company_id}")
                return result
            else:
                logger.error(f"‚ùå Company not found for update: {company_id}")
                raise Exception(f"Company {company_id} not found")

        except Exception as e:
            logger.error(f"‚ùå Failed to update company basic info {company_id}: {e}")
            raise e


# Global service instance
company_db_service = None


def get_company_db_service() -> CompanyDBService:
    """Get Company DB service instance / L·∫•y instance service Company DB"""
    global company_db_service
    if company_db_service is None:
        company_db_service = CompanyDBService()
    return company_db_service
