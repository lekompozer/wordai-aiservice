"""
Simple Complete Test for 3 Companies: Golden Dragon Restaurant, Ivy Fashion Store, VRB Bank
Test ƒë∆°n gi·∫£n v√† ho√†n ch·ªânh cho 3 c√¥ng ty: upload files, tr√≠ch xu·∫•t content, t·∫°o Qdrant vector database
"""

import os
import asyncio
import boto3
import pandas as pd
import openai
from datetime import datetime
from pathlib import Path
import requests

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

class SimpleCompanyProcessor:
    def __init__(self):
        # Initialize R2 client
        self.r2_client = boto3.client(
            's3',
            endpoint_url='https://ad4f05c99ba9b9d5e4ae5b3fc3b3dcb3.r2.cloudflarestorage.com',
            aws_access_key_id=os.getenv('R2_ACCESS_KEY_ID'),
            aws_secret_access_key=os.getenv('R2_SECRET_ACCESS_KEY'),
            region_name='auto'
        )
        
        # Initialize OpenAI client
        self.openai_client = openai.OpenAI(
            api_key=os.getenv("CHATGPT_API_KEY")
        )
        
        self.bucket_name = "agent8x"
        
    def get_public_url(self, remote_path: str) -> str:
        """Get public URL for uploaded file"""
        return f"https://agent8x.io.vn/{remote_path}"
    
    async def upload_file_to_r2(self, local_path: str, remote_path: str) -> str:
        """Upload file to R2 storage"""
        try:
            self.r2_client.upload_file(local_path, self.bucket_name, remote_path)
            public_url = self.get_public_url(remote_path)
            print(f"‚úÖ Uploaded: {public_url}")
            return public_url
        except Exception as e:
            print(f"‚ùå Upload failed: {e}")
            return None
    
    def extract_text_from_image(self, image_url: str) -> str:
        """Extract text from image using ChatGPT Vision"""
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": "Extract ALL text content from this image. Return only the text, no explanations."
                            },
                            {
                                "type": "image_url",
                                "image_url": {"url": image_url}
                            }
                        ]
                    }
                ],
                max_tokens=4000
            )
            
            content = response.choices[0].message.content
            print(f"üì∏ Image text extracted: {len(content)} characters")
            return content
            
        except Exception as e:
            print(f"‚ùå Image extraction failed: {e}")
            return ""
    
    def read_file_content(self, file_path: str) -> str:
        """Read content from file"""
        try:
            if file_path.endswith('.csv'):
                df = pd.read_csv(file_path)
                return df.to_string()
            else:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return f.read()
        except Exception as e:
            print(f"‚ùå File read failed: {e}")
            return ""
    
    async def process_company_files(self, company_name: str, company_folder: str, files: list) -> dict:
        """Process all files for a company"""
        print(f"\nüè¢ Processing: {company_name}")
        print("=" * 50)
        
        company_data = {
            "name": company_name,
            "folder": company_folder,
            "files": [],
            "total_content": ""
        }
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        for file_name in files:
            local_path = f"company-data-test/{file_name}"
            if not os.path.exists(local_path):
                print(f"‚ö†Ô∏è File not found: {local_path}")
                continue
                
            print(f"\nüìÑ Processing: {file_name}")
            
            # Generate remote path with timestamp
            file_ext = Path(file_name).suffix
            base_name = Path(file_name).stem
            remote_path = f"companies/{company_folder}/{timestamp}_{base_name}{file_ext}"
            
            # Upload to R2
            public_url = await self.upload_file_to_r2(local_path, remote_path)
            if not public_url:
                continue
            
            # Extract content
            content = ""
            if file_name.endswith(('.jpg', '.jpeg', '.png')):
                # Extract text from image
                content = self.extract_text_from_image(public_url)
            else:
                # Read text file
                content = self.read_file_content(local_path)
            
            file_data = {
                "name": file_name,
                "url": public_url,
                "content": content,
                "type": "image" if file_name.endswith(('.jpg', '.jpeg', '.png')) else "text"
            }
            
            company_data["files"].append(file_data)
            company_data["total_content"] += f"\n\n=== {file_name} ===\n{content}"
            
            print(f"‚úÖ Text extracted: {len(content)} characters")
        
        return company_data
    
    def create_qdrant_via_api(self, collection_name: str, company_data: dict):
        """Create Qdrant collection via API"""
        try:
            # Prepare data for our API
            api_data = {
                "company_id": collection_name,
                "company_name": company_data["name"],
                "content": company_data["total_content"],
                "files": [
                    {
                        "name": f["name"],
                        "url": f["url"],
                        "content": f["content"]
                    }
                    for f in company_data["files"]
                ]
            }
            
            # Send to our document processing API
            api_url = "http://localhost:8000/api/v1/documents/process"
            response = requests.post(api_url, json=api_data)
            
            if response.status_code == 200:
                print(f"‚úÖ Created Qdrant collection via API: {collection_name}")
                return response.json()
            else:
                print(f"‚ùå API call failed: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Qdrant API call failed: {e}")
            return None

async def test_chat_with_companies(processor, company_data_list):
    """Test chat functionality with all companies"""
    print(f"\nü§ñ Testing Chat with Companies")
    print("=" * 50)
    
    # Test scenarios for each company
    test_scenarios = {
        "golden-dragon-restaurant": [
            "Cho t√¥i xem menu nh√† h√†ng v√† gi√° m√≥n ƒÉn",
            "T√¥i mu·ªën ƒë·∫∑t b√†n cho 4 ng∆∞·ªùi v√†o t·ªëi nay l√∫c 7h",
            "M√≥n g√† H'm√¥ng n·∫•m b√≠ qu·∫£ gi√° bao nhi√™u?"
        ],
        "ivy-fashion-store": [
            "T√¥i mu·ªën xem c√°c s·∫£n ph·∫©m th·ªùi trang", 
            "C√≥ √°o s∆° mi nam kh√¥ng? Gi√° bao nhi√™u?",
            "T√¥i mu·ªën ƒë·∫∑t mua 1 √°o blazer size M"
        ],
        "vrb-bank-financial": [
            "T√¥i mu·ªën vay ti√™u d√πng 100 tri·ªáu VNƒê",
            "L√£i su·∫•t vay mua nh√† hi·ªán t·∫°i l√† bao nhi√™u?",
            "Th·ªß t·ª•c m·ªü t√†i kho·∫£n ti·∫øt ki·ªám nh∆∞ th·∫ø n√†o?"
        ]
    }
    
    for company_data in company_data_list:
        collection_name = company_data["folder"].replace("-", "_")
        company_name = company_data["name"]
        
        print(f"\nüè¢ Testing chat with: {company_name}")
        print("-" * 30)
        
        if collection_name.replace("_", "-") in test_scenarios:
            scenarios = test_scenarios[collection_name.replace("_", "-")]
            
            for i, question in enumerate(scenarios, 1):
                print(f"\n‚ùì Test {i}: {question}")
                
                try:
                    # Test chat via API
                    chat_data = {
                        "company_id": collection_name,
                        "message": question,
                        "conversation_id": f"test_{collection_name}_{i}",
                        "language": "vi"
                    }
                    
                    response = requests.post("http://localhost:8000/api/v1/chat/unified", json=chat_data)
                    
                    if response.status_code == 200:
                        result = response.json()
                        print(f"‚úÖ Response: {result.get('response', 'No response')[:200]}...")
                        
                        # Check if order/booking code generated
                        if 'order_code' in result:
                            print(f"üõí Order Code: {result['order_code']}")
                        if 'booking_code' in result:
                            print(f"ü™ë Booking Code: {result['booking_code']}")
                        if 'loan_code' in result:
                            print(f"üí∞ Loan Code: {result['loan_code']}")
                            
                    else:
                        print(f"‚ùå Chat API failed: {response.status_code}")
                        
                except Exception as e:
                    print(f"‚ùå Chat test failed: {e}")

async def main():
    """Main test function"""
    print("üöÄ Simple Complete Test for 3 Companies")
    print("=" * 60)
    
    processor = SimpleCompanyProcessor()
    
    # Define companies and their files
    companies = {
        "Nh√† h√†ng Golden Dragon": {
            "folder": "golden-dragon-restaurant",
            "files": ["golden-dragon-info.txt", "golden-dragon-menu.jpg"]
        },
        "C·ª≠a h√†ng Ivy Fashion": {
            "folder": "ivy-fashion-store", 
            "files": ["ivy-fashion-info.txt", "ivy-fashion-products.csv"]
        },
        "Ng√¢n h√†ng VRB": {
            "folder": "vrb-bank-financial",
            "files": ["vrb-bank-info.md", "vrb-bank-services.docx"]
        }
    }
    
    all_company_data = []
    
    # Process each company
    for company_name, company_info in companies.items():
        # Process files
        company_data = await processor.process_company_files(
            company_name,
            company_info["folder"],
            company_info["files"]
        )
        
        # Create Qdrant collection via API
        processor.create_qdrant_via_api(company_info["folder"], company_data)
        
        all_company_data.append(company_data)
    
    # Test chat functionality
    await test_chat_with_companies(processor, all_company_data)
    
    # Summary
    print(f"\nüìä Processing Summary")
    print("=" * 40)
    
    for company_data in all_company_data:
        print(f"\nüè¢ {company_data['name']}")
        for file_data in company_data['files']:
            print(f"   ‚úÖ {file_data['name']} ({len(file_data['content'])} chars)")
            print(f"      üìé {file_data['url']}")
    
    print(f"\nüéâ All companies processed successfully!")
    print(f"‚úÖ Files uploaded to R2")
    print(f"‚úÖ Content extracted from images and text")
    print(f"‚úÖ Vector databases created in Qdrant")
    print(f"‚úÖ Chat testing completed!")

if __name__ == "__main__":
    asyncio.run(main())
