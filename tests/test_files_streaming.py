import requests
import json
import base64
import time

BASE_URL = "http://localhost:8000"  # Ho·∫∑c localhost n·∫øu test local
USER_ID = "test_user_files_" + str(int(time.time()))

def create_test_files():
    """T·∫°o test files v·ªõi n·ªôi dung kh√°c nhau"""
    
    # File 1: Th√¥ng tin l√£i su·∫•t
    laisuat_content = """
    B·∫¢NG L√ÉI SU·∫§T TI·∫æT KI·ªÜM VIETCOMBANK 2025
    
    K·ª≥ h·∫°n 6 th√°ng: 4.2%/nƒÉm
    K·ª≥ h·∫°n 12 th√°ng: 4.8%/nƒÉm  
    K·ª≥ h·∫°n 18 th√°ng: 5.0%/nƒÉm
    K·ª≥ h·∫°n 24 th√°ng: 5.1%/nƒÉm
    
    ∆Øu ƒë√£i:
    - Kh√°ch h√†ng VIP: +0.2%/nƒÉm
    - G·ª≠i t·ª´ 500 tri·ªáu: +0.1%/nƒÉm
    """
    
    # File 2: So s√°nh ng√¢n h√†ng
    sosanh_content = """
    SO S√ÅNH L√ÉI SU·∫§T C√ÅC NG√ÇN H√ÄNG 2025
    
    VIETCOMBANK:
    - 12 th√°ng: 4.8%/nƒÉm
    - 24 th√°ng: 5.1%/nƒÉm
    
    ACB:
    - 12 th√°ng: 5.0%/nƒÉm
    - 24 th√°ng: 5.3%/nƒÉm
    
    TECHCOMBANK:
    - 12 th√°ng: 4.9%/nƒÉm
    - 24 th√°ng: 5.2%/nƒÉm
    
    K·∫æT LU·∫¨N: ACB c√≥ l√£i su·∫•t cao nh·∫•t
    """
    
    # File 3: ƒêi·ªÅu ki·ªán v√† ph√≠
    phidichvu_content = """
    PH√ç D·ªäCH V·ª§ NG√ÇN H√ÄNG 2025
    
    VIETCOMBANK:
    - Ph√≠ m·ªü t√†i kho·∫£n: 100,000 VND
    - Ph√≠ duy tr√¨ t√†i kho·∫£n: 20,000 VND/th√°ng
    - Ph√≠ chuy·ªÉn kho·∫£n online: 5,500 VND
    - Ph√≠ r√∫t ti·ªÅn ATM: 3,300 VND/giao d·ªãch
    
    ƒêI·ªÄU KI·ªÜN:
    - S·ªë d∆∞ t·ªëi thi·ªÉu: 500,000 VND
    - G·ª≠i ti·∫øt ki·ªám t·ªëi thi·ªÉu: 1,000,000 VND
    """
    
    return [
        {
            "content": base64.b64encode(laisuat_content.encode('utf-8')).decode('utf-8'),
            "content_type": "text/plain",
            "filename": "laisuat_vietcombank.txt",
            "size": len(laisuat_content)
        },
        {
            "content": base64.b64encode(sosanh_content.encode('utf-8')).decode('utf-8'),
            "content_type": "text/plain", 
            "filename": "sosanh_ngan_hang.txt",
            "size": len(sosanh_content)
        },
        {
            "content": base64.b64encode(phidichvu_content.encode('utf-8')).decode('utf-8'),
            "content_type": "text/plain",
            "filename": "phi_dich_vu.txt", 
            "size": len(phidichvu_content)
        }
    ]

def test_streaming_question(question, files_data, question_number):
    """Test m·ªôt c√¢u h·ªèi streaming v·ªõi files"""
    
    print(f"\n{'='*60}")
    print(f"C√ÇU H·ªéI {question_number}: {question}")
    print(f"{'='*60}")
    print(f"Files g·ª≠i k√®m: {[f['filename'] for f in files_data]}")
    print(f"User ID: {USER_ID}")
    print("\n" + "-"*50)
    print("PH·∫¢N H·ªíI STREAMING:")
    print("-"*50)
    
    # Chu·∫©n b·ªã request data
    request_data = {
        "question": question,
        "userId": USER_ID,
        "files": files_data
    }
    
    # G·ªçi endpoint streaming
    try:
        response = requests.post(
            f"{BASE_URL}/chat-with-files-stream",
            json=request_data,
            stream=True,
            timeout=120
        )
        
        if response.status_code != 200:
            print(f"Error: HTTP {response.status_code}")
            print(response.text)
            return
        
        full_response = ""
        for line in response.iter_lines():
            if line:
                line = line.decode('utf-8')
                if line.startswith('data: '):
                    try:
                        data = json.loads(line[6:])
                        if "chunk" in data:
                            chunk = data["chunk"]
                            print(chunk, end="", flush=True)
                            full_response += chunk
                        elif "done" in data:
                            print(f"\n\n{'-'*50}")
                            print("‚úÖ HO√ÄN TH√ÄNH")
                            print(f"ƒê·ªô d√†i ph·∫£n h·ªìi: {len(full_response)} k√Ω t·ª±")
                            print(f"{'-'*50}")
                            break
                        elif "error" in data:
                            print(f"\n‚ùå L·ªñI: {data['error']}")
                            break
                    except json.JSONDecodeError as e:
                        print(f"\n‚ö†Ô∏è JSON decode error: {e}")
                        continue
                        
    except requests.exceptions.Timeout:
        print("\n‚ùå TIMEOUT: Server kh√¥ng ph·∫£n h·ªìi trong 120 gi√¢y")
    except requests.exceptions.ConnectionError:
        print(f"\n‚ùå CONNECTION ERROR: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi {BASE_URL}")
    except Exception as e:
        print(f"\n‚ùå UNEXPECTED ERROR: {e}")

def test_chat_history_endpoint():
    """Test endpoint l·∫•y l·ªãch s·ª≠ chat"""
    
    print(f"\n{'='*60}")
    print("KI·ªÇM TRA L·ªäCH S·ª¨ CHAT")
    print(f"{'='*60}")
    
    try:
        response = requests.get(f"{BASE_URL}/history/{USER_ID}")
        
        if response.status_code == 200:
            history = response.json()
            print(f"‚úÖ C√≥ {len(history.get('messages', []))} tin nh·∫Øn trong l·ªãch s·ª≠")
            
            for i, msg in enumerate(history.get('messages', [])[-6:], 1):  # Hi·ªÉn th·ªã 6 tin nh·∫Øn cu·ªëi
                role = "üßë USER" if msg['role'] == 'user' else "ü§ñ BOT"
                content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
                print(f"{i}. {role}: {content}")
        else:
            print(f"‚ùå L·ªói l·∫•y l·ªãch s·ª≠: HTTP {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra l·ªãch s·ª≠: {e}")

def main():
    """Ch·∫°y test ch√≠nh v·ªõi 3 c√¢u h·ªèi c√≥ li√™n quan ƒë·ªÉ test l·ªãch s·ª≠"""
    
    print("üöÄ B·∫ÆT ƒê·∫¶U TEST FILES STREAMING V·ªöI L·ªäCH S·ª¨ CHAT")
    print(f"Base URL: {BASE_URL}")
    print(f"User ID: {USER_ID}")
    
    # T·∫°o test files
    test_files = create_test_files()
    
    # C√¢u h·ªèi 1: H·ªèi v·ªÅ l√£i su·∫•t c∆° b·∫£n
    test_streaming_question(
        question="L√£i su·∫•t ti·∫øt ki·ªám 12 th√°ng t·∫°i Vietcombank l√† bao nhi√™u?",
        files_data=[test_files[0]],  # Ch·ªâ g·ª≠i file l√£i su·∫•t
        question_number=1
    )
    
    time.sleep(2)  # Ngh·ªâ 2 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o l∆∞u database
    
    # C√¢u h·ªèi 2: So s√°nh v·ªõi ng√¢n h√†ng kh√°c (c√≥ context t·ª´ c√¢u 1)
    test_streaming_question(
        question="So v·ªõi ACB v√† Techcombank th√¨ ng√¢n h√†ng n√†o t·ªët h∆°n?",
        files_data=[test_files[1]],  # G·ª≠i file so s√°nh
        question_number=2
    )
    
    time.sleep(2)
    
    # C√¢u h·ªèi 3: H·ªèi v·ªÅ ph√≠ d·ªãch v·ª• (c√≥ context t·ª´ c√¢u 1 v√† 2)
    test_streaming_question(
        question="Ngo√†i l√£i su·∫•t th√¨ c√≤n c√≥ ph√≠ g√¨ kh√°c kh√¥ng? T√≠nh t·ªïng chi ph√≠ cho t√¥i.",
        files_data=[test_files[2]],  # G·ª≠i file ph√≠ d·ªãch v·ª•
        question_number=3
    )
    
    time.sleep(2)
    
    # Test c√¢u h·ªèi 4: Kh√¥ng c√≥ file, ch·ªâ d·ª±a v√†o l·ªãch s·ª≠
    test_streaming_question(
        question="D·ª±a tr√™n nh·ªØng th√¥ng tin v·ª´a r·ªìi, b·∫°n khuy√™n t√¥i n√™n ch·ªçn ng√¢n h√†ng n√†o v√† k·ª≥ h·∫°n bao l√¢u?",
        files_data=[],  # Kh√¥ng g·ª≠i file, ch·ªâ d·ª±a v√†o l·ªãch s·ª≠
        question_number=4
    )
    
    # Ki·ªÉm tra l·ªãch s·ª≠ cu·ªëi c√πng
    test_chat_history_endpoint()
    
    print(f"\nüéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TEST")
    print(f"üìä ƒê√£ test {4} c√¢u h·ªèi v·ªõi User ID: {USER_ID}")

if __name__ == "__main__":
    main()