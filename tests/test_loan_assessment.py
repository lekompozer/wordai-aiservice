"""
‚úÖ TEST FILE FOR LOAN ASSESSMENT ENDPOINT
Test cases: Approved, Needs Review, Rejected
"""

import requests
import json
from datetime import datetime, timedelta
import time

# ‚úÖ Configuration
AI_SERVICE_BASE_URL = "http://localhost:8000"  # Change to your server URL
ENDPOINT = "/api/loan/assessment"

def test_loan_assessment(test_case_data, case_name):
    """Test loan assessment endpoint with given data"""
    print(f"\n{'='*60}")
    print(f"üß™ TESTING: {case_name}")
    print(f"{'='*60}")
    
    try:
        # Send request
        start_time = time.time()
        response = requests.post(
            f"{AI_SERVICE_BASE_URL}{ENDPOINT}",
            headers={"Content-Type": "application/json"},
            json=test_case_data,
            timeout=60
        )
        duration = time.time() - start_time
        
        print(f"‚è±Ô∏è  Request duration: {duration:.2f}s")
        print(f"üìä Response status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"\n‚úÖ RESPONSE SUMMARY:")
            print(f"   Success: {result.get('success', False)}")
            print(f"   Application ID: {result.get('applicationId', 'N/A')}")
            print(f"   Assessment ID: {result.get('assessmentId', 'N/A')}")
            
            if result.get('success'):
                print(f"\nüìã ASSESSMENT RESULT:")
                print(f"   Status: {result.get('status', 'N/A')}")
                print(f"   Credit Score: {result.get('creditScore', 'N/A')}")
                print(f"   Confidence: {result.get('confidence', 'N/A')}")
                print(f"   Approved Amount: {result.get('approvedAmount', 'N/A'):,} VNƒê" if result.get('approvedAmount') else "   Approved Amount: N/A")
                print(f"   Interest Rate: {result.get('interestRate', 'N/A')}%")
                print(f"   Monthly Payment: {result.get('monthlyPayment', 'N/A'):,} VNƒê" if result.get('monthlyPayment') else "   Monthly Payment: N/A")
                print(f"   Loan to Value: {result.get('loanToValue', 'N/A'):.2%}" if result.get('loanToValue') else "   Loan to Value: N/A")
                print(f"   Debt to Income: {result.get('debtToIncome', 'N/A'):.2%}" if result.get('debtToIncome') else "   Debt to Income: N/A")
                
                print(f"\nüîç REASONING:")
                reasoning = result.get('reasoning', 'N/A')
                if len(reasoning) > 200:
                    print(f"   {reasoning[:200]}...")
                else:
                    print(f"   {reasoning}")
                
                print(f"\n‚ö†Ô∏è  RISK FACTORS:")
                risk_factors = result.get('riskFactors', [])
                for i, risk in enumerate(risk_factors[:3], 1):
                    print(f"   {i}. {risk}")
                
                print(f"\nüí° RECOMMENDATIONS:")
                recommendations = result.get('recommendations', [])
                for i, rec in enumerate(recommendations[:3], 1):
                    print(f"   {i}. {rec}")
                
                print(f"\nüìä PROCESSING DETAILS:")
                processing = result.get('processingDetails', {})
                print(f"   Processing Time: {processing.get('processingTime', 'N/A')}s")
                print(f"   Model Used: {processing.get('modelUsed', 'N/A')}")
                
            else:
                print(f"\n‚ùå ERROR:")
                print(f"   {result.get('error', 'Unknown error')}")
                
        else:
            print(f"\n‚ùå HTTP ERROR:")
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text[:500]}...")
            
    except requests.exceptions.Timeout:
        print(f"\n‚è∞ TIMEOUT ERROR:")
        print(f"   Request timed out after 60 seconds")
        
    except requests.exceptions.ConnectionError:
        print(f"\nüîå CONNECTION ERROR:")
        print(f"   Cannot connect to {AI_SERVICE_BASE_URL}")
        print(f"   Make sure the server is running")
        
    except Exception as e:
        print(f"\nüí• EXCEPTION:")
        print(f"   {str(e)}")

# ‚úÖ TEST CASE 1: APPROVED LOAN (High income, low debt, good collateral)
test_case_approved = {
    "applicationId": "LOAN-TEST-APPROVED-001",
    "userId": "test_user_approved",
    "deviceId": "device_test_001",
    "currentStep": 6,
    "status": "submitted",
    "createdAt": "2025-06-01T09:00:00.000Z",
    "submittedAt": "2025-06-12T14:30:00.000Z",
    
    # Loan Information - Reasonable amount
    "loanAmount": 1500000000,  # 1.5 t·ª∑ VNƒê
    "loanType": "Th·∫ø ch·∫•p",
    "loanTerm": "15 nƒÉm",
    "loanPurpose": "Mua nh√† ·ªü",
    
    # Personal Information
    "phoneNumber": "0987654321",
    "email": "approved@test.com",
    "maritalStatus": "ƒê√£ k·∫øt h√¥n",
    "dependents": 1,
    
    # ID Card Information - Good profile
    "idCardInfo": {
        "idNumber": "024789123456",
        "fullName": "NGUY·ªÑN VƒÇN TH√ÄNH",
        "dateOfBirth": "1980-05-15T00:00:00.000Z",  # 44 tu·ªïi - prime age
        "gender": "Nam",
        "nationality": "Vi·ªát Nam",
        "placeOfOrigin": "H√† N·ªôi, Vi·ªát Nam",
        "permanentAddress": "S·ªë 123, Ph·ªë L√°ng H·∫°, Ph∆∞·ªùng L√°ng H·∫°, Qu·∫≠n ƒê·ªëng ƒêa, H√† N·ªôi",
        "dateOfIssue": "2020-05-15T00:00:00.000Z",
        "placeOfIssue": "C·ª•c C·∫£nh s√°t ƒêKQL c∆∞ tr√∫ v√† DLQG v·ªÅ d√¢n c∆∞",
        "expirationDate": None,
        "ethnicity": "Kinh",
        "religion": "Kh√¥ng",
        "ocrConfidence": 0.95
    },
    
    # Collateral Information - Excellent collateral
    "collateralType": "B·∫•t ƒë·ªông s·∫£n",
    "collateralInfo": """CƒÉn h·ªô chung c∆∞ cao c·∫•p Times City
- ƒê·ªãa ch·ªâ: T·∫ßng 20, T√≤a T2, Times City, 458 Minh Khai, Hai B√† Tr∆∞ng, H√† N·ªôi
- Di·ªán t√≠ch: 100m¬≤ (3 ph√≤ng ng·ªß, 2 ph√≤ng t·∫Øm)
- H∆∞·ªõng: ƒê√¥ng Nam, view c√¥ng vi√™n
- N·ªôi th·∫•t: ƒê·∫ßy ƒë·ªß n·ªôi th·∫•t cao c·∫•p
- T√¨nh tr·∫°ng ph√°p l√Ω: S·ªï h·ªìng ri√™ng, kh√¥ng tranh ch·∫•p
- Th·ªùi gian x√¢y d·ª±ng: 2018 (c√≤n m·ªõi)
- V·ªã tr√≠ thu·∫≠n ti·ªán: G·∫ßn tr∆∞·ªùng h·ªçc, b·ªánh vi·ªán, trung t√¢m th∆∞∆°ng m·∫°i""",
    "collateralValue": 6000000000,  # 6 t·ª∑ VNƒê - LTV = 25%
    
    # Financial Information - Strong finances
    "monthlyIncome": 120000000,  # 120 tri·ªáu/th√°ng
    "primaryIncomeSource": "L∆∞∆°ng nh√¢n vi√™n",
    "companyName": "C√¥ng ty TNHH Samsung Electronics Vi·ªát Nam",
    "jobTitle": "Gi√°m ƒë·ªëc k·ªπ thu·∫≠t",
    "workExperience": 12,
    "otherIncome": "Thu nh·∫≠p t·ª´ cho thu√™ nh√†",
    "otherIncomeAmount": 30000000,  # 30 tri·ªáu/th√°ng
    "bankAccount": "1234567890123",
    "bankName": "Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam (BIDV)",
    "totalAssets": 12000000000,  # 12 t·ª∑ VNƒê
    "liquidAssets": 2000000000,  # 2 t·ª∑ VNƒê
    
    # Debt Information - Low debt
    "hasExistingDebt": True,
    "totalDebtAmount": 300000000,  # 300 tri·ªáu VNƒê
    "monthlyDebtPayment": 8000000,  # 8 tri·ªáu/th√°ng
    "cicCreditScoreGroup": "1",  # Excellent credit
    "creditHistory": "L·ªãch s·ª≠ t√≠n d·ª•ng xu·∫•t s·∫Øc, kh√¥ng c√≥ n·ª£ x·∫•u. ƒê√£ vay mua xe v√† tr·∫£ ƒë√∫ng h·∫°n.",
    "existingLoans": [
        {
            "lender": "Ng√¢n h√†ng TMCP C√¥ng th∆∞∆°ng Vi·ªát Nam (VietinBank)",
            "amount": 300000000,
            "monthlyPayment": 8000000,
            "remainingTerm": "10 th√°ng"
        }
    ],
    
    # Administrative
    "ipAddress": "14.161.42.123",
    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "termsAccepted": True,
    "termsAcceptedAt": "2025-06-01T09:05:00.000Z",
    "privacyPolicyAccepted": True,
    "dataProcessingConsent": True
}

# ‚úÖ TEST CASE 2: NEEDS REVIEW (Medium income, moderate debt, requires conditions)
test_case_needs_review = {
    "applicationId": "LOAN-TEST-REVIEW-002",
    "userId": "test_user_review",
    "deviceId": "device_test_002",
    "currentStep": 6,
    "status": "submitted",
    "createdAt": "2025-06-01T09:00:00.000Z",
    "submittedAt": "2025-06-12T14:30:00.000Z",
    
    # Loan Information
    "loanAmount": 2000000000,  # 2 t·ª∑ VNƒê
    "loanType": "Th·∫ø ch·∫•p",
    "loanTerm": "20 nƒÉm",
    "loanPurpose": "Mua nh√† ·ªü v√† kinh doanh",
    
    # Personal Information
    "phoneNumber": "0912345678",
    "email": "review@test.com",
    "maritalStatus": "ƒê·ªôc th√¢n",
    "dependents": 0,
    
    # ID Card Information
    "idCardInfo": {
        "idNumber": "036789456123",
        "fullName": "TR·∫¶N TH·ªä LAN",
        "dateOfBirth": "1985-08-20T00:00:00.000Z",  # 39 tu·ªïi
        "gender": "N·ªØ",
        "nationality": "Vi·ªát Nam",
        "placeOfOrigin": "H·∫£i Ph√≤ng, Vi·ªát Nam",
        "permanentAddress": "S·ªë 456, ƒê∆∞·ªùng L√™ L·ª£i, Ph∆∞·ªùng M√°y Chai, Qu·∫≠n Ng√¥ Quy·ªÅn, H·∫£i Ph√≤ng",
        "dateOfIssue": "2021-08-20T00:00:00.000Z",
        "placeOfIssue": "C·ª•c C·∫£nh s√°t ƒêKQL c∆∞ tr√∫ v√† DLQG v·ªÅ d√¢n c∆∞",
        "expirationDate": None,
        "ethnicity": "Kinh",
        "religion": "Ph·∫≠t gi√°o",
        "ocrConfidence": 0.88
    },
    
    # Collateral Information - Moderate value
    "collateralType": "B·∫•t ƒë·ªông s·∫£n",
    "collateralInfo": """Nh√† ph·ªë 3 t·∫ßng
- ƒê·ªãa ch·ªâ: S·ªë 78, Ph·ªë Tr·∫ßn Ph√∫, Ph∆∞·ªùng L√™ L·ª£i, Qu·∫≠n Ng√¥ Quy·ªÅn, H·∫£i Ph√≤ng
- Di·ªán t√≠ch: 80m¬≤ x 3 t·∫ßng = 240m¬≤ s√†n
- T√¨nh tr·∫°ng: Nh√† c≈© x√¢y nƒÉm 2010, c·∫ßn s·ª≠a ch·ªØa
- T√¨nh tr·∫°ng ph√°p l√Ω: S·ªï h·ªìng ri√™ng
- V·ªã tr√≠: G·∫ßn ch·ª£, tr∆∞·ªùng h·ªçc, nh∆∞ng h·∫ªm h∆°i nh·ªè""",
    "collateralValue": 3500000000,  # 3.5 t·ª∑ VNƒê - LTV = 57%
    
    # Financial Information - Moderate income
    "monthlyIncome": 65000000,  # 65 tri·ªáu/th√°ng
    "primaryIncomeSource": "Kinh doanh",
    "companyName": "C·ª≠a h√†ng th·ªùi trang Lan Anh",
    "jobTitle": "Ch·ªß c·ª≠a h√†ng",
    "workExperience": 8,
    "otherIncome": "Cho thu√™ ph√≤ng tr·ªç",
    "otherIncomeAmount": 15000000,  # 15 tri·ªáu/th√°ng
    "bankAccount": "9876543210987",
    "bankName": "Ng√¢n h√†ng TMCP Ngo·∫°i th∆∞∆°ng Vi·ªát Nam (Vietcombank)",
    "totalAssets": 5000000000,  # 5 t·ª∑ VNƒê
    "liquidAssets": 800000000,  # 800 tri·ªáu VNƒê
    
    # Debt Information - Moderate debt
    "hasExistingDebt": True,
    "totalDebtAmount": 800000000,  # 800 tri·ªáu VNƒê
    "monthlyDebtPayment": 15000000,  # 15 tri·ªáu/th√°ng
    "cicCreditScoreGroup": "2",  # Good credit
    "creditHistory": "L·ªãch s·ª≠ t√≠n d·ª•ng t·ªët, c√≥ 1 l·∫ßn ch·∫≠m tr·∫£ 30 ng√†y nƒÉm 2022 nh∆∞ng ƒë√£ thanh to√°n ƒë·∫ßy ƒë·ªß.",
    "existingLoans": [
        {
            "lender": "Ng√¢n h√†ng TMCP √Å Ch√¢u (ACB)",
            "amount": 500000000,
            "monthlyPayment": 10000000,
            "remainingTerm": "2 nƒÉm"
        },
        {
            "lender": "C√¥ng ty T√†i ch√≠nh TNHH MTV Home Credit",
            "amount": 300000000,
            "monthlyPayment": 5000000,
            "remainingTerm": "18 th√°ng"
        }
    ],
    
    # Administrative
    "ipAddress": "115.78.45.210",
    "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X)",
    "termsAccepted": True,
    "termsAcceptedAt": "2025-06-01T09:05:00.000Z",
    "privacyPolicyAccepted": True,
    "dataProcessingConsent": True
}

# ‚úÖ TEST CASE 3: REJECTED (Low income, high debt, poor credit history)
test_case_rejected = {
    "applicationId": "LOAN-TEST-REJECTED-003",
    "userId": "test_user_rejected",
    "deviceId": "device_test_003",
    "currentStep": 6,
    "status": "submitted",
    "createdAt": "2025-06-01T09:00:00.000Z",
    "submittedAt": "2025-06-12T14:30:00.000Z",
    
    # Loan Information - High amount vs income
    "loanAmount": 3000000000,  # 3 t·ª∑ VNƒê
    "loanType": "Th·∫ø ch·∫•p",
    "loanTerm": "25 nƒÉm",
    "loanPurpose": "Mua nh√† ·ªü v√† ƒë·∫ßu t∆∞",
    
    # Personal Information
    "phoneNumber": "0901234567",
    "email": "rejected@test.com",
    "maritalStatus": "ƒê√£ k·∫øt h√¥n",
    "dependents": 3,  # Many dependents
    
    # ID Card Information
    "idCardInfo": {
        "idNumber": "079123789456",
        "fullName": "L√ä VƒÇN B√åNH",
        "dateOfBirth": "1975-12-10T00:00:00.000Z",  # 49 tu·ªïi - getting older
        "gender": "Nam",
        "nationality": "Vi·ªát Nam",
        "placeOfOrigin": "C·∫ßn Th∆°, Vi·ªát Nam",
        "permanentAddress": "S·ªë 789, ·∫§p T√¢n L·ª£i, X√£ T√¢n Th·∫°nh, Huy·ªán Ch√¢u Th√†nh, C·∫ßn Th∆°",
        "dateOfIssue": "2019-12-10T00:00:00.000Z",
        "placeOfIssue": "C·ª•c C·∫£nh s√°t ƒêKQL c∆∞ tr√∫ v√† DLQG v·ªÅ d√¢n c∆∞",
        "expirationDate": None,
        "ethnicity": "Kinh",
        "religion": "Kh√¥ng",
        "ocrConfidence": 0.82
    },
    
    # Collateral Information - Low value, risky location
    "collateralType": "B·∫•t ƒë·ªông s·∫£n",
    "collateralInfo": """Nh√† c·∫•p 4 n√¥ng th√¥n
- ƒê·ªãa ch·ªâ: ·∫§p T√¢n L·ª£i, X√£ T√¢n Th·∫°nh, Huy·ªán Ch√¢u Th√†nh, C·∫ßn Th∆°
- Di·ªán t√≠ch: 150m¬≤ ƒë·∫•t, nh√† c·∫•p 4 c≈©
- T√¨nh tr·∫°ng: Nh√† x√¢y nƒÉm 2005, xu·ªëng c·∫•p
- T√¨nh tr·∫°ng ph√°p l√Ω: S·ªï h·ªìng ri√™ng
- V·ªã tr√≠: V√πng n√¥ng th√¥n xa trung t√¢m, thanh kho·∫£n th·∫•p
- R·ªßi ro: Khu v·ª±c th∆∞·ªùng xuy√™n ng·∫≠p l·ª•t m√πa m∆∞a""",
    "collateralValue": 2500000000,  # 2.5 t·ª∑ VNƒê - LTV = 120% (qu√° cao!)
    
    # Financial Information - Low income, unstable
    "monthlyIncome": 25000000,  # 25 tri·ªáu/th√°ng (th·∫•p)
    "primaryIncomeSource": "N√¥ng nghi·ªáp",
    "companyName": "H·ªô kinh doanh c√° th·ªÉ",
    "jobTitle": "N√¥ng d√¢n",
    "workExperience": 20,
    "otherIncome": "B√°n h√†ng online",
    "otherIncomeAmount": 8000000,  # 8 tri·ªáu/th√°ng (kh√¥ng ·ªïn ƒë·ªãnh)
    "bankAccount": "5432109876543",
    "bankName": "Ng√¢n h√†ng N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n (Agribank)",
    "totalAssets": 3000000000,  # 3 t·ª∑ VNƒê (ch·ªß y·∫øu l√† ƒë·∫•t)
    "liquidAssets": 150000000,  # 150 tri·ªáu VNƒê (r·∫•t th·∫•p)
    
    # Debt Information - High debt, poor credit
    "hasExistingDebt": True,
    "totalDebtAmount": 1200000000,  # 1.2 t·ª∑ VNƒê (cao)
    "monthlyDebtPayment": 18000000,  # 18 tri·ªáu/th√°ng
    "cicCreditScoreGroup": "3",  # Poor credit
    "creditHistory": "L·ªãch s·ª≠ t√≠n d·ª•ng h∆°i k√©m, c√≥ 3 l·∫ßn ch·∫≠m tr·∫£ qu√° 60 ng√†y trong 2 nƒÉm qua. Hi·ªán t·∫°i ƒëang n·ª£ x·∫•u nh√≥m 3.",
    "existingLoans": [
        {
            "lender": "Ng√¢n h√†ng N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n (Agribank)",
            "amount": 800000000,
            "monthlyPayment": 12000000,
            "remainingTerm": "5 nƒÉm"
        },
        {
            "lender": "Qu·ªπ T√≠n d·ª•ng Nh√¢n d√¢n Ch√¢u Th√†nh",
            "amount": 400000000,
            "monthlyPayment": 6000000,
            "remainingTerm": "3 nƒÉm"
        }
    ],
    
    # Administrative
    "ipAddress": "113.160.12.45",
    "userAgent": "Mozilla/5.0 (Linux; Android 9; SM-A102U)",
    "termsAccepted": True,
    "termsAcceptedAt": "2025-06-01T09:05:00.000Z",
    "privacyPolicyAccepted": True,
    "dataProcessingConsent": True
}

def run_all_tests():
    """Run all test cases"""
    print("üöÄ STARTING LOAN ASSESSMENT API TESTS")
    print(f"üîó Testing endpoint: {AI_SERVICE_BASE_URL}{ENDPOINT}")
    print(f"üìÖ Test time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Test case 1: Should be APPROVED
    test_loan_assessment(test_case_approved, "EXPECTED: APPROVED (High income, low debt, excellent collateral)")
    
    # Test case 2: Should NEED REVIEW
    test_loan_assessment(test_case_needs_review, "EXPECTED: NEEDS REVIEW (Moderate profile, some concerns)")
    
    # Test case 3: Should be REJECTED
    test_loan_assessment(test_case_rejected, "EXPECTED: REJECTED (Low income, high debt, poor credit)")
    
    print(f"\n{'='*60}")
    print("üèÅ ALL TESTS COMPLETED")
    print(f"{'='*60}")

def test_single_case(case_type="approved"):
    """Test a single case type"""
    cases = {
        "approved": (test_case_approved, "APPROVED CASE"),
        "review": (test_case_needs_review, "NEEDS REVIEW CASE"),
        "rejected": (test_case_rejected, "REJECTED CASE")
    }
    
    if case_type in cases:
        test_data, case_name = cases[case_type]
        test_loan_assessment(test_data, case_name)
    else:
        print(f"‚ùå Unknown case type: {case_type}")
        print(f"Available types: {list(cases.keys())}")

if __name__ == "__main__":
    import sys
    
    print("üí∞ LOAN ASSESSMENT API TESTER")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        case_type = sys.argv[1].lower()
        print(f"üß™ Testing single case: {case_type}")
        test_single_case(case_type)
    else:
        print("üß™ Running all test cases...")
        run_all_tests()
    
    print("\nüìã USAGE:")
    print("  python test_loan_assessment.py           # Run all tests")
    print("  python test_loan_assessment.py approved  # Test approved case")
    print("  python test_loan_assessment.py review    # Test review case") 
    print("  python test_loan_assessment.py rejected  # Test rejected case")