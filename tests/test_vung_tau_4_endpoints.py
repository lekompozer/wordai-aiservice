import requests
import json
import base64
from PIL import Image, ImageDraw, ImageFont
import io
import time
from datetime import datetime

BASE_URL = "http://localhost:8000"

def get_expected_model(provider_name: str) -> str:
    """Tr·∫£ v·ªÅ model mong ƒë·ª£i cho t·ª´ng provider"""
    model_mapping = {
        "DeepSeek Standard": "deepseek-chat",
        "GPT-4o Standard": "gpt-4o", 
        "DeepSeek Reasoning": "deepseek-chat (enhanced prompt)",
        "GPT-4o Reasoning": "gpt-4o (has images) / o1-preview (text-only)"
    }
    return model_mapping.get(provider_name, "unknown")

def create_vung_tau_house_image():
    """T·∫°o h√¨nh ·∫£nh s·ªï h·ªìng nh√† 1 tr·ªát 2 l·∫ßu V≈©ng T√†u"""
    img = Image.new('RGB', (700, 900), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        font_title = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 18)
        font_large = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 14)
        font_normal = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 12)
        font_small = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 10)
    except:
        font_title = font_large = font_normal = font_small = ImageFont.load_default()
    
    # Header ch√≠nh th·ª©c
    draw.text((50, 30), "C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM", fill='black', font=font_large)
    draw.text((50, 55), "ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c", fill='black', font=font_normal)
    draw.text((450, 55), "S·ªë: VT-2024-005678", fill='black', font=font_normal)
    
    # Title
    draw.text((50, 100), "GI·∫§Y CH·ª®NG NH·∫¨N QUY·ªÄN S·ª¨ D·ª§NG ƒê·∫§T", fill='red', font=font_title)
    draw.text((50, 125), "QUY·ªÄN S·ªû H·ªÆU NH√Ä ·ªû V√Ä T√ÄI S·∫¢N KH√ÅC G·∫ÆN LI·ªÄN V·ªöI ƒê·∫§T", fill='red', font=font_title)
    draw.text((50, 150), "(S·ªî H·ªíNG)", fill='red', font=font_large)
    
    # Content v·ªõi th√¥ng tin ƒê·∫§T CH√ÇU PHA - C·∫¨P NH·∫¨T M·ªöI
    content = [
        "",
        "I. TH√îNG TIN CHUNG:",
        "- S·ªë v√†o s·ªï c·∫•p: VT-2024-005678",
        "- Ng√†y c·∫•p: 15/03/2024",
        "- C∆° quan c·∫•p: UBND TP. V≈©ng T√†u",
        "",
        "II. NG∆Ø·ªúI S·ª¨ D·ª§NG ƒê·∫§T:",
        "- H·ªç v√† t√™n: NGUY·ªÑN VƒÇN MINH",
        "- CCCD: 271234567890, ng√†y c·∫•p: 10/01/2020",
        "- ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫: ·∫§p T√¢n Trung, X√£ Ch√¢u Pha",
        "",
        "III. TH√îNG TIN V·ªÄ ƒê·∫§T:",
        "- ƒê·ªãa ch·ªâ th·ª≠a ƒë·∫•t: ·∫§p T√¢n Trung, X√£ Ch√¢u Pha, th·ªã x√£ Ph√∫ M·ªπ, t·ªânh B√† R·ªãa - V≈©ng T√†u",
        "- S·ªë t·ªù b·∫£n ƒë·ªì: 33; S·ªë th·ª≠a: 2007",
        "- Di·ªán t√≠ch: 1,855.3 m¬≤",
        "- M·ª•c ƒë√≠ch s·ª≠ d·ª•ng: ƒê·∫•t tr·ªìng c√¢y l√¢u nƒÉm",
        "- Th·ªùi h·∫°n s·ª≠ d·ª•ng: 2049",
        "- Ngu·ªìn g·ªëc: ƒê∆∞·ª£c t·∫∑ng cho ƒë·∫•t ƒë∆∞·ª£c C√¥ng nh·∫≠n QSDƒê nh∆∞ giao ƒë·∫•t kh√¥ng thu ti·ªÅn s·ª≠ d·ª•ng ƒë·∫•t",
        "- H√¨nh th·ª©c s·ª≠ d·ª•ng: S·ª≠ d·ª•ng ri√™ng",
        "",
        "IV. TH√îNG TIN V·ªÄ NH√Ä ·ªû V√Ä T√ÄI S·∫¢N KH√ÅC TR√äN ƒê·∫§T:",
        "- Lo·∫°i nh√† ·ªü: Kh√¥ng",
        "- C√¢y tr·ªìng: Kh√¥ng",
        "",
        "V. TH√îNG TIN KH√ÅC:",
        "- T√¨nh tr·∫°ng ph√°p l√Ω: S·ªï h·ªìng ch√≠nh ch·ªß, kh√¥ng tranh ch·∫•p",
        "- M·∫∑t ti·ªÅn: 17.6m (ƒë∆∞·ªùng nh·ª±a 8m)",
        "- ƒê·ªãa h√¨nh: M·∫∑t ti·ªÅn n·ªü h·∫≠u", 
        "- Khu v·ª±c: G·∫ßn trung t√¢m Ph√∫ M·ªπ, ti·ªÅm nƒÉng ph√°t tri·ªÉn cao",
        "",
        "Ghi ch√∫: ƒê·∫•t n√¥ng nghi·ªáp c√≥ ti·ªÅm nƒÉng chuy·ªÉn ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng"
    ]
    
    y_position = 180
    for line in content:
        if line.startswith("I.") or line.startswith("II.") or line.startswith("III.") or line.startswith("IV.") or line.startswith("V."):
            draw.text((50, y_position), line, fill='blue', font=font_large)
        elif line.startswith("-"):
            draw.text((70, y_position), line, fill='black', font=font_normal)
        elif line.startswith("  +"):
            draw.text((90, y_position), line, fill='black', font=font_small)
        elif line:
            draw.text((50, y_position), line, fill='black', font=font_normal)
        y_position += 20
    
    # Border v√† ch·ªØ k√Ω
    draw.rectangle([30, 20, 670, 880], outline='black', width=3)
    draw.rectangle([40, 30, 660, 870], outline='black', width=1)
    
    # Ch·ªØ k√Ω
    draw.text((450, 820), "TP. V≈©ng T√†u, ng√†y 15 th√°ng 03 nƒÉm 2024", fill='black', font=font_normal)
    draw.text((450, 840), "CH·ª¶ T·ªäCH UBND TP. V≈®NG T√ÄU", fill='black', font=font_normal)
    draw.text((450, 860), "(ƒê√£ k√Ω)", fill='black', font=font_normal)
    
    # Convert to base64
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    return base64.b64encode(img_buffer.getvalue()).decode()

def test_endpoint(endpoint: str, provider_name: str):
    """Test m·ªôt endpoint c·ª• th·ªÉ"""
    print(f"\n{'='*80}")
    print(f"TESTING: {provider_name.upper()}")
    print(f"Endpoint: {endpoint}")
    print(f"Expected Model: {get_expected_model(provider_name)}")
    print(f"Time: {datetime.now()}")
    print(f"{'='*80}")
    
    # T·∫°o image data
    image_base64 = create_vung_tau_house_image()
    
    # Request data
    request_data = {
        "question": "H√£y ƒë·ªãnh gi√° mi·∫øng ƒë·∫•t n√¥ng nghi·ªáp n√†y v√† ph√¢n t√≠ch chi ti·∫øt kh·∫£ nƒÉng th·∫ø ch·∫•p ng√¢n h√†ng ƒë·ªÉ vay th·∫ø ch·∫•p t·ªëi ƒëa. T√¥i mu·ªën bi·∫øt c√≥ th·ªÉ vay ƒë∆∞·ª£c bao nhi√™u ti·ªÅn t·ª´ b·∫•t ƒë·ªông s·∫£n n√†y.",
        "userId": f"test_{provider_name.replace('-', '_')}",
        "files": [
            {
                "filename": "so_hong_dat_chau_pha.png",
                "content_type": "image/png",
                "content": image_base64
            }
        ]
    }
    
    start_time = time.time()
    full_response = ""
    
    try:
        response = requests.post(
            f"{BASE_URL}{endpoint}",
            json=request_data,
            stream=True,
            timeout=180  # 3 minutes timeout
        )
        
        print(f"Response Status: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå Error: {response.text}")
            return None
        
        # Stream response
        for line in response.iter_lines():
            if line:
                line = line.decode('utf-8')
                if line.startswith('data: '):
                    try:
                        data = json.loads(line[6:])
                        if "chunk" in data:
                            chunk = data["chunk"]
                            print(chunk, end="", flush=True)
                            full_response += chunk
                        elif "done" in data:
                            end_time = time.time()
                            duration = end_time - start_time
                            print(f"\n\n‚úÖ COMPLETED")
                            print(f"Provider: {data.get('provider', 'unknown')}")
                            print(f"Mode: {data.get('mode', 'unknown')}")
                            print(f"Duration: {duration:.2f} seconds")
                            print(f"Response length: {len(full_response)} characters")
                            break
                        elif "error" in data:
                            print(f"\n‚ùå ERROR: {data['error']}")
                            return None
                    except json.JSONDecodeError:
                        continue
        
        return {
            "provider": provider_name,
            "response": full_response,
            "duration": duration,
            "length": len(full_response)
        }
        
    except Exception as e:
        print(f"\n‚ùå Exception: {e}")
        return None

def run_comprehensive_test():
    """Ch·∫°y test t·∫•t c·∫£ 4 endpoints v√† so s√°nh"""
    
    print("üè† COMPREHENSIVE REAL ESTATE VALUATION TEST")
    print("Property: Ch√≠nh ch·ªß, b√°n ƒë·∫•t Ch√¢u Pha B√† Ria, DT 1855m2, m·∫∑t ti·ªÅn ƒë∆∞·ªùng 8m")
    print(f"Test started at: {datetime.now()}")
    
    # ƒê·ªãnh nghƒ©a 4 endpoints
    endpoints = [
        ("/real-estate/deepseek", "DeepSeek Standard"),
        ("/real-estate/gpt4o", "GPT-4o Standard"),
        ("/real-estate/deepseek-reasoning", "DeepSeek Reasoning"),
        ("/real-estate/gpt4o-reasoning", "GPT-4o Reasoning")
    ]
    
    results = []
    
    # Test t·ª´ng endpoint
    for endpoint, provider_name in endpoints:
        result = test_endpoint(endpoint, provider_name)
        if result:
            results.append(result)
        
        # Ngh·ªâ 2 gi√¢y gi·ªØa c√°c test
        time.sleep(2)
    
    # Summary v√† comparison
    print(f"\n{'='*100}")
    print("SUMMARY & COMPARISON")
    print(f"{'='*100}")
    
    if results:
        print(f"{'Provider':<20} {'Duration':<12} {'Length':<10} {'Quality Indicators'}")
        print("-" * 80)
        
        for result in results:
            # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng d·ª±a tr√™n keywords
            quality_keywords = [
                'tri·ªáu', 't·ª∑', 'gi√° tr·ªã', 'th·∫ø ch·∫•p', 'vay', 'l√£i su·∫•t', 
                'th·∫©m ƒë·ªãnh', 'r·ªßi ro', 'khuy·∫øn ngh·ªã', 'ph√¢n t√≠ch'
            ]
            quality_score = sum(1 for kw in quality_keywords if kw.lower() in result['response'].lower())
            
            print(f"{result['provider']:<20} {result['duration']:<12.2f} {result['length']:<10} {quality_score}/{len(quality_keywords)}")
        
        # T√¨m provider t·ªët nh·∫•t
        best_reasoning = max([r for r in results if 'reasoning' in r['provider'].lower()], 
                           key=lambda x: len(x['response']), default=None)
        fastest = min(results, key=lambda x: x['duration'])
        longest = max(results, key=lambda x: x['length'])
        
        print(f"\nüèÜ WINNERS:")
        if best_reasoning:
            print(f"üß† Best Reasoning: {best_reasoning['provider']}")
        print(f"‚ö° Fastest: {fastest['provider']} ({fastest['duration']:.2f}s)")
        print(f"üìù Most Detailed: {longest['provider']} ({longest['length']} chars)")
        
        # Recommendations
        print(f"\nüí° RECOMMENDATIONS:")
        print("- For quick valuation: DeepSeek Standard")
        print("- For balanced analysis: GPT-4o Standard") 
        print("- For deep analysis: GPT-4o Reasoning")
        print("- For budget option: DeepSeek Reasoning")
        
    else:
        print("‚ùå No successful tests completed")
    
    print(f"\nTest completed at: {datetime.now()}")

def test_single_endpoint():
    """Test m·ªôt endpoint ƒë∆°n l·∫ª ƒë·ªÉ debug"""
    print("üîç SINGLE ENDPOINT TEST")
    
    while True:
        print("\nAvailable endpoints:")
        print("1. /real-estate/deepseek")
        print("2. /real-estate/gpt4o")  
        print("3. /real-estate/deepseek-reasoning")
        print("4. /real-estate/gpt4o-reasoning")
        print("5. Exit")
        
        choice = input("\nSelect endpoint (1-5): ").strip()
        
        if choice == "5":
            break
        elif choice in ["1", "2", "3", "4"]:
            endpoints = [
                "/real-estate/deepseek",
                "/real-estate/gpt4o", 
                "/real-estate/deepseek-reasoning",
                "/real-estate/gpt4o-reasoning"
            ]
            names = [
                "DeepSeek Standard",
                "GPT-4o Standard",
                "DeepSeek Reasoning", 
                "GPT-4o Reasoning"
            ]
            
            endpoint = endpoints[int(choice) - 1]
            name = names[int(choice) - 1]
            
            test_endpoint(endpoint, name)
        else:
            print("‚ùå Invalid choice")

if __name__ == "__main__":
    print("üè† V≈®NG T√ÄU REAL ESTATE VALUATION TEST SUITE")
    print(f"Server: {BASE_URL}")
    
    while True:
        print("\n" + "="*50)
        print("TEST OPTIONS:")
        print("1. Run comprehensive test (all 4 endpoints)")
        print("2. Test single endpoint")
        print("3. Exit")
        
        choice = input("\nSelect option (1-3): ").strip()
        
        if choice == "1":
            run_comprehensive_test()
        elif choice == "2":
            test_single_endpoint()
        elif choice == "3":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice")

