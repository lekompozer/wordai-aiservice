"""
Demo Script - Test ProductCatalogService th·ª±c t·∫ø
K·ªãch b·∫£n demo ƒë·∫ßy ƒë·ªß cho h·ªá th·ªëng qu·∫£n l√Ω s·∫£n ph·∫©m n·ªôi b·ªô

Usage:
python demo_product_catalog.py
"""

import asyncio
import json
from datetime import datetime
import sys
import os

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.product_catalog_service import get_product_catalog_service


async def demo_restaurant_scenario():
    """Demo k·ªãch b·∫£n nh√† h√†ng - ƒëƒÉng k√Ω v√† qu·∫£n l√Ω m√≥n ƒÉn"""
    print("\nüçú === DEMO RESTAURANT SCENARIO ===")

    service = await get_product_catalog_service()
    company_id = "restaurant_pho_24"

    print(f"üìã Company ID: {company_id}")

    # Sample menu items
    menu_items = [
        {
            "name": "Ph·ªü B√≤ T√°i",
            "description": "Ph·ªü b√≤ t√°i n·∫°m ch√≠n v·ªõi b√°nh ph·ªü t∆∞∆°i",
            "price": 65000,
            "quantity": 50,
            "category": "M√≥n ch√≠nh",
            "tags": ["ph·ªü", "b√≤", "n∆∞·ªõc d√πng"],
            "currency": "VND",
        },
        {
            "name": "Ph·ªü G√†",
            "description": "Ph·ªü g√† th∆°m ngon v·ªõi th·ªãt g√† t∆∞∆°i",
            "price": 60000,
            "quantity": 30,
            "category": "M√≥n ch√≠nh",
            "tags": ["ph·ªü", "g√†"],
            "currency": "VND",
        },
        {
            "name": "B√∫n Ch·∫£",
            "description": "B√∫n ch·∫£ H√† N·ªôi v·ªõi th·ªãt n∆∞·ªõng th∆°m",
            "price": 70000,
            "quantity": 25,
            "category": "M√≥n ch√≠nh",
            "tags": ["b√∫n", "th·ªãt n∆∞·ªõng"],
            "currency": "VND",
        },
        {
            "name": "Ch·∫£ C√° L√£ V·ªçng",
            "description": "Ch·∫£ c√° truy·ªÅn th·ªëng v·ªõi b√°nh tr√°ng",
            "price": 120000,
            "quantity": 0,  # Out of stock
            "category": "ƒê·∫∑c s·∫£n",
            "tags": ["c√°", "ƒë·∫∑c s·∫£n"],
            "currency": "VND",
        },
    ]

    # Register all menu items
    print("\nüìù ƒêƒÉng k√Ω c√°c m√≥n ƒÉn...")
    registered_items = []

    for item_data in menu_items:
        result = await service.register_item(
            item_data=item_data, company_id=company_id, item_type="product"
        )
        registered_items.append(result)

        if "product_id" in result:
            print(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω: {result['name']} (ID: {result['product_id']})")
        else:
            print(f"‚ùå L·ªói ƒëƒÉng k√Ω: {result['name']}")

    # Get catalog for AI prompt - t√¨m ph·ªü
    print("\nü§ñ AI Prompt Data - T√¨m 'ph·ªü':")
    pho_catalog = await service.get_catalog_for_prompt(
        company_id=company_id, query="ph·ªü", limit=5
    )

    print(json.dumps(pho_catalog, indent=2, ensure_ascii=False))

    # Get full catalog
    print("\nüìã Full Catalog for AI:")
    full_catalog = await service.get_catalog_for_prompt(
        company_id=company_id, query="", limit=10
    )

    for item in full_catalog:
        status = "‚úÖ" if item["quantity_raw"] > 0 else "‚ùå"
        print(
            f"{status} {item['name']}: {item['quantity_display']} - {item['price_display']}"
        )

    # Test search by name
    print("\nüîç T√¨m s·∫£n ph·∫©m theo t√™n...")
    found_pho = await service.find_by_name(company_id, "ph·ªü b√≤")
    if found_pho:
        print(
            f"‚úÖ T√¨m th·∫•y: {found_pho['name']} (ID: {found_pho.get('product_id', 'N/A')})"
        )

    # Update quantity - kh√°ch ƒë·∫∑t 2 t√¥ ph·ªü b√≤
    if registered_items[0].get("product_id"):
        product_id = registered_items[0]["product_id"]
        print(f"\nüì¶ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng (b√°n 2 t√¥ ph·ªü b√≤)...")

        # Current quantity
        current_item = await service.get_by_id(product_id)
        if current_item:
            current_qty = current_item.get("quantity", 0)
            new_qty = current_qty - 2

            success = await service.update_quantity(product_id, new_qty)
            if success:
                print(f"‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: {current_qty} ‚Üí {new_qty}")
            else:
                print("‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng")

    # Get company statistics
    print("\nüìä Th·ªëng k√™ danh m·ª•c:")
    stats = await service.get_company_stats(company_id)
    print(f"- S·∫£n ph·∫©m: {stats['products']}")
    print(f"- D·ªãch v·ª•: {stats['services']}")
    print(f"- T·ªïng: {stats['total']}")


async def demo_hotel_scenario():
    """Demo k·ªãch b·∫£n kh√°ch s·∫°n - ƒëƒÉng k√Ω ph√≤ng v√† d·ªãch v·ª•"""
    print("\nüè® === DEMO HOTEL SCENARIO ===")

    service = await get_product_catalog_service()
    company_id = "hotel_sunrise_danang"

    print(f"üìã Company ID: {company_id}")

    # Hotel rooms and services
    hotel_items = [
        {
            "name": "Ph√≤ng Deluxe Double",
            "description": "Ph√≤ng deluxe view bi·ªÉn v·ªõi 2 gi∆∞·ªùng ƒë√¥i",
            "price": 1200000,
            "quantity": 5,  # 5 ph√≤ng tr·ªëng
            "category": "Accommodation",
            "tags": ["deluxe", "sea view", "double bed"],
            "currency": "VND",
        },
        {
            "name": "Ph√≤ng VIP Suite",
            "description": "Suite cao c·∫•p v·ªõi ban c√¥ng ri√™ng",
            "price": 2500000,
            "quantity": 2,
            "category": "Accommodation",
            "tags": ["vip", "suite", "balcony"],
            "currency": "VND",
        },
        {
            "name": "Massage Therapy",
            "description": "D·ªãch v·ª• massage th∆∞ gi√£n 60 ph√∫t",
            "price": 500000,
            "quantity": -1,  # Service kh√¥ng track quantity
            "category": "Spa Services",
            "tags": ["massage", "therapy", "relaxation"],
            "currency": "VND",
        },
        {
            "name": "Airport Transfer",
            "description": "D·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay",
            "price": 300000,
            "quantity": -1,
            "category": "Transportation",
            "tags": ["airport", "transfer", "transport"],
            "currency": "VND",
        },
    ]

    print("\nüìù ƒêƒÉng k√Ω rooms & services...")
    registered_services = []

    for item_data in hotel_items:
        # Determine type based on category
        item_type = (
            "service"
            if item_data["category"] in ["Spa Services", "Transportation"]
            else "product"
        )

        result = await service.register_item(
            item_data=item_data, company_id=company_id, item_type=item_type
        )
        registered_services.append(result)

        id_key = "service_id" if item_type == "service" else "product_id"
        if id_key in result:
            print(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω: {result['name']} (ID: {result[id_key]})")

    # Get catalog for availability checking
    print("\nüè® Hotel Availability for AI:")
    availability_data = await service.get_catalog_for_prompt(
        company_id=company_id, query="ph√≤ng", limit=5
    )

    for item in availability_data:
        if item["quantity_raw"] > 0:
            print(
                f"‚úÖ {item['name']}: {item['quantity_display']} - {item['price_display']}"
            )
        elif item["quantity_raw"] == 0:
            print(f"‚ùå {item['name']}: H·∫øt ph√≤ng - {item['price_display']}")
        else:
            print(
                f"üîÑ {item['name']}: {item['quantity_display']} - {item['price_display']}"
            )

    # Test booking simulation - book 1 deluxe room
    print("\nüìã Booking Simulation...")
    room_found = await service.find_by_name(company_id, "ph√≤ng deluxe")
    if room_found and room_found.get("quantity", 0) > 0:
        room_id = room_found.get("product_id")
        current_qty = room_found.get("quantity", 0)

        if room_id:
            success = await service.update_quantity(room_id, current_qty - 1)
            if success:
                print(f"‚úÖ ƒê·∫∑t ph√≤ng th√†nh c√¥ng: {room_found['name']}")
                print(f"   C√≤n l·∫°i: {current_qty - 1} ph√≤ng")

    # Company stats
    print("\nüìä Hotel Statistics:")
    stats = await service.get_company_stats(company_id)
    print(f"- Ph√≤ng/S·∫£n ph·∫©m: {stats['products']}")
    print(f"- D·ªãch v·ª•: {stats['services']}")
    print(f"- T·ªïng: {stats['total']}")


async def demo_ai_prompt_integration():
    """Demo t√≠ch h·ª£p d·ªØ li·ªáu catalog v√†o AI prompt"""
    print("\nü§ñ === DEMO AI PROMPT INTEGRATION ===")

    service = await get_product_catalog_service()
    company_id = "restaurant_pho_24"

    # Simulate AI query scenarios
    scenarios = [
        {
            "user_query": "C√≥ ph·ªü g√¨ kh√¥ng?",
            "search_term": "ph·ªü",
            "description": "User h·ªèi v·ªÅ m√≥n ph·ªü",
        },
        {
            "user_query": "M√≥n n√†o c√≤n h√†ng?",
            "search_term": "",
            "description": "User h·ªèi v·ªÅ t√¨nh tr·∫°ng kho",
        },
        {
            "user_query": "B√∫n ch·∫£ bao nhi·ªÅu ti·ªÅn?",
            "search_term": "b√∫n ch·∫£",
            "description": "User h·ªèi gi√° m√≥n b√∫n ch·∫£",
        },
    ]

    for scenario in scenarios:
        print(f"\nüìù Scenario: {scenario['description']}")
        print(f"   User: '{scenario['user_query']}'")

        # Get catalog data for AI prompt
        catalog_data = await service.get_catalog_for_prompt(
            company_id=company_id, query=scenario["search_term"], limit=3
        )

        print("   AI Context Data:")
        if catalog_data:
            for item in catalog_data:
                availability = "C√≤n h√†ng" if item["quantity_raw"] > 0 else "H·∫øt h√†ng"
                print(f"   - {item['name']}: {availability}, {item['price_display']}")
        else:
            print("   - Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p")


async def main():
    """Run all demo scenarios"""
    print("üöÄ ProductCatalogService Demo Started")
    print("=" * 50)

    try:
        # Run restaurant demo
        await demo_restaurant_scenario()

        # Run hotel demo
        await demo_hotel_scenario()

        # Run AI integration demo
        await demo_ai_prompt_integration()

        print("\n" + "=" * 50)
        print("‚úÖ Demo ho√†n th√†nh th√†nh c√¥ng!")
        print(
            "üîç Ki·ªÉm tra MongoDB collection 'internal_products_catalog' ƒë·ªÉ xem d·ªØ li·ªáu"
        )

    except Exception as e:
        print(f"\n‚ùå Demo error: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    # Run async demo
    asyncio.run(main())
