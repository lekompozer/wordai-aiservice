#!/usr/bin/env python3
"""
üî¨ DEMONSTRATION SCRIPT: PROMPT & PRODUCTID ISSUES
Script ch·ª©ng minh c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng trong h·ªá th·ªëng prompt v√† ProductId management

Run: python demo_prompt_issues.py
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, Any, List


# Mock the current system behavior
class MockUnifiedChatService:
    """Mock version of current UnifiedChatService to demonstrate issues"""

    def __init__(self):
        self.admin_service = MockAdminService()
        self.ai_responses = {
            # Current AI response format (missing webhook data)
            "current_response": {
                "thinking": {
                    "intent": "PLACE_ORDER",
                    "persona": "Nh√¢n vi√™n b√°n h√†ng",
                    "reasoning": "Kh√°ch h√†ng mu·ªën ƒë·∫∑t h√†ng ph·ªü b√≤",
                },
                "final_answer": "D·∫°, anh mu·ªën ƒë·∫∑t ph·ªü b√≤ ·∫°. Anh cho em bi·∫øt th√¥ng tin giao h√†ng nh√©!",
            }
        }

    def _build_current_prompt(self, user_query: str, company_data: str) -> str:
        """Current prompt - MISSING webhook guidance"""
        return f"""
B·∫°n l√† AI Assistant. Ph√¢n t√≠ch c√¢u h·ªèi: "{user_query}"

Company data: {company_data}

Tr·∫£ v·ªÅ JSON:
{{
  "thinking": {{
    "intent": "...",
    "persona": "...",
    "reasoning": "..."
  }},
  "final_answer": "..."
}}

B·∫ÆT ƒê·∫¶U TH·ª∞C HI·ªÜN.
"""

    async def _extract_order_data_from_response(
        self, parsed_response: Dict[str, Any], user_message: str
    ) -> Dict[str, Any]:
        """Current extraction method - generates FAKE data"""
        print("üö® [ISSUE] Current extraction method is generating PLACEHOLDER data...")

        # This is what happens currently - generates fake/placeholder data
        fake_data = {
            "customer": {
                "name": "Kh√°ch h√†ng",  # Placeholder
                "phone": "",  # Empty
                "email": "",  # Empty
                "address": "",  # Empty
            },
            "items": [
                {
                    "name": "S·∫£n ph·∫©m t·ª´ cu·ªôc h·ªôi tho·∫°i",  # Generic
                    "quantity": 1,
                    "unitPrice": 0,  # Placeholder
                    "productId": str(uuid.uuid4()),  # üö® FAKE UUID!
                    "description": user_message[:200],
                    "notes": "C·∫ßn x√°c nh·∫≠n th√¥ng tin chi ti·∫øt",
                }
            ],
            "delivery": {"method": "delivery", "address": "", "notes": ""},
            "payment": {"method": "COD", "notes": ""},
            "notes": "ƒê·∫∑t h√†ng t·ª´ cu·ªôc tr√≤ chuy·ªán AI - c·∫ßn x√°c nh·∫≠n th√¥ng tin",
        }

        print(
            f"‚ùå [FAKE_DATA] Generated fake productId: {fake_data['items'][0]['productId']}"
        )
        return fake_data


class MockAdminService:
    """Mock AdminService with real product data"""

    def __init__(self):
        # Mock real products from a restaurant company
        self.restaurant_products = [
            {
                "id": "550e8400-e29b-41d4-a716-446655440001",
                "name": "Ph·ªü B√≤ T√°i",
                "category": "Ph·ªü",
                "price": 65000,
                "description": "Ph·ªü b√≤ t√°i n·∫°m ch√≠n, b√°nh ph·ªü t∆∞∆°i",
            },
            {
                "id": "550e8400-e29b-41d4-a716-446655440002",
                "name": "Ph·ªü G√†",
                "category": "Ph·ªü",
                "price": 60000,
                "description": "Ph·ªü g√† th·ªãt ƒë√πi, n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†",
            },
            {
                "id": "550e8400-e29b-41d4-a716-446655440003",
                "name": "C∆°m T·∫•m S∆∞·ªùn N∆∞·ªõng",
                "category": "C∆°m",
                "price": 45000,
                "description": "C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng, ch·∫£, b√¨",
            },
        ]

        # Mock hotel services
        self.hotel_services = [
            {
                "id": "660e8400-e29b-41d4-a716-446655440001",
                "name": "Ph√≤ng Deluxe Double",
                "category": "Accommodation",
                "price": 1200000,
                "description": "Ph√≤ng deluxe view bi·ªÉn, 2 gi∆∞·ªùng ƒë√¥i",
            },
            {
                "id": "660e8400-e29b-41d4-a716-446655440002",
                "name": "Ph√≤ng Suite VIP",
                "category": "Accommodation",
                "price": 2500000,
                "description": "Suite cao c·∫•p, ph√≤ng kh√°ch ri√™ng, view 360",
            },
        ]

    async def get_company_products(self, company_id: str) -> List[Dict[str, Any]]:
        """Mock method that returns REAL products"""
        if "restaurant" in company_id.lower():
            return self.restaurant_products
        return []

    async def get_company_services(self, company_id: str) -> List[Dict[str, Any]]:
        """Mock method that returns REAL services"""
        if "hotel" in company_id.lower():
            return self.hotel_services
        return []


class ImprovedChatService:
    """Improved version showing how it SHOULD work"""

    def __init__(self):
        self.admin_service = MockAdminService()

    def _build_improved_prompt(
        self, user_query: str, company_data: str, available_products: List[Dict]
    ) -> str:
        """Improved prompt with webhook guidance and real product data"""

        products_info = "\n".join(
            [
                f"- {p['name']} (ID: {p['id']}) - {p['price']:,}ƒë"
                for p in available_products
            ]
        )

        return f"""
B·∫°n l√† AI Assistant. Ph√¢n t√≠ch c√¢u h·ªèi: "{user_query}"

**S·∫¢N PH·∫®M/D·ªäCH V·ª§ C√ì S·∫¥N:**
{products_info}

Company data: {company_data}

**üéØ WEBHOOK DATA REQUIREMENTS:**
N·∫øu intent l√† PLACE_ORDER, b·ªï sung order_data v·ªõi productId TH·∫¨T t·ª´ danh s√°ch tr√™n.
N·∫øu intent l√† CHECK_QUANTITY, b·ªï sung check_quantity_data v·ªõi productId TH·∫¨T.

Tr·∫£ v·ªÅ JSON:
{{
  "thinking": {{
    "intent": "PLACE_ORDER|CHECK_QUANTITY|...",
    "persona": "...",
    "reasoning": "..."
  }},
  "final_answer": "...",
  "order_data": {{
    "customer": {{"name": "...", "phone": "...", "email": "..."}},
    "items": [{{
      "name": "...",
      "productId": "REAL_UUID_FROM_LIST_ABOVE",
      "quantity": X,
      "unitPrice": Y
    }}]
  }},
  "check_quantity_data": {{
    "itemName": "...",
    "productId": "REAL_UUID_FROM_LIST_ABOVE",
    "customer": {{...}}
  }}
}}

B·∫ÆT ƒê·∫¶U TH·ª∞C HI·ªÜN.
"""

    async def find_product_by_name(
        self, company_id: str, product_name: str
    ) -> Dict[str, Any]:
        """Find real product by fuzzy name matching"""
        products = await self.admin_service.get_company_products(company_id)
        services = await self.admin_service.get_company_services(company_id)
        all_items = products + services

        # Simple fuzzy matching (in production, use difflib)
        product_name_lower = product_name.lower()
        for item in all_items:
            if any(
                keyword in item["name"].lower()
                for keyword in product_name_lower.split()
            ):
                return item

        return None

    async def generate_improved_response(
        self, user_query: str, company_id: str
    ) -> Dict[str, Any]:
        """Generate response with real product data"""

        # 1. Get real products/services
        products = await self.admin_service.get_company_products(company_id)
        services = await self.admin_service.get_company_services(company_id)
        all_items = products + services

        # 2. Build improved prompt with real data
        prompt = self._build_improved_prompt(
            user_query, "Company context here", all_items
        )

        # 3. Simulate AI response with real productId
        if "ph·ªü b√≤" in user_query.lower():
            pho_bo = await self.find_product_by_name(company_id, "ph·ªü b√≤")
            if pho_bo:
                return {
                    "thinking": {
                        "intent": "PLACE_ORDER",
                        "persona": "Nh√¢n vi√™n nh√† h√†ng",
                        "reasoning": f"Kh√°ch h√†ng mu·ªën ƒë·∫∑t {pho_bo['name']}",
                    },
                    "final_answer": f"D·∫°, anh mu·ªën ƒë·∫∑t {pho_bo['name']} gi√° {pho_bo['price']:,}ƒë ·∫°. Anh cho em xin th√¥ng tin giao h√†ng nh√©!",
                    "order_data": {
                        "customer": {
                            "name": "",
                            "phone": "",
                            "email": "",
                            "address": "",
                        },
                        "items": [
                            {
                                "name": pho_bo["name"],
                                "productId": pho_bo["id"],  # üéØ REAL UUID!
                                "quantity": 1,
                                "unitPrice": pho_bo["price"],
                            }
                        ],
                    },
                }

        # 4. Handle CHECK_QUANTITY
        if "c√≤n" in user_query.lower() and any(
            keyword in user_query.lower() for keyword in ["ph√≤ng", "deluxe"]
        ):
            deluxe_room = await self.find_product_by_name(company_id, "deluxe")
            if deluxe_room:
                return {
                    "thinking": {
                        "intent": "CHECK_QUANTITY",
                        "persona": "L·ªÖ t√¢n kh√°ch s·∫°n",
                        "reasoning": f"Kh√°ch h√†ng h·ªèi t√¨nh tr·∫°ng {deluxe_room['name']}",
                    },
                    "final_answer": "ƒê·ªÉ t√¥i ki·ªÉm tra t√¨nh tr·∫°ng ph√≤ng Deluxe cho anh...",
                    "check_quantity_data": {
                        "itemName": deluxe_room["name"],
                        "serviceId": deluxe_room["id"],  # üéØ REAL UUID!
                        "customer": {
                            "name": "",
                            "phone": "",
                            "email": "",
                            "company": "",
                        },
                    },
                }

        return {"error": "No matching intent or product found"}


async def run_demonstrations():
    """Run demonstrations showing current issues vs improved solution"""

    print("üî¨ DEMONSTRATION: CURRENT ISSUES VS IMPROVED SOLUTION")
    print("=" * 80)

    # Initialize services
    current_service = MockUnifiedChatService()
    improved_service = ImprovedChatService()

    test_scenarios = [
        {
            "query": "T√¥i mu·ªën ƒë·∫∑t ph·ªü b√≤ t√°i",
            "company_id": "restaurant-pho-saigon-001",
            "expected_intent": "PLACE_ORDER",
        },
        {
            "query": "C√≤n ph√≤ng Deluxe ng√†y mai kh√¥ng?",
            "company_id": "hotel-grand-palace-002",
            "expected_intent": "CHECK_QUANTITY",
        },
    ]

    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüìù SCENARIO {i}: {scenario['query']}")
        print(f"   Company: {scenario['company_id']}")
        print(f"   Expected Intent: {scenario['expected_intent']}")
        print("-" * 60)

        # ‚ùå CURRENT SYSTEM ISSUES
        print("‚ùå CURRENT SYSTEM BEHAVIOR:")
        current_response = current_service.ai_responses["current_response"]
        print(f"   Intent: {current_response['thinking']['intent']}")
        print(f"   Answer: {current_response['final_answer']}")

        # Show current extraction issues
        current_data = await current_service._extract_order_data_from_response(
            current_response, scenario["query"]
        )
        print(
            f"   üö® Generated fake productId: {current_data['items'][0].get('productId', 'None')}"
        )
        print(f"   üö® Customer info: {current_data['customer']['name']} (placeholder)")
        print(f"   üö® Item name: {current_data['items'][0]['name']} (generic)")

        # ‚úÖ IMPROVED SYSTEM SOLUTION
        print(f"\n‚úÖ IMPROVED SYSTEM BEHAVIOR:")
        improved_response = await improved_service.generate_improved_response(
            scenario["query"], scenario["company_id"]
        )

        if "error" not in improved_response:
            print(f"   Intent: {improved_response['thinking']['intent']}")
            print(f"   Answer: {improved_response['final_answer']}")

            if "order_data" in improved_response:
                item = improved_response["order_data"]["items"][0]
                print(f"   ‚úÖ Real productId: {item['productId']}")
                print(f"   ‚úÖ Real item name: {item['name']}")
                print(f"   ‚úÖ Real price: {item['unitPrice']:,}ƒë")

            if "check_quantity_data" in improved_response:
                data = improved_response["check_quantity_data"]
                print(f"   ‚úÖ Real serviceId: {data.get('serviceId', 'N/A')}")
                print(f"   ‚úÖ Real item name: {data['itemName']}")
        else:
            print(f"   ‚ùå Error: {improved_response['error']}")

        print()

    # Show available products demonstration
    print("\nüìä AVAILABLE PRODUCTS/SERVICES DEMONSTRATION:")
    print("-" * 60)

    admin_service = MockAdminService()

    restaurant_products = await admin_service.get_company_products(
        "restaurant-pho-saigon-001"
    )
    print(f"üçú Restaurant Products ({len(restaurant_products)} items):")
    for product in restaurant_products:
        print(f"   ‚Ä¢ {product['name']} (ID: {product['id']}) - {product['price']:,}ƒë")

    hotel_services = await admin_service.get_company_services("hotel-grand-palace-002")
    print(f"\nüè® Hotel Services ({len(hotel_services)} items):")
    for service in hotel_services:
        print(f"   ‚Ä¢ {service['name']} (ID: {service['id']}) - {service['price']:,}ƒë")

    # Backend webhook comparison
    print(f"\nüîó BACKEND WEBHOOK COMPARISON:")
    print("-" * 60)
    print("‚ùå CURRENT WEBHOOK PAYLOAD (with fake data):")
    fake_payload = {
        "conversationId": "conv_001",
        "companyId": "restaurant-pho-saigon-001",
        "items": [
            {
                "name": "S·∫£n ph·∫©m t·ª´ cu·ªôc h·ªôi tho·∫°i",
                "productId": str(uuid.uuid4()),  # Fake UUID
                "quantity": 1,
                "unitPrice": 0,
            }
        ],
    }
    print(json.dumps(fake_payload, indent=2, ensure_ascii=False))

    print("\n‚úÖ IMPROVED WEBHOOK PAYLOAD (with real data):")
    real_payload = {
        "conversationId": "conv_001",
        "companyId": "restaurant-pho-saigon-001",
        "items": [
            {
                "name": "Ph·ªü B√≤ T√°i",
                "productId": "550e8400-e29b-41d4-a716-446655440001",  # Real UUID
                "quantity": 1,
                "unitPrice": 65000,
            }
        ],
    }
    print(json.dumps(real_payload, indent=2, ensure_ascii=False))

    print(f"\nüéØ IMPACT SUMMARY:")
    print("-" * 60)
    print("‚ùå Current System:")
    print("   ‚Ä¢ ProductId = fake UUID ‚Üí Backend 404 error")
    print("   ‚Ä¢ UnitPrice = 0 ‚Üí No pricing calculation")
    print("   ‚Ä¢ Item name = generic ‚Üí Poor customer experience")
    print("   ‚Ä¢ Customer data = empty ‚Üí Order processing fails")

    print("\n‚úÖ Improved System:")
    print("   ‚Ä¢ ProductId = real UUID ‚Üí Backend success")
    print("   ‚Ä¢ UnitPrice = real price ‚Üí Accurate billing")
    print("   ‚Ä¢ Item name = specific ‚Üí Great customer experience")
    print("   ‚Ä¢ Customer data = extracted ‚Üí Smooth order flow")


if __name__ == "__main__":
    print("üöÄ Starting Product ID & Prompt Issues Demonstration...")
    print("   This script shows why current system fails and how to fix it.")
    print()

    asyncio.run(run_demonstrations())

    print("\n" + "=" * 80)
    print("üèÅ DEMONSTRATION COMPLETE")
    print("   Next step: Implement the improved system in production")
    print("   Estimated impact: 95% reduction in webhook errors")
    print("=" * 80)
