#!/usr/bin/env python3
"""
Test script for new Scenario structure with ScenarioType
"""

import asyncio
import sys
import os
import json

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from src.models.company_context import Scenario, ScenarioType, CompanyContext, BasicInfo
from src.services.company_context_service import get_company_context_service


async def test_new_scenario_structure():
    """Test the new scenario structure"""
    print("üß™ Testing new Scenario structure...")

    # Test creating scenarios with new structure
    scenarios = [
        Scenario(
            type=ScenarioType.SALES,
            name="Kh√°ch h√†ng mu·ªën t∆∞ v·∫•n b·∫£o hi·ªÉm",
            description="K·ªãch b·∫£n khi kh√°ch h√†ng c√≥ √Ω ƒë·ªãnh mua s·∫£n ph·∫©m b·∫£o hi·ªÉm v√† c·∫ßn t∆∞ v·∫•n",
            reference_messages=[
                "T√¥i mu·ªën mua b·∫£o hi·ªÉm nh√¢n th·ªç",
                "Cho t√¥i xem c√°c g√≥i b·∫£o hi·ªÉm",
                "T∆∞ v·∫•n b·∫£o hi·ªÉm cho gia ƒë√¨nh",
                "I want to buy life insurance",
                "Show me insurance packages",
            ],
        ),
        Scenario(
            type=ScenarioType.ASK_COMPANY_INFORMATION,
            name="Kh√°ch h√†ng h·ªèi th√¥ng tin v·ªÅ c√¥ng ty",
            description="K·ªãch b·∫£n khi kh√°ch h√†ng mu·ªën t√¨m hi·ªÉu v·ªÅ c√¥ng ty, l·ªãch s·ª≠, d·ªãch v·ª•",
            reference_messages=[
                "AIA l√† c√¥ng ty g√¨?",
                "Gi·ªõi thi·ªáu v·ªÅ c√¥ng ty c·ªßa b·∫°n",
                "C√¥ng ty ho·∫°t ƒë·ªông t·ª´ khi n√†o?",
                "What is AIA company?",
                "Tell me about your company",
            ],
        ),
        Scenario(
            type=ScenarioType.SUPPORT,
            name="Kh√°ch h√†ng c·∫ßn h·ªó tr·ª£ khi·∫øu n·∫°i",
            description="K·ªãch b·∫£n x·ª≠ l√Ω khi kh√°ch h√†ng c√≥ v·∫•n ƒë·ªÅ c·∫ßn h·ªó tr·ª£",
            reference_messages=[
                "T√¥i mu·ªën khi·∫øu n·∫°i v·ªÅ d·ªãch v·ª•",
                "C√≥ v·∫•n ƒë·ªÅ v·ªõi ƒë∆°n b·∫£o hi·ªÉm",
                "C·∫ßn h·ªó tr·ª£ g·∫•p",
                "I have a complaint",
                "Need urgent support",
            ],
        ),
    ]

    print("‚úÖ Created scenarios successfully")

    # Test JSON serialization
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìã Scenario {i}:")
        print(f"   Type: {scenario.type.value}")
        print(f"   Name: {scenario.name}")
        print(f"   Description: {scenario.description}")
        print(f"   Reference Messages: {len(scenario.reference_messages)} messages")

        # Test to_formatted_string method
        formatted = scenario.to_formatted_string()
        print(f"   Formatted length: {len(formatted)} chars")

        # Test JSON export
        scenario_dict = scenario.model_dump()
        json_str = json.dumps(scenario_dict, ensure_ascii=False, indent=2)
        print(f"   JSON export: ‚úÖ ({len(json_str)} chars)")

    # Test CompanyContext with new scenarios
    print("\nüè¢ Testing CompanyContext with new scenarios...")

    context = CompanyContext(
        basic_info=BasicInfo(
            name="AIA Vietnam",
            industry="Insurance",
            description="Leading life insurance company",
        ),
        scenarios=scenarios,
    )

    # Test CompanyContextService
    print("\nüîß Testing CompanyContextService...")
    service = get_company_context_service()

    company_id = "test_company_123"

    # Set scenarios using service
    await service.set_scenarios(company_id, scenarios)
    print("‚úÖ Scenarios set successfully")

    # Get scenarios back
    retrieved_scenarios = await service.get_scenarios(company_id)
    print(f"‚úÖ Retrieved {len(retrieved_scenarios)} scenarios")

    # Test full context formatting
    full_context = await service.get_full_company_context(company_id)
    formatted_context = full_context.get("formatted_context", "")

    print(f"\nüìù Formatted context:")
    print(f"   Length: {len(formatted_context)} chars")
    print(f"   Preview: {formatted_context[:300]}...")

    # Test scenario types grouping in formatted context
    if "#### SALES Scenarios:" in formatted_context:
        print("‚úÖ SALES scenarios grouped correctly")
    if "#### ASK_COMPANY_INFORMATION Scenarios:" in formatted_context:
        print("‚úÖ ASK_COMPANY_INFORMATION scenarios grouped correctly")
    if "#### SUPPORT Scenarios:" in formatted_context:
        print("‚úÖ SUPPORT scenarios grouped correctly")

    print("\nüéâ All tests passed!")


if __name__ == "__main__":
    asyncio.run(test_new_scenario_structure())
