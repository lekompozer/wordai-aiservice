#!/usr/bin/env python3
"""
Test Complete B∆∞·ªõc 3 Flow: Upload ‚Üí Extraction ‚Üí Catalog ‚Üí Chat v·ªõi Real-time Inventory
"""
import asyncio
import json
from datetime import datetime
from pathlib import Path

# Add src to path
import sys

sys.path.append("src")

from services.product_catalog_service import (
    ProductCatalogService,
    get_product_catalog_service,
)
from services.unified_chat_service import UnifiedChatService
from api.callbacks.enhanced_callback_handler import EnhancedCallbackHandler


async def test_complete_flow():
    """Test to√†n b·ªô flow B∆∞·ªõc 3"""
    print("üöÄ TESTING COMPLETE B∆Ø·ªöC 3 FLOW")
    print("=" * 60)

    # 1. Test ProductCatalogService
    print("\n1Ô∏è‚É£ TESTING PRODUCT CATALOG SERVICE")
    catalog_service = get_product_catalog_service()

    # Test data - gi·∫£ l·∫≠p d·ªØ li·ªáu t·ª´ extraction
    test_products = [
        {
            "name": "iPhone 15 Pro Max",
            "description": "Smartphone cao c·∫•p v·ªõi chip A17 Pro, camera 48MP",
            "price": "29,990,000",
            "quantity": "15",
            "category": "Smartphone",
        },
        {
            "name": "Samsung Galaxy S24 Ultra",
            "description": "Flagship Android v·ªõi S Pen, m√†n h√¨nh 6.8 inch",
            "price": "31,990,000",
            "quantity": "8",
            "category": "Smartphone",
        },
        {
            "name": "MacBook Air M3",
            "description": "Laptop si√™u nh·∫π v·ªõi chip Apple M3",
            "price": "28,990,000",
            "quantity": "12",
            "category": "Laptop",
        },
    ]

    # Register products v√† l·∫•y IDs
    product_ids = {}
    for product in test_products:
        try:
            result = await catalog_service.register_product(
                company_id="TESTCO123",
                name=product["name"],
                description=product["description"],
                price=product["price"],
                quantity=product["quantity"],
                category=product["category"],
            )
            product_ids[product["name"]] = result["product_id"]
            print(f"‚úÖ Registered: {product['name']} ‚Üí {result['product_id']}")
        except Exception as e:
            print(f"‚ùå Failed to register {product['name']}: {e}")

    # 2. Test Enhanced Callback Handler
    print(f"\n2Ô∏è‚É£ TESTING ENHANCED CALLBACK HANDLER")
    handler = EnhancedCallbackHandler()

    # Simulate extraction result
    extraction_result = {
        "extracted_data": {
            "products": [
                {
                    "name": "AirPods Pro Gen 3",
                    "price": "6,990,000 VNƒê",
                    "description": "Tai nghe kh√¥ng d√¢y v·ªõi ch·ªëng ·ªìn ch·ªß ƒë·ªông",
                    "quantity": "25 chi·∫øc",
                    "category": "Audio",
                }
            ],
            "services": [
                {
                    "name": "B·∫£o h√†nh Premium",
                    "price": "2,990,000 VNƒê",
                    "description": "B·∫£o h√†nh m·ªü r·ªông 3 nƒÉm cho t·∫•t c·∫£ s·∫£n ph·∫©m",
                    "availability": "C√≥ s·∫µn",
                }
            ],
        },
        "company_id": "TESTCO123",
        "session_id": "test_session_123",
    }

    try:
        # Test callback v·ªõi ProductCatalogService integration
        await handler.handle_extraction_complete(
            extraction_result,
            webhook_url="http://localhost:8000/test-webhook",  # Fake URL for testing
            company_id="TESTCO123",
        )
        print("‚úÖ Callback handler processed successfully")
    except Exception as e:
        print(f"‚ùå Callback handler error: {e}")

    # 3. Test UnifiedChatService with Catalog Integration
    print(f"\n3Ô∏è‚É£ TESTING UNIFIED CHAT SERVICE WITH CATALOG")
    chat_service = UnifiedChatService()

    # Test queries v·ªÅ inventory
    test_queries = [
        "iPhone 15 Pro Max c√≤n h√†ng kh√¥ng? Gi√° bao nhi√™u?",
        "So s√°nh gi√° iPhone 15 Pro Max v√† Samsung Galaxy S24 Ultra",
        "MacBook Air M3 c√≤n m·∫•y chi·∫øc?",
        "S·∫£n ph·∫©m n√†o ƒëang c√≥ s·∫µn trong kho?",
    ]

    for query in test_queries:
        print(f"\nü§î Query: {query}")
        try:
            response = await chat_service.chat_with_context_async(
                user_query=query,
                company_id="TESTCO123",
                session_id="test_session_123",
                user_name="Test User",
            )

            if response and response.get("success"):
                answer = response["answer"]
                print(f"ü§ñ Response: {answer[:200]}...")

                # Check for catalog data integration
                if "[D·ªÆ LI·ªÜU T·ªíN KHO" in answer:
                    print("‚úÖ Catalog data ƒë∆∞·ª£c t√≠ch h·ª£p trong response")
                else:
                    print("‚ö†Ô∏è  Kh√¥ng th·∫•y catalog data trong response")

            else:
                print(f"‚ùå Chat failed: {response}")

        except Exception as e:
            print(f"‚ùå Chat error: {e}")

    # 4. Test Hybrid Search tr·ª±c ti·∫øp
    print(f"\n4Ô∏è‚É£ TESTING HYBRID SEARCH WITH CATALOG PRIORITY")
    try:
        search_result = await chat_service._hybrid_search_company_data_optimized(
            query="iPhone 15 Pro Max gi√°", company_id="TESTCO123"
        )
        print(f"üìä Hybrid search result: {len(search_result)} characters")

        # Check priority structure
        if "[D·ªÆ LI·ªÜU T·ªíN KHO - CH√çNH X√ÅC NH·∫§T]" in search_result:
            print("‚úÖ Catalog data c√≥ priority cao nh·∫•t")
        if "[D·ªÆ LI·ªÜU M√î T·∫¢ T·ª™ T√ÄI LI·ªÜU]" in search_result:
            print("‚úÖ RAG data ƒë∆∞·ª£c bao g·ªìm nh∆∞ supplementary")

    except Exception as e:
        print(f"‚ùå Hybrid search error: {e}")

    print(f"\nüéØ B∆Ø·ªöC 3 TESTING COMPLETED")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(test_complete_flow())
