#!/usr/bin/env python3
"""
Test script to generate actual webhook payloads for PLACE_ORDER, UPDATE_ORDER, CHECK_QUANTITY
Script ki·ªÉm tra t·∫°o payload webhook th·ª±c t·∫ø cho 3 intent
"""
import json
import sys
import os

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from services.unified_chat_service import unified_chat_service


def test_json_parsing():
    """Test JSON parsing with webhook_data extraction"""
    print("üß™ [TEST] Testing JSON parsing with webhook_data extraction...")

    # Test PLACE_ORDER payload
    test_place_order = """{
  "thinking": {
    "intent": "PLACE_ORDER",
    "persona": "L·ªÖ t√¢n kh√°ch s·∫°n",
    "reasoning": "Kh√°ch h√†ng ƒë√£ cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·∫∑t ph√≤ng v√† x√°c nh·∫≠n"
  },
  "final_answer": "D·∫° em c·∫£m ∆°n anh H·ªôi. Em ƒë√£ x√°c nh·∫≠n ƒë·∫∑t ph√≤ng Superior Standard Room cho anh t·ª´ ng√†y mai. Th√¥ng tin: T√™n: anh H·ªôi, SƒêT: 0908097470, Email: hoi.tran@gmail.com. Ph√≤ng s·∫Ω s·∫µn s√†ng l√∫c 14:00. Em c√≥ g·ª≠i th√¥ng tin x√°c nh·∫≠n qua email cho anh kh√¥ng ·∫°?",
  "webhook_data": {
    "order_data": {
      "complete": true,
      "items": [
        {
          "product_id": "room_001",
          "service_id": null,
          "name": "Superior Standard Room",
          "quantity": 1,
          "unit_price": 754691,
          "notes": "Ph√≤ng view bi·ªÉn"
        }
      ],
      "customer": {
        "name": "H·ªôi Tr·∫ßn",
        "phone": "0908097470",
        "email": "hoi.tran@gmail.com",
        "address": "TP.HCM"
      },
      "delivery": {
        "method": "pickup",
        "address": "Kh√°ch s·∫°n Paradise Bay"
      },
      "payment": {
        "method": "COD"
      },
      "notes": "ƒê·∫∑t ph√≤ng qua AI chatbot"
    }
  }
}"""

    # Test UPDATE_ORDER payload
    test_update_order = """{
  "thinking": {
    "intent": "UPDATE_ORDER",
    "persona": "Nh√¢n vi√™n h·ªó tr·ª£",
    "reasoning": "Kh√°ch h√†ng mu·ªën thay ƒë·ªïi th√¥ng tin ƒë∆°n h√†ng v√† ƒë√£ x√°c nh·∫≠n"
  },
  "final_answer": "D·∫° em ƒë√£ c·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng DH001 cho anh. Thay ƒë·ªïi: t·ª´ 2 ph√≤ng xu·ªëng 1 ph√≤ng, ng√†y check-in t·ª´ 15/08 th√†nh 20/08. L√Ω do: thay ƒë·ªïi k·∫ø ho·∫°ch du l·ªãch. Em c√≥ g·ª≠i th√¥ng tin c·∫≠p nh·∫≠t qua email cho anh kh√¥ng ·∫°?",
  "webhook_data": {
    "update_data": {
      "complete": true,
      "order_code": "DH001",
      "changes": {
        "items": [
          {
            "name": "Superior Standard Room",
            "quantity": 1,
            "old_quantity": 2,
            "notes": "Gi·∫£m t·ª´ 2 ph√≤ng xu·ªëng 1 ph√≤ng"
          }
        ],
        "delivery": {
          "check_in_date": "2024-08-20",
          "old_check_in_date": "2024-08-15",
          "notes": "Thay ƒë·ªïi ng√†y check-in"
        }
      },
      "customer": {
        "name": "H·ªôi Tr·∫ßn",
        "phone": "0908097470",
        "email": "hoi.tran@gmail.com"
      },
      "notes": "Kh√°ch h√†ng thay ƒë·ªïi k·∫ø ho·∫°ch du l·ªãch"
    }
  }
}"""

    # Test CHECK_QUANTITY payload
    test_check_quantity = """{
  "thinking": {
    "intent": "CHECK_QUANTITY",
    "persona": "Nh√¢n vi√™n b√°n h√†ng",
    "reasoning": "Kh√°ch h√†ng h·ªèi t√¨nh tr·∫°ng t·ªìn kho v√† ƒë√£ ƒë·ªìng √Ω ƒë·ªÉ shop ki·ªÉm tra"
  },
  "final_answer": "D·∫° c·∫£m ∆°n anh Minh. Em ƒë√£ g·ª≠i y√™u c·∫ßu ki·ªÉm tra t√¨nh tr·∫°ng ph√≤ng Superior Standard Room cho ng√†y 25/08 ƒë·∫øn b·ªô ph·∫≠n ƒë·∫∑t ph√≤ng. H·ªç s·∫Ω ki·ªÉm tra v√† li√™n h·ªá l·∫°i v·ªõi anh qua s·ªë 0909123456 trong v√≤ng 30 ph√∫t ·∫°. Em c√≥ g·ª≠i th√¥ng b√°o qua email cho anh kh√¥ng ·∫°?",
  "webhook_data": {
    "check_quantity_data": {
      "complete": true,
      "product_id": "room_001",
      "service_id": null,
      "item_name": "Superior Standard Room",
      "item_type": "Service",
      "customer": {
        "name": "Minh Nguy·ªÖn",
        "phone": "0909123456",
        "email": "minh.nguyen@gmail.com"
      },
      "specifications": {
        "date": "2024-08-25",
        "quantity": 1,
        "check_in_time": "14:00",
        "check_out_time": "12:00"
      },
      "notes": "Kh√°ch h√†ng c·∫ßn ki·ªÉm tra t√¨nh tr·∫°ng ph√≤ng tr·ªëng cho ng√†y 25/08"
    }
  }
}"""

    # Parse and test each payload
    payloads = [
        ("PLACE_ORDER", test_place_order),
        ("UPDATE_ORDER", test_update_order),
        ("CHECK_QUANTITY", test_check_quantity),
    ]

    for intent_name, payload_str in payloads:
        print(f"\nüîç [TEST] Testing {intent_name} payload...")
        try:
            # Parse JSON
            result = unified_chat_service._parse_ai_json_response(payload_str)
            print(f"‚úÖ [PARSED] Result keys: {list(result.keys())}")

            if "webhook_data" in result:
                webhook_data = result["webhook_data"]
                print(f"‚úÖ [WEBHOOK_DATA] Keys: {list(webhook_data.keys())}")

                # Check specific structure for each intent
                if intent_name == "PLACE_ORDER":
                    if "order_data" in webhook_data:
                        order_data = webhook_data["order_data"]
                        print(
                            f"‚úÖ [ORDER_DATA] Complete: {order_data.get('complete', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [ORDER_DATA] Customer: {order_data.get('customer', {}).get('name', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [ORDER_DATA] Items count: {len(order_data.get('items', []))}"
                        )

                        # Test order webhook readiness
                        is_ready = unified_chat_service._is_order_ready_for_webhook(
                            result
                        )
                        print(f"‚úÖ [WEBHOOK_READY] Is order ready: {is_ready}")

                elif intent_name == "UPDATE_ORDER":
                    if "update_data" in webhook_data:
                        update_data = webhook_data["update_data"]
                        print(
                            f"‚úÖ [UPDATE_DATA] Complete: {update_data.get('complete', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [UPDATE_DATA] Order code: {update_data.get('order_code', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [UPDATE_DATA] Changes: {list(update_data.get('changes', {}).keys())}"
                        )

                elif intent_name == "CHECK_QUANTITY":
                    if "check_quantity_data" in webhook_data:
                        quantity_data = webhook_data["check_quantity_data"]
                        print(
                            f"‚úÖ [QUANTITY_DATA] Complete: {quantity_data.get('complete', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [QUANTITY_DATA] Item: {quantity_data.get('item_name', 'Missing!')}"
                        )
                        print(
                            f"‚úÖ [QUANTITY_DATA] Customer: {quantity_data.get('customer', {}).get('name', 'Missing!')}"
                        )

                        # Test quantity webhook readiness
                        is_ready = (
                            unified_chat_service._is_check_quantity_webhook_ready(
                                result, "test query"
                            )
                        )
                        print(f"‚úÖ [WEBHOOK_READY] Is quantity check ready: {is_ready}")

            else:
                print("‚ùå [ERROR] No webhook_data found in parsed result")

        except Exception as e:
            print(f"‚ùå [ERROR] Failed to parse {intent_name}: {e}")


def generate_backend_payloads():
    """Generate actual backend webhook payloads"""
    print("\nüöÄ [BACKEND] Generating actual backend payloads...")

    # PLACE_ORDER backend payload
    place_order_payload = {
        "conversationId": "conv_12345",
        "companyId": "hotel_paradise_bay",
        "leadId": "lead_67890",
        "userId": "ai_service_chatbot",
        "summary": "H·ªôi Tr·∫ßn ƒë·∫∑t 1 Superior Standard Room v·ªõi t·ªïng gi√° tr·ªã 754,691 VND. Kh√°ch ƒë·∫øn l·∫•y, thanh to√°n COD.",
        "customer": {
            "name": "H·ªôi Tr·∫ßn",
            "phone": "0908097470",
            "email": "hoi.tran@gmail.com",
            "address": "TP.HCM",
            "company": "",
        },
        "items": [
            {
                "productId": "room_001",
                "serviceId": None,
                "itemType": "Service",
                "name": "Superior Standard Room",
                "quantity": 1,
                "unitPrice": 754691,
                "totalPrice": 754691,
                "description": "Ph√≤ng superior v·ªõi view bi·ªÉn",
                "notes": "Ph√≤ng view bi·ªÉn",
                "product_code": "SUP_001",
                "unit": "Ph√≤ng",
            }
        ],
        "channel": {"type": "chatdemo", "pluginId": None},
        "payment": {
            "method": "COD",
            "status": "PENDING",
            "timing": "on_delivery",
            "notes": "",
        },
        "delivery": {
            "method": "pickup",
            "address": "Kh√°ch s·∫°n Paradise Bay",
            "recipientName": "H·ªôi Tr·∫ßn",
            "recipientPhone": "0908097470",
            "notes": "",
        },
        "notes": "ƒê·∫∑t ph√≤ng qua AI chatbot",
        "metadata": {
            "source": "ai_conversation",
            "aiModel": "qwen-3-235b-a22b-instruct-2507",
            "processingTime": 1250,
            "extractedFrom": "conversation",
        },
    }

    # UPDATE_ORDER backend payload
    update_order_payload = {
        "orderCode": "DH001",
        "updateType": "change_quantity",
        "changes": {
            "items": [
                {
                    "name": "Superior Standard Room",
                    "quantity": 1,
                    "old_quantity": 2,
                    "notes": "Gi·∫£m t·ª´ 2 ph√≤ng xu·ªëng 1 ph√≤ng",
                }
            ],
            "checkInDate": "2024-08-20",
            "oldCheckInDate": "2024-08-15",
            "notes": "Thay ƒë·ªïi ng√†y check-in",
        },
        "customer": {
            "name": "H·ªôi Tr·∫ßn",
            "phone": "0908097470",
            "email": "hoi.tran@gmail.com",
        },
        "companyId": "hotel_paradise_bay",
        "metadata": {
            "source": "ai_conversation",
            "aiModel": "qwen-3-235b-a22b-instruct-2507",
            "processingTime": 890,
            "extractedFrom": "conversation",
        },
    }

    # CHECK_QUANTITY backend payload
    check_quantity_payload = {
        "itemName": "Superior Standard Room",
        "itemType": "Service",
        "productId": "room_001",
        "serviceId": None,
        "customer": {
            "name": "Minh Nguy·ªÖn",
            "phone": "0909123456",
            "email": "minh.nguyen@gmail.com",
        },
        "specifications": {
            "date": "2024-08-25",
            "quantity": 1,
            "checkInTime": "14:00",
            "checkOutTime": "12:00",
        },
        "notes": "Kh√°ch h√†ng c·∫ßn ki·ªÉm tra t√¨nh tr·∫°ng ph√≤ng tr·ªëng cho ng√†y 25/08",
        "conversationId": "conv_12345",
        "channel": {"type": "chatdemo", "pluginId": None},
        "companyId": "hotel_paradise_bay",
        "metadata": {
            "source": "ai_conversation",
            "aiModel": "qwen-3-235b-a22b-instruct-2507",
            "processingTime": 650,
            "extractedFrom": "conversation",
        },
    }

    # Print formatted payloads
    print("\nüìã [PLACE_ORDER] Backend webhook payload:")
    print("=" * 50)
    print(json.dumps(place_order_payload, indent=2, ensure_ascii=False))

    print("\nüìã [UPDATE_ORDER] Backend webhook payload:")
    print("=" * 50)
    print(json.dumps(update_order_payload, indent=2, ensure_ascii=False))

    print("\nüìã [CHECK_QUANTITY] Backend webhook payload:")
    print("=" * 50)
    print(json.dumps(check_quantity_payload, indent=2, ensure_ascii=False))


if __name__ == "__main__":
    test_json_parsing()
    generate_backend_payloads()
    print("\n‚úÖ [COMPLETE] All webhook payload tests completed!")
