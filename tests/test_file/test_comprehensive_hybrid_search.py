#!/usr/bin/env python3
"""
Test script for comprehensive hybrid search functionality
Script test cho ch·ª©c nƒÉng t√¨m ki·∫øm hybrid to√†n di·ªán
"""

import asyncio
import sys
import os

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from src.services.qdrant_company_service import get_qdrant_service
from src.services.company_context_service import get_company_context_service
from src.models.unified_models import Industry, IndustryDataType, Language
from src.models.company_context import BasicInfo, FAQ, Scenario, SocialLinks, Location
from src.utils.logger import setup_logger

logger = setup_logger(__name__)


async def test_comprehensive_hybrid_search():
    """Test comprehensive hybrid search with real data"""
    try:
        logger.info("üöÄ Starting comprehensive hybrid search test...")

        # Step 1: Set up test company context
        company_id = "test_company_001"
        context_service = get_company_context_service()
        qdrant_service = get_qdrant_service()

        # Step 2: Create test basic info with new structure
        basic_info = BasicInfo(
            name="C√¥ng ty Test ABC",
            industry="financial_services",
            description="C√¥ng ty chuy√™n cung c·∫•p d·ªãch v·ª• t∆∞ v·∫•n t√†i ch√≠nh v√† b·∫£o hi·ªÉm",
            location=Location(
                country="Vi·ªát Nam",
                city="TP.HCM",
                address="123 ƒê∆∞·ªùng Test, Qu·∫≠n 1, TP.HCM",
            ),
            email="contact@test-abc.com",
            phone="0123456789",
            website="https://test-abc.com",
            socialLinks=SocialLinks(
                facebook="https://facebook.com/test-abc",
                zalo="0123456789",
                whatsapp="+84123456789",
            ),
        )

        # Step 3: Create test FAQs
        test_faqs = [
            FAQ(
                question="L√£i su·∫•t vay mua nh√† hi·ªán t·∫°i l√† bao nhi√™u?",
                answer="L√£i su·∫•t vay mua nh√† hi·ªán t·∫°i t·ª´ 8.5% - 12% t√πy theo th·ªùi h·∫°n vay v√† kh·∫£ nƒÉng t√†i ch√≠nh.",
                category="Vay mua nh√†",
            ),
            FAQ(
                question="ƒêi·ªÅu ki·ªán vay mua xe √¥ t√¥ nh∆∞ th·∫ø n√†o?",
                answer="Kh√°ch h√†ng c·∫ßn c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh t·ª´ 15 tri·ªáu/th√°ng, th·ªùi h·∫°n vay t·ªëi ƒëa 7 nƒÉm.",
                category="Vay mua xe",
            ),
            FAQ(
                question="B·∫£o hi·ªÉm nh√¢n th·ªç c√≥ nh·ªØng g√≥i n√†o?",
                answer="Ch√∫ng t√¥i c√≥ 3 g√≥i: G√≥i c∆° b·∫£n (2 tri·ªáu/nƒÉm), G√≥i n√¢ng cao (5 tri·ªáu/nƒÉm), G√≥i VIP (10 tri·ªáu/nƒÉm).",
                category="B·∫£o hi·ªÉm",
            ),
        ]

        # Step 4: Create test scenarios
        test_scenarios = [
            Scenario(
                situation="Kh√°ch h√†ng mu·ªën vay ti·ªÅn ƒë·ªÉ mua nh√† ƒë·∫ßu ti√™n",
                solution="H∆∞·ªõng d·∫´n kh√°ch h√†ng chu·∫©n b·ªã h·ªì s∆°: CMND, s·ªï h·ªô kh·∫©u, gi·∫•y t·ªù thu nh·∫≠p, h·ª£p ƒë·ªìng mua b√°n s∆° b·ªô. T∆∞ v·∫•n c√°c g√≥i vay ∆∞u ƒë√£i cho ng∆∞·ªùi mua nh√† l·∫ßn ƒë·∫ßu v·ªõi l√£i su·∫•t t·ª´ 8.5%.",
                category="Vay mua nh√†",
            ),
            Scenario(
                situation="Kh√°ch h√†ng c√≥ nhu c·∫ßu b·∫£o hi·ªÉm s·ª©c kh·ªèe cho gia ƒë√¨nh",
                solution="Ph√¢n t√≠ch nhu c·∫ßu gia ƒë√¨nh, t∆∞ v·∫•n g√≥i b·∫£o hi·ªÉm ph√π h·ª£p v·ªõi ng√¢n s√°ch. ∆Øu ti√™n c√°c g√≥i c√≥ b·∫£o hi·ªÉm to√†n di·ªán cho tr·∫ª em v√† ng∆∞·ªùi cao tu·ªïi.",
                category="B·∫£o hi·ªÉm s·ª©c kh·ªèe",
            ),
        ]

        # Step 5: Set context data (this will auto-index to Qdrant)
        logger.info("üìù Setting up company context...")
        await context_service.set_basic_info(company_id, basic_info)
        await context_service.set_faqs(company_id, test_faqs)
        await context_service.set_scenarios(company_id, test_scenarios)

        # Step 6: Wait a bit for indexing to complete
        await asyncio.sleep(2)

        # Step 7: Test comprehensive hybrid search with different queries
        test_queries = [
            "T√¥i mu·ªën vay ti·ªÅn mua nh√†",
            "L√£i su·∫•t vay mua xe √¥ t√¥",
            "G√≥i b·∫£o hi·ªÉm n√†o ph√π h·ª£p cho gia ƒë√¨nh",
            "ƒêi·ªÅu ki·ªán vay mua nh√† ƒë·∫ßu ti√™n",
            "Th√¥ng tin li√™n h·ªá c√¥ng ty",
        ]

        for i, query in enumerate(test_queries, 1):
            logger.info(f"\n{'='*60}")
            logger.info(f"üîç Test {i}: Query = '{query}'")
            logger.info(f"{'='*60}")

            # Test comprehensive hybrid search
            results = await qdrant_service.comprehensive_hybrid_search(
                company_id=company_id,
                query=query,
                industry=Industry.BANKING,
                data_types=[
                    IndustryDataType.FAQ,
                    IndustryDataType.KNOWLEDGE_BASE,
                    IndustryDataType.COMPANY_INFO,
                ],
                score_threshold=0.6,
                max_chunks=10,
            )

            logger.info(f"üìä Found {len(results)} chunks above threshold 0.6:")
            for j, result in enumerate(results, 1):
                logger.info(
                    f"   {j}. {result['data_type']} (score: {result['score']:.3f}, source: {result['search_source']})"
                )
                logger.info(f"      Content: {result['content_for_rag'][:100]}...")

            if not results:
                logger.warning(f"‚ö†Ô∏è No results found for query: '{query}'")

        logger.info(f"\n{'='*60}")
        logger.info("‚úÖ Comprehensive hybrid search test completed!")
        logger.info(f"{'='*60}")

    except Exception as e:
        logger.error(f"‚ùå Test failed: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    # Run the test
    asyncio.run(test_comprehensive_hybrid_search())
