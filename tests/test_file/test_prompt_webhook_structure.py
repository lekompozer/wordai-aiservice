#!/usr/bin/env python3
"""
Test JSON Payload cho CHECK_QUANTITY - Test tr·ª±c ti·∫øp prompt building
"""
import asyncio
import json
from datetime import datetime

# Add src to path
import sys

sys.path.append("src")


async def test_prompt_webhook_structure():
    """Test prompt c√≥ c·∫•u tr√∫c webhook_data ƒë√∫ng kh√¥ng"""
    print("üß™ TESTING PROMPT WEBHOOK_DATA STRUCTURE")
    print("=" * 70)

    from services.unified_chat_service import UnifiedChatService

    # Create service
    chat_service = UnifiedChatService()

    # Test prompt building
    test_user_context = "This is first conversation"
    test_company_data = """
    [D·ªÆ LI·ªÜU T·ªíN KHO - CH√çNH X√ÅC NH·∫§T]
    - iPhone 15 Pro Max (product_id: iphone15_pro_max_001): Gi√° 29,990,000 VNƒê, T·ªìn kho: 15 chi·∫øc
    - Samsung Galaxy S24 (product_id: samsung_s24_ultra_001): Gi√° 31,990,000 VNƒê, T·ªìn kho: 8 chi·∫øc

    [D·ªÆ LI·ªÜU M√î T·∫¢ T·ª™ T√ÄI LI·ªÜU]
    - iPhone 15 Pro Max: Smartphone cao c·∫•p v·ªõi chip A17 Pro
    - Samsung Galaxy S24: Flagship Android v·ªõi S Pen
    """
    test_company_context = "C·ª≠a h√†ng ƒëi·ªán tho·∫°i ABC"
    test_user_query = "Anh mu·ªën check iPhone 15 Pro Max c√≤n h√†ng kh√¥ng? T√™n anh l√† Nguy·ªÖn VƒÉn A, SƒêT 0909123456"

    # Build prompt
    prompt = chat_service._build_unified_prompt_with_intent(
        user_context=test_user_context,
        company_data=test_company_data,
        company_context=test_company_context,
        user_query=test_user_query,
        industry="Technology",
        company_id="TEST_COMPANY",
        session_id="test_session",
        user_name="Test User",
        company_name="ABC Store",
    )

    print("1Ô∏è‚É£ CHECKING PROMPT STRUCTURE")
    print("-" * 40)

    # Check webhook data guidance
    if "webhook_data" in prompt:
        print("‚úÖ Prompt contains 'webhook_data' field")
    else:
        print("‚ùå Prompt missing 'webhook_data' field")

    if "check_quantity_data" in prompt:
        print("‚úÖ Prompt contains CHECK_QUANTITY webhook structure")
    else:
        print("‚ùå Prompt missing CHECK_QUANTITY webhook structure")

    if "product_id t·ª´ [D·ªÆ LI·ªÜU T·ªíN KHO]" in prompt:
        print("‚úÖ Prompt instructs AI to use product_id from catalog data")
    else:
        print("‚ùå Prompt missing product_id catalog instruction")

    # Check 2-step CHECK_QUANTITY flow
    if (
        "B∆∞·ªõc 1: Ki·ªÉm Tra T·ª©c Th√¨" in prompt
        and "B∆∞·ªõc 2: ƒê·ªÅ Xu·∫•t Ki·ªÉm Tra Th·ªß C√¥ng" in prompt
    ):
        print("‚úÖ Prompt contains 2-step CHECK_QUANTITY flow")
    else:
        print("‚ùå Prompt missing 2-step CHECK_QUANTITY flow")

    print("\n2Ô∏è‚É£ CHECKING DATA PRIORITY STRUCTURE")
    print("-" * 40)

    if "D·ªÆ LI·ªÜU T·ªíN KHO - CH√çNH X√ÅC NH·∫§T" in prompt:
        print("‚úÖ Prompt prioritizes catalog data")
    else:
        print("‚ùå Prompt missing catalog priority")

    if "product_id trong c√¢u tr·∫£ l·ªùi" in prompt:
        print("‚úÖ Prompt instructs AI to include product_id in response")
    else:
        print("‚ùå Prompt missing product_id inclusion instruction")

    print("\n3Ô∏è‚É£ SAMPLE PROMPT STRUCTURE")
    print("-" * 40)

    # Show key sections
    webhook_section = ""
    if "ƒê·ªäNH D·∫†NG ƒê·∫¶U RA" in prompt:
        start_idx = prompt.find("ƒê·ªäNH D·∫†NG ƒê·∫¶U RA")
        end_idx = prompt.find("**V√ç D·ª§:**", start_idx)
        if end_idx > start_idx:
            webhook_section = prompt[start_idx:end_idx]

    if webhook_section:
        print("üìã OUTPUT FORMAT SECTION:")
        print(
            webhook_section[:500] + "..."
            if len(webhook_section) > 500
            else webhook_section
        )

    print("\n4Ô∏è‚É£ ANALYZING CURRENT CALLBACK EXTRACTION LOGIC")
    print("-" * 40)

    # Check if callback uses webhook_data first
    import inspect

    # Get source of _extract_check_quantity_data method
    try:
        source_lines = inspect.getsource(chat_service._extract_check_quantity_data)

        if (
            'parsed_response.get("webhook_data", {}).get("check_quantity_data")'
            in source_lines
        ):
            print(
                "‚ùå Callback handler DOES NOT check webhook_data first (needs update)"
            )
        else:
            print("‚úÖ Callback handler checks webhook_data first")

        if "ai_manager.stream_response" in source_lines:
            print(
                "‚ö†Ô∏è  Callback still uses secondary AI call (inefficient but ok as fallback)"
            )
        else:
            print("‚úÖ Callback does not use secondary AI call")

    except Exception as e:
        print(f"‚ùå Could not analyze callback source: {e}")

    print("\nüèÅ ANALYSIS COMPLETED")
    print("=" * 70)

    # Summary and recommendations
    print("\nüìä SUMMARY & RECOMMENDATIONS")
    print("-" * 40)

    issues = []
    if "webhook_data" not in prompt:
        issues.append("‚ùå Add webhook_data to prompt OUTPUT FORMAT")
    if "check_quantity_data" not in prompt:
        issues.append("‚ùå Add CHECK_QUANTITY webhook structure to prompt")

    if issues:
        print("üö® ISSUES FOUND:")
        for issue in issues:
            print(f"   {issue}")
    else:
        print("‚úÖ ALL CHECKS PASSED - Prompt structure looks good!")

    print("\n‚úÖ NEXT STEPS:")
    print("   1. Test with real AI call to see JSON structure")
    print("   2. Verify callback handler uses webhook_data first")
    print("   3. Test product_id extraction from catalog data")


if __name__ == "__main__":
    asyncio.run(test_prompt_webhook_structure())
