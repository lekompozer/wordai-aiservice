import requests
import base64
import json
import os

# Configuration
BASE_URL = "http://localhost:8000"  # Adjust if your server runs on a different port
TEST_IMAGE_URL = "https://i.ibb.co/fzyvwdTg/sodo3.jpg"
USER_ID = "test_ocr_valuation_user"

async def test_chatgpt_vision_url():
    """Test ChatGPT Vision v·ªõi URL tr·ª±c ti·∫øp"""
    print("\n--- Testing ChatGPT Vision v·ªõi URL tr·ª±c ti·∫øp ---")
    
    payload = {
        "url": TEST_IMAGE_URL,
        "filename": "sodo3.jpg"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/test-ocr-url", json=payload)
        response.raise_for_status()
        result = response.json()
        print("ChatGPT Vision URL Test Result:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        if result.get("success"):
            print(f"\n‚úÖ OCR Success!")
            print(f"Extracted text length: {result.get('text_length', 0)}")
            print(f"Extracted text: {result.get('extracted_text', 'N/A')}")
            return result.get('extracted_text', '')
        else:
            print(f"\n‚ùå OCR Failed: {result.get('error', 'Unknown error')}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"Error calling /test-ocr-url: {e}")
        return None

async def download_image_to_base64(url):
    """Download image t·ª´ URL v√† convert sang Base64"""
    try:
        import httpx
        
        print(f"Downloading image from: {url}")
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            response.raise_for_status()
            
            image_data = response.content
            file_base64 = base64.b64encode(image_data).decode()
            
            print(f"Downloaded image: {len(image_data)} bytes")
            print(f"Base64 length: {len(file_base64)} characters")
            
            return file_base64, response.headers.get("content-type", "image/jpeg")
            
    except Exception as e:
        print(f"Error downloading image: {e}")
        return None, None

async def test_deepseek_reasoning_with_url():
    """Test /real-estate/deepseek-reasoning v·ªõi image t·ª´ URL"""
    print(f"\n--- Testing /real-estate/deepseek-reasoning v·ªõi URL image ---")
    
    # Download image t·ª´ URL
    image_base64, content_type = await download_image_to_base64(TEST_IMAGE_URL)
    if not image_base64:
        print("‚ùå Kh√¥ng th·ªÉ download image t·ª´ URL")
        return

    valuation_question = "H√£y ph√¢n t√≠ch v√† ƒë·ªãnh gi√° b·∫•t ƒë·ªông s·∫£n n√†y v·ªõi th√¥ng tin th√™m T·ªïng 280.9m¬≤: Th·ªï c∆∞ 80m¬≤ (l√¢u d√†i) + ƒë·∫•t tr·ªìng c√¢y h√†ng nƒÉm 200.9m¬≤ (h·∫øt h·∫°n 2063), ƒë·∫•t ph·ªß h·ªìng to√†n b·ªô. ƒê√£ x√¢y k√® ƒë√°, ƒë·ªï n·ªÅn b·∫±ng m·∫∑t ƒë∆∞·ªùng, kh√¥ng v∆∞·ªõng c·ªôt ƒëi·ªán, ko l·ªói phong th·ªßy.M·∫∑t ti·ªÅn ƒë∆∞·ªùng Xu√¢n S∆°n- ƒê√° b·∫°c DT 997 ƒëang m·ªü r·ªông 30m (ƒë∆∞·ªùng c·∫•p 1, t·∫£i tr·ªçng 40 t·∫•n, (ƒëang m·ªü c√°ch ƒë·∫•t 400m, 2025 xong)Ph√≠a sau l√† su·ªëi th·ªßy l·ª£i, view thung l≈©ng l·ªông gi√≥ ƒê√¥ng Nam quanh nƒÉm.Ngay khu d√¢n c∆∞ ƒë√¥ng ƒë√∫c, g·∫ßn ch·ª£ , tr∆∞·ªùng, C√°ch c√¥ng An X√£ Su·ªëi Rao 800m"

    payload = {
        "question": valuation_question,
        "userId": USER_ID,
        "files": [
            {
                "filename": "sodo3.jpg",
                "content_type": content_type,
                "content": image_base64
            }
        ]
    }

    full_response_text = ""
    try:
        print("Sending request to /real-estate/deepseek-reasoning...")
        with requests.post(f"{BASE_URL}/real-estate/deepseek-reasoning", json=payload, stream=True) as response:
            response.raise_for_status()
            print("Streaming response:")
            for line in response.iter_lines():
                if line:
                    decoded_line = line.decode('utf-8')
                    if decoded_line.startswith('data: '):
                        try:
                            data_json = json.loads(decoded_line[len('data: '):])
                            if "chunk" in data_json:
                                print(data_json["chunk"], end="", flush=True)
                                full_response_text += data_json["chunk"]
                            elif "progress" in data_json:
                                print(f"\n[PROGRESS] {data_json['progress']}")
                            elif "done" in data_json and data_json["done"]:
                                print("\n--- Stream finished ---")
                                print(f"Final status: {data_json}")
                                break
                            elif "error" in data_json:
                                print(f"\n[ERROR] {data_json['error']}")
                                break
                        except json.JSONDecodeError:
                            print(f"\n[RAW STREAM DATA (JSON DECODE ERROR)] {decoded_line}")
            print("\n--- End of Stream ---")
            if not full_response_text:
                print("Warning: No content chunks received in the stream.")

    except requests.exceptions.RequestException as e:
        print(f"Error calling /real-estate/deepseek-reasoning: {e}")
    
    print("\nFull response from DeepSeek Reasoning (concatenated):")
    if full_response_text:
        print(full_response_text)
    else:
        print("No text content was streamed.")

async def main():
    print(f"üîç Testing v·ªõi image URL: {TEST_IMAGE_URL}")
    
    # ‚úÖ Test 1: ChatGPT Vision OCR v·ªõi URL tr·ª±c ti·∫øp
    ocr_result = await test_chatgpt_vision_url()
    
    # ‚úÖ Test 2: Real Estate Valuation v·ªõi image t·ª´ URL
    await test_deepseek_reasoning_with_url()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())