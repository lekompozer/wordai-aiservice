#!/usr/bin/env python3
"""
Test script to verify Qdrant upload and search functionality
Script test ƒë·ªÉ ki·ªÉm tra ch·ª©c nƒÉng upload v√† t√¨m ki·∫øm Qdrant
"""

import asyncio
import json
import aiohttp
from datetime import datetime
import sys
from pathlib import Path
from qdrant_client import QdrantClient

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

from src.services.qdrant_company_service import QdrantCompanyDataService

# Direct Qdrant credentials
QDRANT_URL = (
    "https://f9614d10-66f5-4669-9629-617c14876551.us-east4-0.gcp.cloud.qdrant.io"
)
QDRANT_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.gNFcCArqNFnAASKS1MHxTvsiVBmwvClDKE5o6mhX2eg"

# Test company data
COMPANY_ID = "ivy-fashion-store"
COMPANY_INFO = {
    "id": "ivy-fashion-store",
    "name": "Ivy Fashion Store",
    "industry": "fashion",
    "description": "Modern fashion retailer specializing in trendy clothing",
}

# Admin API authentication
ADMIN_API_KEY = "agent8x-backend-secret-key-2025"


async def test_qdrant_upload_status():
    """Check if data was uploaded to Qdrant successfully"""
    print("üîç CHECKING QDRANT UPLOAD STATUS")
    print("=" * 60)

    # First, trigger an extraction with Qdrant upload
    extraction_payload = {
        "r2_url": "https://agent8x.io.vn/companies/ivy-fashion-store/ivy-fashion-products-clean.csv",
        "company_id": COMPANY_ID,
        "industry": "fashion",
        "target_categories": ["products"],
        "file_metadata": {
            "original_name": "ivy-fashion-products-clean.csv",
            "file_size": 245760,
            "file_type": "text/csv",
            "uploaded_at": datetime.now().isoformat(),
        },
        "company_info": COMPANY_INFO,
        "language": "vi",
        "upload_to_qdrant": True,
    }

    print(f"üì§ Triggering extraction with Qdrant upload...")
    print(f"üè¢ Company: {COMPANY_ID}")
    print(f"üìÑ File: ivy-fashion-products-clean.csv")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/api/extract/process",
                json=extraction_payload,
                headers={"Content-Type": "application/json"},
            ) as response:

                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ EXTRACTION COMPLETED")
                    print(f"   ü§ñ AI Provider: {result.get('ai_provider')}")
                    print(
                        f"   üìä Total items: {result.get('total_items_extracted', 0)}"
                    )
                    print(
                        f"   üì¶ Products: {len(result.get('structured_data', {}).get('products', []))}"
                    )
                    print(
                        f"   üíæ Qdrant upload: {'‚úÖ Scheduled' if extraction_payload['upload_to_qdrant'] else '‚ùå Skipped'}"
                    )

                    # Wait a moment for background processing
                    print("\n‚è≥ Waiting 5 seconds for background Qdrant upload...")
                    await asyncio.sleep(5)

                    return True

                else:
                    print(f"‚ùå EXTRACTION FAILED: {response.status}")
                    error_text = await response.text()
                    print(f"Error: {error_text}")
                    return False

    except Exception as e:
        print(f"‚ùå EXTRACTION ERROR: {str(e)}")
        return False


async def test_company_data_search():
    """Test searching company data using search_company_data endpoint"""
    print("\nüîç TESTING COMPANY DATA SEARCH")
    print("=" * 60)

    # Test various search queries
    search_queries = [
        {"query": "√°o blazer", "description": "Search for blazer products"},
        {"query": "ƒë·∫ßm shirt dress", "description": "Search for shirt dress"},
        {"query": "ch√¢n v√°y tulle", "description": "Search for tulle skirt"},
        {"query": "cotton", "description": "Search by material"},
        {"query": "1380000", "description": "Search by price"},
        {"query": "IVY Fashion", "description": "Search by brand"},
    ]

    results_found = 0

    for i, search_test in enumerate(search_queries, 1):
        query = search_test["query"]
        description = search_test["description"]

        print(f"\nüîé Test {i}: {description}")
        print(f"   Query: '{query}'")

        # Prepare search payload
        search_payload = {
            "company_id": COMPANY_ID,
            "query": query,
            "content_types": ["products"],  # Search for products only
            "language": "vi",
            "limit": 5,
        }

        try:
            async with aiohttp.ClientSession() as session:
                # Create URL with query parameters for GET request
                url = f"http://localhost:8000/api/admin/companies/{COMPANY_ID}/search"

                async with session.post(
                    url,
                    json=search_payload,
                    headers={
                        "Content-Type": "application/json",
                        "X-API-Key": ADMIN_API_KEY,
                    },
                ) as response:

                    if response.status == 200:
                        search_results = await response.json()

                        if search_results and len(search_results) > 0:
                            results_found += 1
                            print(f"   ‚úÖ Found {len(search_results)} results")

                            # Show top result details
                            top_result = search_results[0]
                            print(
                                f"   üì¶ Top result: {top_result.get('content', 'N/A')[:100]}..."
                            )
                            print(f"   üéØ Score: {top_result.get('score', 0):.3f}")
                            print(
                                f"   üìä Content type: {top_result.get('content_type', 'N/A')}"
                            )

                            # Show structured data if available
                            structured_data = top_result.get("structured_data", {})
                            if structured_data and structured_data.get("product_data"):
                                product = structured_data["product_data"]
                                print(
                                    f"   üìù Product: {product.get('name', 'N/A')} - {product.get('price', 'N/A')}"
                                )
                        else:
                            print(f"   ‚ùå No results found")

                    else:
                        print(f"   ‚ùå Search failed: {response.status}")
                        error_text = await response.text()
                        print(f"   Error: {error_text}")

        except Exception as e:
            print(f"   ‚ùå Search error: {str(e)}")

    print(f"\nüìä SEARCH SUMMARY:")
    print(f"   Total tests: {len(search_queries)}")
    print(f"   Successful searches: {results_found}")
    print(f"   Success rate: {(results_found/len(search_queries)*100):.1f}%")

    return results_found > 0


async def test_qdrant_collection_info():
    """Check Qdrant collection information and data"""
    print("\nüóÑÔ∏è CHECKING QDRANT COLLECTION INFO")
    print("=" * 60)

    try:
        # Try to get company statistics which should show Qdrant data
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://localhost:8000/api/admin/companies/{COMPANY_ID}/stats",
                headers={"X-API-Key": ADMIN_API_KEY},
            ) as response:

                if response.status == 200:
                    stats = await response.json()
                    print("‚úÖ COMPANY STATS RETRIEVED")
                    print(f"   üè¢ Company ID: {stats.get('company_id', 'N/A')}")
                    print(f"   üè≠ Industry: {stats.get('industry', 'N/A')}")
                    print(
                        f"   üìä Total files: {stats.get('file_stats', {}).get('total_files', 0)}"
                    )
                    print(
                        f"   üìà Processed files: {stats.get('file_stats', {}).get('processed_files', 0)}"
                    )

                    # Check Qdrant specific stats
                    qdrant_stats = stats.get("qdrant_stats", {})
                    if qdrant_stats:
                        print(
                            f"   üóÑÔ∏è Qdrant collection size: {qdrant_stats.get('qdrant_collection_size', 0)}"
                        )
                        print(
                            f"   üì¶ Total chunks: {qdrant_stats.get('total_chunks', 0)}"
                        )

                        # Show data type distribution
                        data_type_counts = qdrant_stats.get("data_type_counts", {})
                        if data_type_counts:
                            print(f"   üìã Data type distribution:")
                            for data_type, count in data_type_counts.items():
                                print(f"      {data_type}: {count} chunks")
                    else:
                        print(f"   ‚ö†Ô∏è No Qdrant stats available")

                    return qdrant_stats.get("total_chunks", 0) > 0
                else:
                    print(f"‚ùå STATS RETRIEVAL FAILED: {response.status}")
                    return False

    except Exception as e:
        print(f"‚ùå STATS ERROR: {str(e)}")
        return False


async def test_chat_with_ivy_fashion():
    """Test chat functionality with Ivy Fashion Store data"""
    print("\nüí¨ TESTING CHAT WITH IVY FASHION STORE")
    print("=" * 60)

    # Test chat queries about the uploaded products
    chat_queries = [
        "C√≥ √°o blazer n√†o kh√¥ng?",
        "T√¥i mu·ªën t√¨m ƒë·∫ßm shirt dress",
        "Ch√¢n v√°y tulle gi√° bao nhi√™u?",
        "S·∫£n ph·∫©m n√†o l√†m t·ª´ cotton?",
        "√Åo blazer k·∫ª c√≥ nh·ªØng m√†u g√¨?",
        "C√°c s·∫£n ph·∫©m c·ªßa th∆∞∆°ng hi·ªáu IVY Fashion",
    ]

    successful_chats = 0

    for i, query in enumerate(chat_queries, 1):
        print(f"\nüí¨ Chat Test {i}: '{query}'")

        # Prepare chat payload
        chat_payload = {
            "message": query,
            "company_id": COMPANY_ID,
            "industry": "fashion",
            "language": "vi",
            "session_id": f"test_session_{datetime.now().timestamp()}",
            "context": {"company_info": COMPANY_INFO, "search_context": "products"},
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "http://localhost:8000/api/unified/chat",
                    json=chat_payload,
                    headers={
                        "Content-Type": "application/json",
                        "X-Company-Id": COMPANY_ID,
                    },
                ) as response:

                    if response.status == 200:
                        chat_result = await response.json()

                        message = chat_result.get("message", "")
                        intent = chat_result.get("intent", "unknown")
                        confidence = chat_result.get("confidence", 0)

                        if message and len(message) > 10:  # Valid response
                            successful_chats += 1
                            print(f"   ‚úÖ Response received")
                            print(
                                f"   üéØ Intent: {intent} (confidence: {confidence:.2f})"
                            )
                            print(f"   üìù Response: {message[:150]}...")

                            # Check if response contains relevant product info
                            relevant_keywords = [
                                "blazer",
                                "ƒë·∫ßm",
                                "v√°y",
                                "cotton",
                                "IVY",
                                "gi√°",
                                "m√†u",
                            ]
                            if any(
                                keyword.lower() in message.lower()
                                for keyword in relevant_keywords
                            ):
                                print(
                                    f"   üéâ Response contains relevant product information!"
                                )
                        else:
                            print(f"   ‚ö†Ô∏è Empty or short response")

                    else:
                        print(f"   ‚ùå Chat failed: {response.status}")
                        error_text = await response.text()
                        print(f"   Error: {error_text}")

        except Exception as e:
            print(f"   ‚ùå Chat error: {str(e)}")

    print(f"\nüìä CHAT TEST SUMMARY:")
    print(f"   Total queries: {len(chat_queries)}")
    print(f"   Successful responses: {successful_chats}")
    print(f"   Success rate: {(successful_chats/len(chat_queries)*100):.1f}%")

    return successful_chats > 0


async def main():
    """Main test function"""
    print("üß™ COMPREHENSIVE IVY FASHION STORE QDRANT TEST")
    print("=" * 60)
    print(f"üïê Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    # Step 1: Upload data to Qdrant
    upload_success = await test_qdrant_upload_status()

    # Step 2: Check collection info
    collection_has_data = await test_qdrant_collection_info()

    # Step 3: Test data search
    search_success = await test_company_data_search()

    # Step 4: Test chat functionality
    chat_success = await test_chat_with_ivy_fashion()

    # Final summary
    print("\n" + "=" * 60)
    print("üìä FINAL TEST RESULTS")
    print("=" * 60)

    print(f"‚úÖ Data Upload: {'PASSED' if upload_success else 'FAILED'}")
    print(
        f"‚úÖ Qdrant Collection: {'HAS DATA' if collection_has_data else 'EMPTY/MISSING'}"
    )
    print(f"‚úÖ Data Search: {'WORKING' if search_success else 'NOT WORKING'}")
    print(f"‚úÖ Chat Integration: {'WORKING' if chat_success else 'NOT WORKING'}")

    overall_success = (
        upload_success and collection_has_data and search_success and chat_success
    )

    print(
        f"\nüéØ OVERALL STATUS: {'üéâ ALL SYSTEMS WORKING' if overall_success else '‚ö†Ô∏è SOME ISSUES DETECTED'}"
    )

    if overall_success:
        print("\n‚ú® Ivy Fashion Store data is successfully integrated!")
        print("   üìä Products are searchable in Qdrant")
        print("   üí¨ Chat system can access and respond with product data")
        print("   üîç Search functionality is working correctly")
    else:
        print("\nüîß Issues to investigate:")
        if not upload_success:
            print("   ‚ùå Data upload failed - check extraction API")
        if not collection_has_data:
            print("   ‚ùå Qdrant collection empty - check background upload process")
        if not search_success:
            print("   ‚ùå Search not working - check search API and indexing")
        if not chat_success:
            print("   ‚ùå Chat not working - check unified chat API and RAG integration")

    print(f"\nüïê Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    asyncio.run(main())
