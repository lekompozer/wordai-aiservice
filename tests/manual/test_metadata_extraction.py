"""
Test extraction with real AI service via API endpoints
Test extraction th·ª±c s·ª≠ d·ª•ng API endpoints
"""

import asyncio
import os
import json
from typing import Dict, Any
import aiohttp


class RealAIExtractionTester:
    """Test extraction using real AI service via API"""

    def __init__(self):
        # API endpoint configuration
        self.base_url = "http://localhost:8000"
        self.test_scenarios = self._prepare_test_scenarios()

    def _prepare_test_scenarios(self) -> Dict[str, Dict[str, Any]]:
        """Prepare test scenarios for real AI extraction"""
        return {
            "hotel_services": {
                "text": """
                D·ªäCH V·ª§ KH√ÅCH S·∫†N PARADISE BAY RESORT & SPA
                
                1. AIRPORT TRANSFER SERVICE
                Gi√°: 800,000 VNƒê/chuy·∫øn (m·ªôt chi·ªÅu)
                - Xe Mercedes VIP ƒë√≥n ti·ªÖn s√¢n bay T√¢n S∆°n Nh·∫•t
                - Th·ªùi gian di chuy·ªÉn: 45 ph√∫t
                - Bao g·ªìm: n∆∞·ªõc u·ªëng, b√°o ch√≠, WiFi mi·ªÖn ph√≠
                - ƒê·∫∑t tr∆∞·ªõc 24h, h·ªßy mi·ªÖn ph√≠ tr∆∞·ªõc 12h
                
                2. SPA & WELLNESS CENTER
                Gi√°: 1,500,000 - 3,000,000 VNƒê/li·ªáu tr√¨nh
                - Massage truy·ªÅn th·ªëng Th√°i Lan (90 ph√∫t): 1,800,000 VNƒê
                - Li·ªáu ph√°p ƒë√° n√≥ng aromatherapy (120 ph√∫t): 2,500,000 VNƒê
                - G√≥i chƒÉm s√≥c to√†n th√¢n VIP (180 ph√∫t): 3,000,000 VNƒê
                - M·ªü c·ª≠a: 9:00 - 22:00 h√†ng ng√†y
                
                3. ROOM SERVICE 24/7
                Ph√≠ d·ªãch v·ª•: 50,000 VNƒê/ƒë∆°n h√†ng
                - Menu ƒëa d·∫°ng: M√≥n √Å, √Çu, chay
                - ƒê·ªì u·ªëng: cocktail, r∆∞·ª£u vang, n∆∞·ªõc ng·ªçt
                - Th·ªùi gian giao: 30-45 ph√∫t
                - Ph·ª•c v·ª• 24/7 t·∫•t c·∫£ c√°c ng√†y
                
                4. CONFERENCE & MEETING ROOMS
                Gi√°: 2,000,000 - 5,000,000 VNƒê/ng√†y
                - Ph√≤ng h·ªçp nh·ªè (20 ng∆∞·ªùi): 2,000,000 VNƒê/ng√†y
                - Ph√≤ng h·ªôi th·∫£o (100 ng∆∞·ªùi): 3,500,000 VNƒê/ng√†y
                - Auditorium (300 ng∆∞·ªùi): 5,000,000 VNƒê/ng√†y
                - Bao g·ªìm: projector, √¢m thanh, WiFi, coffee break
                """,
                "data_type": "services",
                "metadata": {
                    "extraction_mode": True,
                    "industry": "hotel",
                    "original_name": "hotel-services-2025.pdf",
                    "description": "Complete hotel services pricing and descriptions",
                    "tags": ["spa", "conference", "dining", "transport"],
                    "company_info": {
                        "company_id": "hotel-paradise-bay-001",
                        "industry": "hotel",
                        "name": "Paradise Bay Resort & Spa",
                    },
                    "language": "vi",
                },
            },
            "restaurant_products": {
                "text": """
                TH·ª∞C ƒê∆†N NH√Ä H√ÄNG GOLDEN DRAGON
                ƒê·∫∂C S·∫¢N VI·ªÜT NAM TRUY·ªÄN TH·ªêNG
                
                === M√ìN CH√çNH ===
                
                1. PH·ªû B√í ƒê·∫∂C BI·ªÜT - 89,000 VNƒê
                M√£ m√≥n: PHO-BO-001
                - Ph·ªü b√≤ v·ªõi ƒë·∫ßy ƒë·ªß: th·ªãt b√≤ t√°i, ch√≠n, g·∫ßu, g√¢n, s√°ch
                - N∆∞·ªõc d√πng h·∫ßm 24 gi·ªù t·ª´ x∆∞∆°ng b√≤ t∆∞∆°i
                - B√°nh ph·ªü l√†m t∆∞∆°i h√†ng ng√†y
                - K√®m rau th∆°m: h√∫ng qu·∫ø, ng√≤ gai, h√†nh l√°
                - Kh·ªëi l∆∞·ª£ng: 500g, ph·ª•c v·ª•: 1 ng∆∞·ªùi
                
                2. B√öN CH·∫¢ H√Ä N·ªòI TRUY·ªÄN TH·ªêNG - 75,000 VNƒê
                M√£ m√≥n: BUN-CHA-002
                - B√∫n t∆∞∆°i v·ªõi ch·∫£ n∆∞·ªõng than hoa th∆°m ph·ª©c
                - Th·ªãt n∆∞·ªõng ba ch·ªâ ∆∞·ªõp gia v·ªã ƒë·∫∑c bi·ªát
                - N∆∞·ªõc m·∫Øm chua ng·ªçt truy·ªÅn th·ªëng
                - Rau s·ªëng: x√† l√°ch, kinh gi·ªõi, h√∫ng l≈©i
                - Kh·ªëi l∆∞·ª£ng: 400g, ƒë·ªô cay: nh·∫π
                
                3. C∆†M T·∫§M S∆Ø·ªúN N∆Ø·ªöNG S√ÄI G√íN - 65,000 VNƒê
                M√£ m√≥n: COM-TAM-003
                - C∆°m t·∫•m th∆°m d·∫ªo, s∆∞·ªùn n∆∞·ªõng BBQ
                - Ch·∫£ tr·ª©ng, b√¨, m·ª° h√†nh
                - D∆∞a chua, n∆∞·ªõc m·∫Øm pha ch·∫•m
                - Canh s√∫p h√†nh t√≠m k√®m theo
                - Kh·ªëi l∆∞·ª£ng: 450g, ph·ª•c v·ª•: 1 ng∆∞·ªùi
                
                === TR√ÅNG MI·ªÜNG ===
                
                4. CH√à B√Å BA M√ÄU - 35,000 VNƒê
                M√£ m√≥n: CHE-3M-004
                - Ch√® ƒë·∫≠u xanh, ƒë·∫≠u ƒë·ªè, khoai m√¥n
                - N∆∞·ªõc c·ªët d·ª´a t∆∞∆°i, ƒë√° b√†o
                - Th·∫°ch rau c√¢u, ƒë·∫≠u ph·ªông rang
                - L·∫°nh, ng·ªçt v·ª´a, kh√¥ng ch·∫•t b·∫£o qu·∫£n
                """,
                "data_type": "products",
                "metadata": {
                    "extraction_mode": True,
                    "industry": "restaurant",
                    "original_name": "restaurant-menu-traditional-2025.pdf",
                    "description": "Vietnamese traditional restaurant menu with authentic dishes",
                    "tags": ["vietnamese", "traditional", "pho", "bun_cha", "com_tam"],
                    "company_info": {
                        "company_id": "restaurant-golden-dragon-001",
                        "industry": "restaurant",
                        "name": "Golden Dragon Restaurant",
                    },
                    "language": "vi",
                },
            },
            "banking_products": {
                "text": """
                NG√ÇN H√ÄNG TECHCOMBANK - S·∫¢N PH·∫®M TH·∫∫ T√çN D·ª§NG 2025
                
                === TH·∫∫ VISA ===
                
                1. TH·∫∫ VISA CLASSIC
                M√£ s·∫£n ph·∫©m: VISA-CLS-001
                - Ph√≠ th∆∞·ªùng ni√™n: 200,000 VNƒê (mi·ªÖn ph√≠ nƒÉm ƒë·∫ßu)
                - H·∫°n m·ª©c t√≠n d·ª•ng: 5 - 50 tri·ªáu VNƒê
                - L√£i su·∫•t: 2.5%/th√°ng (30% nƒÉm)
                - ∆Øu ƒë√£i: Ho√†n ti·ªÅn 1% mua s·∫Øm, mi·ªÖn ph√≠ r√∫t ti·ªÅn ATM Techcombank
                - Y√™u c·∫ßu: Thu nh·∫≠p t·ª´ 8 tri·ªáu/th√°ng
                - Th·ªùi gian duy·ªát: 7-10 ng√†y l√†m vi·ªác
                
                2. TH·∫∫ MASTERCARD PLATINUM
                M√£ s·∫£n ph·∫©m: MC-PLT-002  
                - Ph√≠ th∆∞·ªùng ni√™n: 800,000 VNƒê
                - H·∫°n m·ª©c t√≠n d·ª•ng: 50 - 500 tri·ªáu VNƒê
                - L√£i su·∫•t: 2.2%/th√°ng (26.4% nƒÉm)
                - ∆Øu ƒë√£i: Ho√†n ti·ªÅn 2%, ph√≤ng ch·ªù s√¢n bay, b·∫£o hi·ªÉm du l·ªãch
                - Y√™u c·∫ßu: Thu nh·∫≠p t·ª´ 25 tri·ªáu/th√°ng
                - B·∫£o hi·ªÉm: 1 t·ª∑ VNƒê tai n·∫°n du l·ªãch
                
                3. TH·∫∫ WORLD ELITE MASTERCARD
                M√£ s·∫£n ph·∫©m: MC-WE-003
                - Ph√≠ th∆∞·ªùng ni√™n: 3,500,000 VNƒê
                - H·∫°n m·ª©c t√≠n d·ª•ng: 500 tri·ªáu - 2 t·ª∑ VNƒê
                - L√£i su·∫•t: 2.0%/th√°ng (24% nƒÉm)
                - ∆Øu ƒë√£i: Ho√†n ti·ªÅn 3%, concierge 24/7, golf mi·ªÖn ph√≠
                - Y√™u c·∫ßu: Thu nh·∫≠p t·ª´ 100 tri·ªáu/th√°ng
                - D·ªãch v·ª•: Personal banker ri√™ng
                """,
                "data_type": "products",
                "metadata": {
                    "extraction_mode": True,
                    "industry": "banking",
                    "original_name": "techcombank-credit-cards-2025.pdf",
                    "description": "Techcombank credit card products with detailed terms",
                    "tags": [
                        "credit_card",
                        "visa",
                        "mastercard",
                        "cashback",
                        "premium",
                    ],
                    "company_info": {
                        "company_id": "bank-techcombank-001",
                        "industry": "banking",
                        "name": "Techcombank",
                    },
                    "language": "vi",
                },
            },
        }

    async def test_real_ai_extraction(self):
        """Test extraction using real AI service via API"""
        print("ü§ñ TESTING WITH REAL AI SERVICE VIA API")
        print("=" * 80)
        print(f"üîó API Endpoint: {self.base_url}")
        print("üåê Server Status: Testing connection...")

        # Test server connection
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{self.base_url}/health") as response:
                    if response.status == 200:
                        print("‚úÖ Server is running!")
                    else:
                        print(f"‚ö†Ô∏è Server responded with status {response.status}")
            except Exception as e:
                print(f"‚ùå Cannot connect to server: {e}")
                return

        print()

        for scenario_name, scenario in self.test_scenarios.items():
            print(f"\nüß™ Testing: {scenario_name.upper()}")
            print("-" * 60)

            text = scenario["text"]
            data_type = scenario["data_type"]
            metadata = scenario["metadata"]

            # Get industry info
            industry = metadata.get("industry")
            company_name = metadata.get("company_info", {}).get("name", "Unknown")

            print(f"üè¢ Company: {company_name}")
            print(f"üè≠ Industry: {industry}")
            print(f"üìä Type: {data_type}")
            print(f"üìù Text Length: {len(text)} chars")

            try:
                # Prepare API request
                api_data = {
                    "text_content": text,
                    "data_type": data_type,
                    "metadata": metadata,
                }

                print("ü§ñ Calling AI extraction API...")

                # Call API endpoint
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{self.base_url}/api/extract",
                        json=api_data,
                        headers={"Content-Type": "application/json"},
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            print("‚úÖ AI response received!")
                        else:
                            error_text = await response.text()
                            print(
                                f"‚ùå API call failed: {response.status} - {error_text}"
                            )
                            continue

                # Show results
                items = result.get(data_type, [])
                count = len(items)

                print(f"üìä Extracted: {count} {data_type}")

                if count > 0:
                    print(f"\nüìã Sample {data_type.capitalize()}:")
                    for i, item in enumerate(items[:2], 1):
                        name = item.get("name", "N/A")
                        category = item.get("category", "N/A")

                        if data_type == "products":
                            price = item.get("price", "N/A")
                            currency = item.get("currency", "")
                            sku = item.get("sku", "N/A")
                            print(f"   {i}. {name}")
                            print(
                                f"      Category: {category} | Price: {price} {currency}"
                            )
                            print(f"      SKU: {sku}")
                        else:
                            price_type = item.get("price_type", "N/A")
                            service_code = item.get("service_code", "N/A")
                            print(f"   {i}. {name}")
                            print(f"      Category: {category} | Type: {price_type}")
                            print(f"      Code: {service_code}")

                # Save result for inspection
                await self._save_result(scenario_name, result)

            except Exception as e:
                print(f"‚ùå Extraction failed: {str(e)}")
                import traceback

                print(f"üîç Debug info: {traceback.format_exc()}")

    async def _save_result(self, scenario_name: str, result: Dict[str, Any]):
        """Save extraction result to file"""
        output_dir = "real_ai_extraction_results"
        os.makedirs(output_dir, exist_ok=True)

        filename = f"{output_dir}/{scenario_name}_ai_result.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)

        print(f"üíæ Result saved: {filename}")

    async def test_dual_storage_with_ai(self):
        """Test dual storage strategy with real AI extraction"""
        print("\nüóÑÔ∏è  TESTING DUAL STORAGE WITH REAL AI")
        print("=" * 80)

        # Use hotel services for this test
        scenario = self.test_scenarios["hotel_services"]
        text = scenario["text"]
        metadata = scenario["metadata"]

        print("üè® Processing Hotel Services with Real AI...")
        print("-" * 50)

        try:
            # Get template and extract with AI
            template = self.template_factory.get_template_with_metadata(metadata)
            system_prompt = template.get_system_prompt("services")
            user_prompt = template.build_extraction_prompt(
                data_type="services",
                file_name=metadata.get("original_name"),
                language=metadata.get("language", "vi"),
            )

            full_prompt = f"{user_prompt}\n\nDocument content:\n{text}"

            # Call AI
            ai_result = await self.ai_service.generate_structured_response(
                system_prompt=system_prompt, user_prompt=full_prompt, temperature=0.1
            )

            # Parse and process
            if isinstance(ai_result, str):
                import json

                parsed_result = json.loads(ai_result)
            else:
                parsed_result = ai_result

            final_result = template.post_process(parsed_result, "services")
            services = final_result.get("services", [])

            print("üíæ DUAL STORAGE SIMULATION:")
            print()

            # High priority - structured data
            print("üìä HIGH PRIORITY STORAGE (Structured JSON):")
            structured_chunks = []
            for idx, service in enumerate(services):
                chunk_data = {
                    "chunk_id": f"hotel_services_structured_{idx}",
                    "data_type": "services",
                    "priority": "high",
                    "content": json.dumps(service, ensure_ascii=False),
                    "metadata": {
                        "name": service.get("name"),
                        "category": service.get("category"),
                        "price_type": service.get("price_type"),
                        "service_code": service.get("service_code"),
                        "tags": service.get("tags", [])[:5],
                    },
                }
                structured_chunks.append(chunk_data)
                print(
                    f"   ‚úÖ Chunk {idx+1}: {service.get('name')} ({service.get('category')})"
                )

            print()
            print("üóÇÔ∏è  LOW PRIORITY STORAGE (Raw Backup):")
            raw_chunk = {
                "chunk_id": "hotel_services_raw_backup",
                "data_type": "other",
                "priority": "low",
                "content": text,
                "metadata": {
                    "backup_for": "hotel_services_extraction",
                    "total_items_extracted": len(services),
                    "ai_provider": "deepseek" if self.deepseek_key else "chatgpt",
                    "raw_text_length": len(text),
                },
            }
            print(f"   ‚úÖ Raw backup: {len(text)} chars")
            print(f"   ‚úÖ Extraction metadata included")

            # Save dual storage simulation
            dual_storage_result = {
                "structured_storage": {
                    "chunks": structured_chunks,
                    "total_chunks": len(structured_chunks),
                    "priority": "high",
                },
                "raw_storage": {"chunk": raw_chunk, "priority": "low"},
                "extraction_info": {
                    "ai_provider": "deepseek" if self.deepseek_key else "chatgpt",
                    "template_used": template.__class__.__name__,
                    "total_services": len(services),
                },
            }

            await self._save_result("dual_storage_simulation", dual_storage_result)

            print()
            print("üéØ FRONTEND EDIT SIMULATION:")
            print("ID | Name | Category | JSON Preview")
            print("-" * 70)
            for i, chunk in enumerate(structured_chunks[:3], 1):
                metadata = chunk["metadata"]
                name = metadata["name"][:15]
                category = metadata["category"][:10]
                json_preview = chunk["content"][:30] + "..."
                print(f"{i:2d} | {name:15s} | {category:10s} | {json_preview}")

        except Exception as e:
            print(f"‚ùå Dual storage test failed: {str(e)}")


async def main():
    """Main test function"""
    tester = RealAIExtractionTester()

    print("ü§ñ REAL AI SERVICE EXTRACTION TESTING")
    print("=" * 80)
    print("Testing extraction with DeepSeek/ChatGPT API")
    print("This tests the complete flow that backend will use")
    print()

    # Test 1: Real AI extraction
    await tester.test_real_ai_extraction()

    # Test 2: Dual storage with AI
    await tester.test_dual_storage_with_ai()

    print("\nüéâ REAL AI EXTRACTION TESTS COMPLETED!")
    print("=" * 80)
    print("üí° This simulation shows:")
    print("   - Real AI service integration")
    print("   - Template-based extraction")
    print("   - Dual storage strategy")
    print("   - Frontend edit capabilities")
    print("   - Production-ready workflow")


if __name__ == "__main__":
    asyncio.run(main())
