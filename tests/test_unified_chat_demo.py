"""
Demo and Test Script for Unified Chat System
Script demo v√† test cho h·ªá th·ªëng chat th·ªëng nh·∫•t
"""

import asyncio
import json
from typing import Dict, Any
from datetime import datetime

from src.models.unified_models import (
    UnifiedChatRequest, Industry, Language, ChatIntent
)
from src.services.unified_chat_service import unified_chat_service

class UnifiedChatDemo:
    """
    Demo class for testing unified chat system
    L·ªõp demo ƒë·ªÉ test h·ªá th·ªëng chat th·ªëng nh·∫•t
    """
    
    def __init__(self):
        self.test_scenarios = self._create_test_scenarios()
    
    def _create_test_scenarios(self) -> Dict[str, list]:
        """
        Create test scenarios for different industries and languages
        T·∫°o c√°c scenario test cho c√°c ng√†nh v√† ng√¥n ng·ªØ kh√°c nhau
        """
        return {
            "banking_vietnamese": [
                {
                    "message": "Ch√†o b·∫°n, t√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ d·ªãch v·ª• vay c·ªßa ng√¢n h√†ng",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "H·ªèi th√¥ng tin chung v·ªÅ d·ªãch v·ª• vay"
                },
                {
                    "message": "T√¥i c·∫ßn vay 500 tri·ªáu ƒë·ªÉ mua nh√†, l√£i su·∫•t bao nhi√™u?",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "C√≥ nhu c·∫ßu vay c·ª• th·ªÉ"
                },
                {
                    "message": "Cho t√¥i bi·∫øt chi nh√°nh g·∫ßn nh·∫•t",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "H·ªèi th√¥ng tin chi nh√°nh"
                },
                {
                    "message": "T√¥i mu·ªën ƒëƒÉng k√Ω vay th·∫ø ch·∫•p",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "ƒêƒÉng k√Ω s·∫£n ph·∫©m vay"
                }
            ],
            "banking_english": [
                {
                    "message": "Hello, I would like to know about your loan services",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "General inquiry about loan services"
                },
                {
                    "message": "I need to borrow 500 million VND to buy a house, what's the interest rate?",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "Specific loan need"
                },
                {
                    "message": "Can you tell me about your interest rates?",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "Information about rates"
                },
                {
                    "message": "I want to apply for a mortgage loan",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "Loan application intent"
                }
            ],
            "restaurant_vietnamese": [
                {
                    "message": "Ch√†o b·∫°n, menu c·ªßa nh√† h√†ng c√≥ m√≥n g√¨?",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "H·ªèi v·ªÅ th·ª±c ƒë∆°n"
                },
                {
                    "message": "T√¥i mu·ªën ƒë·∫∑t b√†n cho 4 ng∆∞·ªùi v√†o t·ªëi nay",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "ƒê·∫∑t b√†n"
                },
                {
                    "message": "Nh√† h√†ng c√≥ giao h√†ng kh√¥ng?",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "H·ªèi d·ªãch v·ª• giao h√†ng"
                },
                {
                    "message": "T√¥i mu·ªën g·ªçi m√≥n takeaway",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "ƒê·∫∑t m√≥n mang v·ªÅ"
                }
            ],
            "restaurant_english": [
                {
                    "message": "Hello, what's on your menu?",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "Menu inquiry"
                },
                {
                    "message": "I'd like to book a table for 4 people tonight",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "Table reservation"
                },
                {
                    "message": "Do you offer delivery service?",
                    "expected_intent": ChatIntent.INFORMATION,
                    "description": "Delivery information"
                },
                {
                    "message": "I want to place an order for pickup",
                    "expected_intent": ChatIntent.SALES_INQUIRY,
                    "description": "Order placement"
                }
            ]
        }
    
    async def run_comprehensive_demo(self):
        """
        Run comprehensive demo of all features
        Ch·∫°y demo to√†n di·ªán c·ªßa t·∫•t c·∫£ t√≠nh nƒÉng
        """
        print("üöÄ UNIFIED CHAT SYSTEM DEMO")
        print("=" * 50)
        
        # Test language detection / Test ph√°t hi·ªán ng√¥n ng·ªØ
        await self._test_language_detection()
        
        # Test intent detection / Test ph√°t hi·ªán √Ω ƒë·ªãnh
        await self._test_intent_detection()
        
        # Test banking scenarios / Test k·ªãch b·∫£n ng√¢n h√†ng
        await self._test_banking_scenarios()
        
        # Test restaurant scenarios / Test k·ªãch b·∫£n nh√† h√†ng
        await self._test_restaurant_scenarios()
        
        # Test session management / Test qu·∫£n l√Ω phi√™n
        await self._test_session_management()
        
        print("\n‚úÖ DEMO COMPLETED SUCCESSFULLY")
        print("=" * 50)
    
    async def _test_language_detection(self):
        """Test language detection capabilities / Test kh·∫£ nƒÉng ph√°t hi·ªán ng√¥n ng·ªØ"""
        print("\nüìù TESTING LANGUAGE DETECTION")
        print("-" * 30)
        
        from src.services.language_detector import language_detector
        
        test_messages = [
            ("Xin ch√†o, t√¥i mu·ªën vay ti·ªÅn", "Vietnamese"),
            ("Hello, I need a loan", "English"),
            ("T√¥i need to borrow money", "Mixed - should detect Vietnamese"),
            ("I want vay ti·ªÅn", "Mixed - should detect English"),
            ("500 tri·ªáu VNƒê", "Vietnamese (currency)"),
            ("500 USD", "English (currency)")
        ]
        
        for message, expected in test_messages:
            result = language_detector.detect_language(message)
            print(f"Message: '{message}'")
            print(f"  Detected: {result.language.value} (confidence: {result.confidence:.2f})")
            print(f"  Expected: {expected}")
            print(f"  Indicators: {result.indicators[:3]}")  # Show first 3 indicators
            print()
    
    async def _test_intent_detection(self):
        """Test intent detection capabilities / Test kh·∫£ nƒÉng ph√°t hi·ªán √Ω ƒë·ªãnh"""
        print("\nüéØ TESTING INTENT DETECTION")
        print("-" * 30)
        
        from src.services.intent_detector import intent_detector
        
        test_cases = [
            {
                "message": "T√¥i mu·ªën vay 500 tri·ªáu",
                "industry": Industry.BANKING,
                "expected": ChatIntent.SALES_INQUIRY
            },
            {
                "message": "L√£i su·∫•t vay l√† bao nhi√™u?",
                "industry": Industry.BANKING,
                "expected": ChatIntent.INFORMATION
            },
            {
                "message": "I want to book a table",
                "industry": Industry.RESTAURANT,
                "expected": ChatIntent.SALES_INQUIRY
            },
            {
                "message": "What's on the menu?",
                "industry": Industry.RESTAURANT,
                "expected": ChatIntent.INFORMATION
            }
        ]
        
        for case in test_cases:
            result = await intent_detector.detect_intent(
                message=case["message"],
                industry=case["industry"],
                company_id="demo_company"
            )
            
            print(f"Message: '{case['message']}'")
            print(f"  Industry: {case['industry'].value}")
            print(f"  Detected: {result.intent.value} (confidence: {result.confidence:.2f})")
            print(f"  Expected: {case['expected'].value}")
            print(f"  Match: {'‚úÖ' if result.intent == case['expected'] else '‚ùå'}")
            print(f"  Reasoning: {result.reasoning}")
            print()
    
    async def _test_banking_scenarios(self):
        """Test banking conversation scenarios / Test k·ªãch b·∫£n h·ªôi tho·∫°i ng√¢n h√†ng"""
        print("\nüè¶ TESTING BANKING SCENARIOS")
        print("-" * 30)
        
        # Test Vietnamese banking conversation / Test h·ªôi tho·∫°i ng√¢n h√†ng ti·∫øng Vi·ªát
        await self._test_conversation_flow(
            scenarios=self.test_scenarios["banking_vietnamese"],
            industry=Industry.BANKING,
            language=Language.VIETNAMESE,
            title="Vietnamese Banking Conversation"
        )
        
        # Test English banking conversation / Test h·ªôi tho·∫°i ng√¢n h√†ng ti·∫øng Anh
        await self._test_conversation_flow(
            scenarios=self.test_scenarios["banking_english"],
            industry=Industry.BANKING,
            language=Language.ENGLISH,
            title="English Banking Conversation"
        )
    
    async def _test_restaurant_scenarios(self):
        """Test restaurant conversation scenarios / Test k·ªãch b·∫£n h·ªôi tho·∫°i nh√† h√†ng"""
        print("\nüçΩÔ∏è TESTING RESTAURANT SCENARIOS")
        print("-" * 30)
        
        # Test Vietnamese restaurant conversation / Test h·ªôi tho·∫°i nh√† h√†ng ti·∫øng Vi·ªát
        await self._test_conversation_flow(
            scenarios=self.test_scenarios["restaurant_vietnamese"],
            industry=Industry.RESTAURANT,
            language=Language.VIETNAMESE,
            title="Vietnamese Restaurant Conversation"
        )
        
        # Test English restaurant conversation / Test h·ªôi tho·∫°i nh√† h√†ng ti·∫øng Anh
        await self._test_conversation_flow(
            scenarios=self.test_scenarios["restaurant_english"],
            industry=Industry.RESTAURANT,
            language=Language.ENGLISH,
            title="English Restaurant Conversation"
        )
    
    async def _test_conversation_flow(
        self,
        scenarios: list,
        industry: Industry,
        language: Language,
        title: str
    ):
        """Test a complete conversation flow / Test lu·ªìng h·ªôi tho·∫°i ho√†n ch·ªânh"""
        print(f"\nüìã {title}")
        print("." * 25)
        
        session_id = f"demo_{industry.value}_{language.value}_{int(datetime.now().timestamp())}"
        
        for i, scenario in enumerate(scenarios, 1):
            print(f"\nStep {i}: {scenario['description']}")
            print(f"User: {scenario['message']}")
            
            # Create request / T·∫°o request
            request = UnifiedChatRequest(
                message=scenario['message'],
                company_id=f"demo_{industry.value}",
                industry=industry,
                session_id=session_id,
                user_id="demo_user",
                language=language
            )
            
            try:
                # Process message / X·ª≠ l√Ω tin nh·∫Øn
                response = await unified_chat_service.process_message(request)
                
                # Display results / Hi·ªÉn th·ªã k·∫øt qu·∫£
                print(f"AI: {response.response[:200]}{'...' if len(response.response) > 200 else ''}")
                print(f"Intent: {response.intent.value} (confidence: {response.confidence:.2f})")
                print(f"Language: {response.language.value}")
                print(f"Expected Intent: {scenario['expected_intent'].value}")
                print(f"Match: {'‚úÖ' if response.intent == scenario['expected_intent'] else '‚ùå'}")
                
                if response.suggestions:
                    print(f"Suggestions: {', '.join(response.suggestions[:2])}")
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
            
            print("-" * 40)
    
    async def _test_session_management(self):
        """Test session management features / Test t√≠nh nƒÉng qu·∫£n l√Ω phi√™n"""
        print("\nüíæ TESTING SESSION MANAGEMENT")
        print("-" * 30)
        
        session_id = f"demo_session_{int(datetime.now().timestamp())}"
        
        # Send multiple messages to build session history / G·ª≠i nhi·ªÅu tin nh·∫Øn ƒë·ªÉ t·∫°o l·ªãch s·ª≠ phi√™n
        messages = [
            "Ch√†o b·∫°n!",
            "T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ vay mua nh√†",
            "L√£i su·∫•t th·∫ø n√†o?",
            "T√¥i c√≥ th·ªÉ vay t·ªëi ƒëa bao nhi√™u?"
        ]
        
        print("Building conversation history...")
        for msg in messages:
            request = UnifiedChatRequest(
                message=msg,
                company_id="demo_banking",
                industry=Industry.BANKING,
                session_id=session_id,
                user_id="demo_user",
                language=Language.AUTO_DETECT
            )
            
            response = await unified_chat_service.process_message(request)
            print(f"User: {msg}")
            print(f"AI: {response.response[:100]}...")
            print()
        
        # Check session data / Ki·ªÉm tra d·ªØ li·ªáu phi√™n
        session_data = unified_chat_service._get_session_data(session_id)
        conversation_history = unified_chat_service._get_conversation_history(session_id)
        
        print(f"Session ID: {session_id}")
        print(f"Session Data: {session_data}")
        print(f"Conversation History Length: {len(conversation_history)}")
        print(f"Last Message: {conversation_history[-1].content if conversation_history else 'None'}")
    
    async def interactive_demo(self):
        """
        Interactive demo where user can input messages
        Demo t∆∞∆°ng t√°c n∆°i ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p tin nh·∫Øn
        """
        print("ü§ñ INTERACTIVE UNIFIED CHAT DEMO")
        print("=" * 40)
        print("Available industries:", [industry.value for industry in Industry])
        print("Available languages: vi, en, auto")
        print("Type 'quit' to exit")
        print("-" * 40)
        
        # Get user preferences / L·∫•y ∆∞a th√≠ch ng∆∞·ªùi d√πng
        industry_input = input("Choose industry (banking/restaurant/hotel): ").strip().lower()
        language_input = input("Choose language (vi/en/auto): ").strip().lower()
        
        # Map inputs / √Ånh x·∫° inputs
        industry_map = {
            "banking": Industry.BANKING,
            "restaurant": Industry.RESTAURANT,
            "hotel": Industry.HOTEL
        }
        
        language_map = {
            "vi": Language.VIETNAMESE,
            "en": Language.ENGLISH,
            "auto": Language.AUTO_DETECT
        }
        
        industry = industry_map.get(industry_input, Industry.BANKING)
        language = language_map.get(language_input, Language.AUTO_DETECT)
        
        session_id = f"interactive_{int(datetime.now().timestamp())}"
        
        print(f"\nüéØ Selected: {industry.value} | {language.value}")
        print("=" * 40)
        
        while True:
            try:
                user_input = input("\nüë§ You: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'bye']:
                    break
                
                if not user_input:
                    continue
                
                # Create request / T·∫°o request
                request = UnifiedChatRequest(
                    message=user_input,
                    company_id=f"demo_{industry.value}",
                    industry=industry,
                    session_id=session_id,
                    user_id="interactive_user",
                    language=language
                )
                
                # Process message / X·ª≠ l√Ω tin nh·∫Øn
                response = await unified_chat_service.process_message(request)
                
                # Display response / Hi·ªÉn th·ªã ph·∫£n h·ªìi
                print(f"ü§ñ AI: {response.response}")
                print(f"   üìä Intent: {response.intent.value} | Confidence: {response.confidence:.2f}")
                print(f"   üåê Language: {response.language.value}")
                
                if response.suggestions:
                    print(f"   üí° Suggestions: {', '.join(response.suggestions)}")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
        
        print("\nüëã Thank you for using Unified Chat Demo!")

async def main():
    """Main demo function / H√†m demo ch√≠nh"""
    demo = UnifiedChatDemo()
    
    print("Choose demo mode:")
    print("1. Comprehensive automated demo")
    print("2. Interactive demo")
    
    choice = input("Enter choice (1 or 2): ").strip()
    
    if choice == "1":
        await demo.run_comprehensive_demo()
    elif choice == "2":
        await demo.interactive_demo()
    else:
        print("Invalid choice. Running comprehensive demo...")
        await demo.run_comprehensive_demo()

if __name__ == "__main__":
    asyncio.run(main())
